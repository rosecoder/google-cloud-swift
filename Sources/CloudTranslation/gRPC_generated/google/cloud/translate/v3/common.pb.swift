// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/translate/v3/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Possible states of long running operations.
enum Google_Cloud_Translation_V3_OperationState: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Invalid.
  case unspecified // = 0

  /// Request is being processed.
  case running // = 1

  /// The operation was successful.
  case succeeded // = 2

  /// Failed to process operation.
  case failed // = 3

  /// Request is in the process of being canceled after caller invoked
  /// longrunning.Operations.CancelOperation on the request id.
  case cancelling // = 4

  /// The operation request was successfully canceled.
  case cancelled // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .running
    case 2: self = .succeeded
    case 3: self = .failed
    case 4: self = .cancelling
    case 5: self = .cancelled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .running: return 1
    case .succeeded: return 2
    case .failed: return 3
    case .cancelling: return 4
    case .cancelled: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Google_Cloud_Translation_V3_OperationState] = [
    .unspecified,
    .running,
    .succeeded,
    .failed,
    .cancelling,
    .cancelled,
  ]

}

/// The Google Cloud Storage location for the input content.
struct Google_Cloud_Translation_V3_GcsInputSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Source data URI. For example, `gs://my_bucket/my_object`.
  var inputUri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// An inlined file.
struct Google_Cloud_Translation_V3_FileInputSource: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The file's mime type.
  var mimeType: String = String()

  /// Required. The file's byte contents.
  var content: Data = Data()

  /// Required. The file's display name.
  var displayName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The Google Cloud Storage location for the output content.
struct Google_Cloud_Translation_V3_GcsOutputDestination: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Google Cloud Storage URI to output directory. For example,
  /// `gs://bucket/directory`. The requesting user must have write permission to
  /// the bucket. The directory will be created if it doesn't exist.
  var outputUriPrefix: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Represents a single entry in a glossary.
struct Google_Cloud_Translation_V3_GlossaryEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier. The resource name of the entry.
  /// Format:
  ///   `projects/*/locations/*/glossaries/*/glossaryEntries/*`
  var name: String = String()

  /// The different data for the glossary types (Unidirectional, Equivalent term
  /// sets).
  var data: Google_Cloud_Translation_V3_GlossaryEntry.OneOf_Data? = nil

  /// Used for an unidirectional glossary.
  var termsPair: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair {
    get {
      if case .termsPair(let v)? = data {return v}
      return Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair()
    }
    set {data = .termsPair(newValue)}
  }

  /// Used for an equivalent term sets glossary.
  var termsSet: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet {
    get {
      if case .termsSet(let v)? = data {return v}
      return Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet()
    }
    set {data = .termsSet(newValue)}
  }

  /// Describes the glossary entry.
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The different data for the glossary types (Unidirectional, Equivalent term
  /// sets).
  enum OneOf_Data: Equatable, Sendable {
    /// Used for an unidirectional glossary.
    case termsPair(Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair)
    /// Used for an equivalent term sets glossary.
    case termsSet(Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet)

  }

  /// Represents a single entry for an unidirectional glossary.
  struct GlossaryTermsPair: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The source term is the term that will get match in the text,
    var sourceTerm: Google_Cloud_Translation_V3_GlossaryTerm {
      get {return _sourceTerm ?? Google_Cloud_Translation_V3_GlossaryTerm()}
      set {_sourceTerm = newValue}
    }
    /// Returns true if `sourceTerm` has been explicitly set.
    var hasSourceTerm: Bool {return self._sourceTerm != nil}
    /// Clears the value of `sourceTerm`. Subsequent reads from it will return its default value.
    mutating func clearSourceTerm() {self._sourceTerm = nil}

    /// The term that will replace the match source term.
    var targetTerm: Google_Cloud_Translation_V3_GlossaryTerm {
      get {return _targetTerm ?? Google_Cloud_Translation_V3_GlossaryTerm()}
      set {_targetTerm = newValue}
    }
    /// Returns true if `targetTerm` has been explicitly set.
    var hasTargetTerm: Bool {return self._targetTerm != nil}
    /// Clears the value of `targetTerm`. Subsequent reads from it will return its default value.
    mutating func clearTargetTerm() {self._targetTerm = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _sourceTerm: Google_Cloud_Translation_V3_GlossaryTerm? = nil
    fileprivate var _targetTerm: Google_Cloud_Translation_V3_GlossaryTerm? = nil
  }

  /// Represents a single entry for an equivalent term set glossary. This is used
  /// for equivalent term sets where each term can be replaced by the other terms
  /// in the set.
  struct GlossaryTermsSet: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Each term in the set represents a term that can be replaced by the other
    /// terms.
    var terms: [Google_Cloud_Translation_V3_GlossaryTerm] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// Represents a single glossary term
struct Google_Cloud_Translation_V3_GlossaryTerm: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The language for this glossary term.
  var languageCode: String = String()

  /// The text for the glossary term.
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.translation.v3"

extension Google_Cloud_Translation_V3_OperationState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_STATE_UNSPECIFIED"),
    1: .same(proto: "OPERATION_STATE_RUNNING"),
    2: .same(proto: "OPERATION_STATE_SUCCEEDED"),
    3: .same(proto: "OPERATION_STATE_FAILED"),
    4: .same(proto: "OPERATION_STATE_CANCELLING"),
    5: .same(proto: "OPERATION_STATE_CANCELLED"),
  ]
}

extension Google_Cloud_Translation_V3_GcsInputSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GcsInputSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.inputUri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputUri.isEmpty {
      try visitor.visitSingularStringField(value: self.inputUri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GcsInputSource, rhs: Google_Cloud_Translation_V3_GcsInputSource) -> Bool {
    if lhs.inputUri != rhs.inputUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_FileInputSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileInputSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mime_type"),
    2: .same(proto: "content"),
    3: .standard(proto: "display_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 2)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_FileInputSource, rhs: Google_Cloud_Translation_V3_FileInputSource) -> Bool {
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.content != rhs.content {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_GcsOutputDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GcsOutputDestination"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "output_uri_prefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.outputUriPrefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outputUriPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.outputUriPrefix, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GcsOutputDestination, rhs: Google_Cloud_Translation_V3_GcsOutputDestination) -> Bool {
    if lhs.outputUriPrefix != rhs.outputUriPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_GlossaryEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GlossaryEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "terms_pair"),
    3: .standard(proto: "terms_set"),
    4: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        var v: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .termsPair(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .termsPair(v)
        }
      }()
      case 3: try {
        var v: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .termsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .termsSet(v)
        }
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    switch self.data {
    case .termsPair?: try {
      guard case .termsPair(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .termsSet?: try {
      guard case .termsSet(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GlossaryEntry, rhs: Google_Cloud_Translation_V3_GlossaryEntry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.data != rhs.data {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Google_Cloud_Translation_V3_GlossaryEntry.protoMessageName + ".GlossaryTermsPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_term"),
    2: .standard(proto: "target_term"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sourceTerm) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetTerm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sourceTerm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._targetTerm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair, rhs: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsPair) -> Bool {
    if lhs._sourceTerm != rhs._sourceTerm {return false}
    if lhs._targetTerm != rhs._targetTerm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Google_Cloud_Translation_V3_GlossaryEntry.protoMessageName + ".GlossaryTermsSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "terms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.terms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.terms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.terms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet, rhs: Google_Cloud_Translation_V3_GlossaryEntry.GlossaryTermsSet) -> Bool {
    if lhs.terms != rhs.terms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Translation_V3_GlossaryTerm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GlossaryTerm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_code"),
    2: .same(proto: "text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Cloud_Translation_V3_GlossaryTerm, rhs: Google_Cloud_Translation_V3_GlossaryTerm) -> Bool {
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
