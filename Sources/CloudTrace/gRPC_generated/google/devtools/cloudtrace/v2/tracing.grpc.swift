//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: google/devtools/cloudtrace/v2/tracing.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for collecting and viewing traces and spans within a trace.
///
/// A trace is a collection of spans corresponding to a single
/// operation or a set of operations in an application.
///
/// A span is an individual timed event which forms a node of the trace tree.
/// A single trace can contain spans from multiple services.
///
/// Usage: instantiate `Google_Devtools_Cloudtrace_V2_TraceServiceClient`, then call methods of this protocol to make API calls.
internal protocol Google_Devtools_Cloudtrace_V2_TraceServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? { get }

  func batchWriteSpans(
    _ request: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func createSpan(
    _ request: Google_Devtools_Cloudtrace_V2_Span,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V2_Span, Google_Devtools_Cloudtrace_V2_Span>
}

extension Google_Devtools_Cloudtrace_V2_TraceServiceClientProtocol {
  internal var serviceName: String {
    return "google.devtools.cloudtrace.v2.TraceService"
  }

  /// Batch writes new spans to new or existing traces. You cannot update
  /// existing spans.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchWriteSpans.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchWriteSpans(
    _ request: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.batchWriteSpans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteSpansInterceptors() ?? []
    )
  }

  /// Creates a new span.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSpan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSpan(
    _ request: Google_Devtools_Cloudtrace_V2_Span,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Devtools_Cloudtrace_V2_Span, Google_Devtools_Cloudtrace_V2_Span> {
    return self.makeUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.createSpan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSpanInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Google_Devtools_Cloudtrace_V2_TraceServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Google_Devtools_Cloudtrace_V2_TraceServiceNIOClient")
internal final class Google_Devtools_Cloudtrace_V2_TraceServiceClient: Google_Devtools_Cloudtrace_V2_TraceServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.devtools.cloudtrace.v2.TraceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Google_Devtools_Cloudtrace_V2_TraceServiceNIOClient: Google_Devtools_Cloudtrace_V2_TraceServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the google.devtools.cloudtrace.v2.TraceService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service for collecting and viewing traces and spans within a trace.
///
/// A trace is a collection of spans corresponding to a single
/// operation or a set of operations in an application.
///
/// A span is an individual timed event which forms a node of the trace tree.
/// A single trace can contain spans from multiple services.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Google_Devtools_Cloudtrace_V2_TraceServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? { get }

  func makeBatchWriteSpansCall(
    _ request: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeCreateSpanCall(
    _ request: Google_Devtools_Cloudtrace_V2_Span,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Cloudtrace_V2_Span, Google_Devtools_Cloudtrace_V2_Span>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Devtools_Cloudtrace_V2_TraceServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeBatchWriteSpansCall(
    _ request: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.batchWriteSpans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteSpansInterceptors() ?? []
    )
  }

  internal func makeCreateSpanCall(
    _ request: Google_Devtools_Cloudtrace_V2_Span,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Devtools_Cloudtrace_V2_Span, Google_Devtools_Cloudtrace_V2_Span> {
    return self.makeAsyncUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.createSpan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSpanInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Devtools_Cloudtrace_V2_TraceServiceAsyncClientProtocol {
  internal func batchWriteSpans(
    _ request: Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.batchWriteSpans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchWriteSpansInterceptors() ?? []
    )
  }

  internal func createSpan(
    _ request: Google_Devtools_Cloudtrace_V2_Span,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Devtools_Cloudtrace_V2_Span {
    return try await self.performAsyncUnaryCall(
      path: Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.createSpan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSpanInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Google_Devtools_Cloudtrace_V2_TraceServiceAsyncClient: Google_Devtools_Cloudtrace_V2_TraceServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Google_Devtools_Cloudtrace_V2_TraceServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'batchWriteSpans'.
  func makeBatchWriteSpansInterceptors() -> [ClientInterceptor<Google_Devtools_Cloudtrace_V2_BatchWriteSpansRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'createSpan'.
  func makeCreateSpanInterceptors() -> [ClientInterceptor<Google_Devtools_Cloudtrace_V2_Span, Google_Devtools_Cloudtrace_V2_Span>]
}

internal enum Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TraceService",
    fullName: "google.devtools.cloudtrace.v2.TraceService",
    methods: [
      Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.batchWriteSpans,
      Google_Devtools_Cloudtrace_V2_TraceServiceClientMetadata.Methods.createSpan,
    ]
  )

  internal enum Methods {
    internal static let batchWriteSpans = GRPCMethodDescriptor(
      name: "BatchWriteSpans",
      path: "/google.devtools.cloudtrace.v2.TraceService/BatchWriteSpans",
      type: GRPCCallType.unary
    )

    internal static let createSpan = GRPCMethodDescriptor(
      name: "CreateSpan",
      path: "/google.devtools.cloudtrace.v2.TraceService/CreateSpan",
      type: GRPCCallType.unary
    )
  }
}

