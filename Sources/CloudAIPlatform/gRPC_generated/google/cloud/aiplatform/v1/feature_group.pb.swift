// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature_group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Vertex AI Feature Group.
public struct Google_Cloud_Aiplatform_V1_FeatureGroup: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var source: Google_Cloud_Aiplatform_V1_FeatureGroup.OneOf_Source? = nil

  /// Indicates that features for this group come from BigQuery Table/View.
  /// By default treats the source as a sparse time series source. The BigQuery
  /// source table or view must have at least one entity ID column and a column
  /// named `feature_timestamp`.
  public var bigQuery: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery {
    get {
      if case .bigQuery(let v)? = source {return v}
      return Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery()
    }
    set {source = .bigQuery(newValue)}
  }

  /// Identifier. Name of the FeatureGroup. Format:
  /// `projects/{project}/locations/{location}/featureGroups/{featureGroup}`
  public var name: String = String()

  /// Output only. Timestamp when this FeatureGroup was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this FeatureGroup was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Optional. Used to perform consistent read-modify-write updates. If not set,
  /// a blind "overwrite" update happens.
  public var etag: String = String()

  /// Optional. The labels with user-defined metadata to organize your
  /// FeatureGroup.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  /// No more than 64 user labels can be associated with one
  /// FeatureGroup(System labels are excluded)." System reserved label keys
  /// are prefixed with "aiplatform.googleapis.com/" and are immutable.
  public var labels: Dictionary<String,String> = [:]

  /// Optional. Description of the FeatureGroup.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Source: Equatable, Sendable {
    /// Indicates that features for this group come from BigQuery Table/View.
    /// By default treats the source as a sparse time series source. The BigQuery
    /// source table or view must have at least one entity ID column and a column
    /// named `feature_timestamp`.
    case bigQuery(Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery)

  }

  /// Input source type for BigQuery Tables and Views.
  public struct BigQuery: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. Immutable. The BigQuery source URI that points to either a
    /// BigQuery Table or View.
    public var bigQuerySource: Google_Cloud_Aiplatform_V1_BigQuerySource {
      get {return _bigQuerySource ?? Google_Cloud_Aiplatform_V1_BigQuerySource()}
      set {_bigQuerySource = newValue}
    }
    /// Returns true if `bigQuerySource` has been explicitly set.
    public var hasBigQuerySource: Bool {return self._bigQuerySource != nil}
    /// Clears the value of `bigQuerySource`. Subsequent reads from it will return its default value.
    public mutating func clearBigQuerySource() {self._bigQuerySource = nil}

    /// Optional. Columns to construct entity_id / row keys.
    /// If not provided defaults to `entity_id`.
    public var entityIDColumns: [String] = []

    /// Optional. If the source is a time-series source, this can be set to
    /// control how downstream sources (ex:
    /// [FeatureView][google.cloud.aiplatform.v1.FeatureView] ) will treat
    /// time-series sources. If not set, will treat the source as a time-series
    /// source with `feature_timestamp` as timestamp column and no scan boundary.
    public var timeSeries: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries {
      get {return _timeSeries ?? Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries()}
      set {_timeSeries = newValue}
    }
    /// Returns true if `timeSeries` has been explicitly set.
    public var hasTimeSeries: Bool {return self._timeSeries != nil}
    /// Clears the value of `timeSeries`. Subsequent reads from it will return its default value.
    public mutating func clearTimeSeries() {self._timeSeries = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct TimeSeries: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Optional. Column hosting timestamp values for a time-series source.
      /// Will be used to determine the latest `feature_values` for each entity.
      /// Optional. If not provided, column named `feature_timestamp` of
      /// type `TIMESTAMP` will be used.
      public var timestampColumn: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _bigQuerySource: Google_Cloud_Aiplatform_V1_BigQuerySource? = nil
    fileprivate var _timeSeries: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries? = nil
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_FeatureGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeatureGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "big_query"),
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "update_time"),
    4: .same(proto: "etag"),
    5: .same(proto: "labels"),
    6: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try {
        var v: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .bigQuery(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .bigQuery(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 4)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    try { if case .bigQuery(let v)? = self.source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureGroup, rhs: Google_Cloud_Aiplatform_V1_FeatureGroup) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureGroup.protoMessageName + ".BigQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "big_query_source"),
    2: .standard(proto: "entity_id_columns"),
    4: .standard(proto: "time_series"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._bigQuerySource) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.entityIDColumns) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timeSeries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bigQuerySource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.entityIDColumns.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entityIDColumns, fieldNumber: 2)
    }
    try { if let v = self._timeSeries {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery, rhs: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery) -> Bool {
    if lhs._bigQuerySource != rhs._bigQuerySource {return false}
    if lhs.entityIDColumns != rhs.entityIDColumns {return false}
    if lhs._timeSeries != rhs._timeSeries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.protoMessageName + ".TimeSeries"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_column"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.timestampColumn) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timestampColumn.isEmpty {
      try visitor.visitSingularStringField(value: self.timestampColumn, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries, rhs: Google_Cloud_Aiplatform_V1_FeatureGroup.BigQuery.TimeSeries) -> Bool {
    if lhs.timestampColumn != rhs.timestampColumn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
