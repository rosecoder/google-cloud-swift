// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/migratable_resource.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents one resource that exists in automl.googleapis.com,
/// datalabeling.googleapis.com or ml.googleapis.com.
public struct Google_Cloud_Aiplatform_V1_MigratableResource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var resource: Google_Cloud_Aiplatform_V1_MigratableResource.OneOf_Resource? = nil

  /// Output only. Represents one Version in ml.googleapis.com.
  public var mlEngineModelVersion: Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion {
    get {
      if case .mlEngineModelVersion(let v)? = resource {return v}
      return Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion()
    }
    set {resource = .mlEngineModelVersion(newValue)}
  }

  /// Output only. Represents one Model in automl.googleapis.com.
  public var automlModel: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel {
    get {
      if case .automlModel(let v)? = resource {return v}
      return Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel()
    }
    set {resource = .automlModel(newValue)}
  }

  /// Output only. Represents one Dataset in automl.googleapis.com.
  public var automlDataset: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset {
    get {
      if case .automlDataset(let v)? = resource {return v}
      return Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset()
    }
    set {resource = .automlDataset(newValue)}
  }

  /// Output only. Represents one Dataset in datalabeling.googleapis.com.
  public var dataLabelingDataset: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset {
    get {
      if case .dataLabelingDataset(let v)? = resource {return v}
      return Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset()
    }
    set {resource = .dataLabelingDataset(newValue)}
  }

  /// Output only. Timestamp when the last migration attempt on this
  /// MigratableResource started. Will not be set if there's no migration attempt
  /// on this MigratableResource.
  public var lastMigrateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastMigrateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastMigrateTime = newValue}
  }
  /// Returns true if `lastMigrateTime` has been explicitly set.
  public var hasLastMigrateTime: Bool {return self._lastMigrateTime != nil}
  /// Clears the value of `lastMigrateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastMigrateTime() {self._lastMigrateTime = nil}

  /// Output only. Timestamp when this MigratableResource was last updated.
  public var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  public var hasLastUpdateTime: Bool {return self._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateTime() {self._lastUpdateTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Resource: Equatable, Sendable {
    /// Output only. Represents one Version in ml.googleapis.com.
    case mlEngineModelVersion(Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion)
    /// Output only. Represents one Model in automl.googleapis.com.
    case automlModel(Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel)
    /// Output only. Represents one Dataset in automl.googleapis.com.
    case automlDataset(Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset)
    /// Output only. Represents one Dataset in datalabeling.googleapis.com.
    case dataLabelingDataset(Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset)

  }

  /// Represents one model Version in ml.googleapis.com.
  public struct MlEngineModelVersion: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The ml.googleapis.com endpoint that this model Version currently lives
    /// in.
    /// Example values:
    ///
    /// * ml.googleapis.com
    /// * us-centrall-ml.googleapis.com
    /// * europe-west4-ml.googleapis.com
    /// * asia-east1-ml.googleapis.com
    public var endpoint: String = String()

    /// Full resource name of ml engine model Version.
    /// Format: `projects/{project}/models/{model}/versions/{version}`.
    public var version: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents one Model in automl.googleapis.com.
  public struct AutomlModel: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Full resource name of automl Model.
    /// Format:
    /// `projects/{project}/locations/{location}/models/{model}`.
    public var model: String = String()

    /// The Model's display name in automl.googleapis.com.
    public var modelDisplayName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents one Dataset in automl.googleapis.com.
  public struct AutomlDataset: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Full resource name of automl Dataset.
    /// Format:
    /// `projects/{project}/locations/{location}/datasets/{dataset}`.
    public var dataset: String = String()

    /// The Dataset's display name in automl.googleapis.com.
    public var datasetDisplayName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents one Dataset in datalabeling.googleapis.com.
  public struct DataLabelingDataset: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Full resource name of data labeling Dataset.
    /// Format:
    /// `projects/{project}/datasets/{dataset}`.
    public var dataset: String = String()

    /// The Dataset's display name in datalabeling.googleapis.com.
    public var datasetDisplayName: String = String()

    /// The migratable AnnotatedDataset in datalabeling.googleapis.com belongs to
    /// the data labeling Dataset.
    public var dataLabelingAnnotatedDatasets: [Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset.DataLabelingAnnotatedDataset] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Represents one AnnotatedDataset in datalabeling.googleapis.com.
    public struct DataLabelingAnnotatedDataset: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Full resource name of data labeling AnnotatedDataset.
      /// Format:
      /// `projects/{project}/datasets/{dataset}/annotatedDatasets/{annotated_dataset}`.
      public var annotatedDataset: String = String()

      /// The AnnotatedDataset's display name in datalabeling.googleapis.com.
      public var annotatedDatasetDisplayName: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _lastMigrateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_MigratableResource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MigratableResource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ml_engine_model_version"),
    2: .standard(proto: "automl_model"),
    3: .standard(proto: "automl_dataset"),
    4: .standard(proto: "data_labeling_dataset"),
    5: .standard(proto: "last_migrate_time"),
    6: .standard(proto: "last_update_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion?
        var hadOneofValue = false
        if let current = self.resource {
          hadOneofValue = true
          if case .mlEngineModelVersion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resource = .mlEngineModelVersion(v)
        }
      }()
      case 2: try {
        var v: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel?
        var hadOneofValue = false
        if let current = self.resource {
          hadOneofValue = true
          if case .automlModel(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resource = .automlModel(v)
        }
      }()
      case 3: try {
        var v: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset?
        var hadOneofValue = false
        if let current = self.resource {
          hadOneofValue = true
          if case .automlDataset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resource = .automlDataset(v)
        }
      }()
      case 4: try {
        var v: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset?
        var hadOneofValue = false
        if let current = self.resource {
          hadOneofValue = true
          if case .dataLabelingDataset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resource = .dataLabelingDataset(v)
        }
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastMigrateTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.resource {
    case .mlEngineModelVersion?: try {
      guard case .mlEngineModelVersion(let v)? = self.resource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .automlModel?: try {
      guard case .automlModel(let v)? = self.resource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .automlDataset?: try {
      guard case .automlDataset(let v)? = self.resource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .dataLabelingDataset?: try {
      guard case .dataLabelingDataset(let v)? = self.resource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try { if let v = self._lastMigrateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lastUpdateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource, rhs: Google_Cloud_Aiplatform_V1_MigratableResource) -> Bool {
    if lhs.resource != rhs.resource {return false}
    if lhs._lastMigrateTime != rhs._lastMigrateTime {return false}
    if lhs._lastUpdateTime != rhs._lastUpdateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_MigratableResource.protoMessageName + ".MlEngineModelVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion, rhs: Google_Cloud_Aiplatform_V1_MigratableResource.MlEngineModelVersion) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_MigratableResource.protoMessageName + ".AutomlModel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    3: .standard(proto: "model_display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.modelDisplayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    if !self.modelDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.modelDisplayName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel, rhs: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlModel) -> Bool {
    if lhs.model != rhs.model {return false}
    if lhs.modelDisplayName != rhs.modelDisplayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_MigratableResource.protoMessageName + ".AutomlDataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    4: .standard(proto: "dataset_display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.datasetDisplayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if !self.datasetDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetDisplayName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset, rhs: Google_Cloud_Aiplatform_V1_MigratableResource.AutomlDataset) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.datasetDisplayName != rhs.datasetDisplayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_MigratableResource.protoMessageName + ".DataLabelingDataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dataset"),
    4: .standard(proto: "dataset_display_name"),
    3: .standard(proto: "data_labeling_annotated_datasets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dataset) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dataLabelingAnnotatedDatasets) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.datasetDisplayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataset.isEmpty {
      try visitor.visitSingularStringField(value: self.dataset, fieldNumber: 1)
    }
    if !self.dataLabelingAnnotatedDatasets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataLabelingAnnotatedDatasets, fieldNumber: 3)
    }
    if !self.datasetDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetDisplayName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset, rhs: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset) -> Bool {
    if lhs.dataset != rhs.dataset {return false}
    if lhs.datasetDisplayName != rhs.datasetDisplayName {return false}
    if lhs.dataLabelingAnnotatedDatasets != rhs.dataLabelingAnnotatedDatasets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset.DataLabelingAnnotatedDataset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset.protoMessageName + ".DataLabelingAnnotatedDataset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "annotated_dataset"),
    3: .standard(proto: "annotated_dataset_display_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.annotatedDataset) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.annotatedDatasetDisplayName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.annotatedDataset.isEmpty {
      try visitor.visitSingularStringField(value: self.annotatedDataset, fieldNumber: 1)
    }
    if !self.annotatedDatasetDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.annotatedDatasetDisplayName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset.DataLabelingAnnotatedDataset, rhs: Google_Cloud_Aiplatform_V1_MigratableResource.DataLabelingDataset.DataLabelingAnnotatedDataset) -> Bool {
    if lhs.annotatedDataset != rhs.annotatedDataset {return false}
    if lhs.annotatedDatasetDisplayName != rhs.annotatedDatasetDisplayName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
