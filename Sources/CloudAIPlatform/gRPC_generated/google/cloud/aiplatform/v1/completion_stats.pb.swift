// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/completion_stats.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Success and error statistics of processing multiple entities
/// (for example, DataItems or structured data rows) in batch.
public struct Google_Cloud_Aiplatform_V1_CompletionStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The number of entities that had been processed successfully.
  public var successfulCount: Int64 = 0

  /// Output only. The number of entities for which any error was encountered.
  public var failedCount: Int64 = 0

  /// Output only. In cases when enough errors are encountered a job, pipeline,
  /// or operation may be failed as a whole. Below is the number of entities for
  /// which the processing had not been finished (either in successful or failed
  /// state). Set to -1 if the number is unknown (for example, the operation
  /// failed before the total entity number could be collected).
  public var incompleteCount: Int64 = 0

  /// Output only. The number of the successful forecast points that are
  /// generated by the forecasting model. This is ONLY used by the forecasting
  /// batch prediction.
  public var successfulForecastPointCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_CompletionStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompletionStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "successful_count"),
    2: .standard(proto: "failed_count"),
    3: .standard(proto: "incomplete_count"),
    5: .standard(proto: "successful_forecast_point_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.successfulCount) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.failedCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.incompleteCount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.successfulForecastPointCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.successfulCount != 0 {
      try visitor.visitSingularInt64Field(value: self.successfulCount, fieldNumber: 1)
    }
    if self.failedCount != 0 {
      try visitor.visitSingularInt64Field(value: self.failedCount, fieldNumber: 2)
    }
    if self.incompleteCount != 0 {
      try visitor.visitSingularInt64Field(value: self.incompleteCount, fieldNumber: 3)
    }
    if self.successfulForecastPointCount != 0 {
      try visitor.visitSingularInt64Field(value: self.successfulForecastPointCount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_CompletionStats, rhs: Google_Cloud_Aiplatform_V1_CompletionStats) -> Bool {
    if lhs.successfulCount != rhs.successfulCount {return false}
    if lhs.failedCount != rhs.failedCount {return false}
    if lhs.incompleteCount != rhs.incompleteCount {return false}
    if lhs.successfulForecastPointCount != rhs.successfulForecastPointCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
