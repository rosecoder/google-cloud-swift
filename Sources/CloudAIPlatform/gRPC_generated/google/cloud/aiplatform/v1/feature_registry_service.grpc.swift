// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature_registry_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_FeatureRegistryService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_FeatureRegistryService
    public enum Method {
        public enum CreateFeatureGroup {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "CreateFeatureGroup"
            )
        }
        public enum GetFeatureGroup {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_FeatureGroup
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "GetFeatureGroup"
            )
        }
        public enum ListFeatureGroups {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "ListFeatureGroups"
            )
        }
        public enum UpdateFeatureGroup {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "UpdateFeatureGroup"
            )
        }
        public enum DeleteFeatureGroup {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "DeleteFeatureGroup"
            )
        }
        public enum CreateFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeatureRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "CreateFeature"
            )
        }
        public enum GetFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeatureRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Feature
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "GetFeature"
            )
        }
        public enum ListFeatures {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeaturesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeaturesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "ListFeatures"
            )
        }
        public enum UpdateFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeatureRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "UpdateFeature"
            )
        }
        public enum DeleteFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeatureRegistryService.descriptor.fullyQualifiedService,
                method: "DeleteFeature"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateFeatureGroup.descriptor,
            GetFeatureGroup.descriptor,
            ListFeatureGroups.descriptor,
            UpdateFeatureGroup.descriptor,
            DeleteFeatureGroup.descriptor,
            CreateFeature.descriptor,
            GetFeature.descriptor,
            ListFeatures.descriptor,
            UpdateFeature.descriptor,
            DeleteFeature.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_FeatureRegistryService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_FeatureRegistryService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_FeatureRegistryService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "FeatureRegistryService"
    )
}

/// The service that handles CRUD and List for resources for
/// FeatureRegistry.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_FeatureRegistryService_ClientProtocol: Sendable {
    /// Creates a new FeatureGroup in a given project and location.
    func createFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets details of a single FeatureGroup.
    func getFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists FeatureGroups in a given project and location.
    func listFeatureGroups<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates the parameters of a single FeatureGroup.
    func updateFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a single FeatureGroup.
    func deleteFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a new Feature in a given FeatureGroup.
    func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets details of a single Feature.
    func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Features in a given FeatureGroup.
    func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates the parameters of a single Feature.
    func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a single Feature.
    func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_FeatureRegistryService.ClientProtocol {
    public func createFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>(),
            options: options,
            body
        )
    }
    
    public func listFeatureGroups<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listFeatureGroups(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>(),
            options: options,
            body
        )
    }
    
    public func updateFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Feature>(),
            options: options,
            body
        )
    }
    
    public func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listFeatures(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>(),
            options: options,
            body
        )
    }
    
    public func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_FeatureRegistryService.ClientProtocol {
    /// Creates a new FeatureGroup in a given project and location.
    public func createFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeatureGroup(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets details of a single FeatureGroup.
    public func getFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeatureGroup(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists FeatureGroups in a given project and location.
    public func listFeatureGroups<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeatureGroups(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates the parameters of a single FeatureGroup.
    public func updateFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeatureGroup(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a single FeatureGroup.
    public func deleteFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeatureGroup(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a new Feature in a given FeatureGroup.
    public func createFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets details of a single Feature.
    public func getFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Features in a given FeatureGroup.
    public func listFeatures<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeaturesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeatures(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates the parameters of a single Feature.
    public func updateFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a single Feature.
    public func deleteFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// The service that handles CRUD and List for resources for
/// FeatureRegistry.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_FeatureRegistryService_Client: Google_Cloud_Aiplatform_V1_FeatureRegistryService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a new FeatureGroup in a given project and location.
    public func createFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.CreateFeatureGroup.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets details of a single FeatureGroup.
    public func getFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.GetFeatureGroup.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists FeatureGroups in a given project and location.
    public func listFeatureGroups<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.ListFeatureGroups.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates the parameters of a single FeatureGroup.
    public func updateFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.UpdateFeatureGroup.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a single FeatureGroup.
    public func deleteFeatureGroup<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.DeleteFeatureGroup.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a new Feature in a given FeatureGroup.
    public func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.CreateFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets details of a single Feature.
    public func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.GetFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Features in a given FeatureGroup.
    public func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.ListFeatures.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates the parameters of a single Feature.
    public func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.UpdateFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a single Feature.
    public func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.DeleteFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}