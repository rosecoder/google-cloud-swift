// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature_registry_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - google.cloud.aiplatform.v1.FeatureRegistryService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
public enum Google_Cloud_Aiplatform_V1_FeatureRegistryService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateFeatureGroup" metadata.
        public enum CreateFeatureGroup {
            /// Request type for "CreateFeatureGroup".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest
            /// Response type for "CreateFeatureGroup".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateFeatureGroup".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "CreateFeatureGroup"
            )
        }
        /// Namespace for "GetFeatureGroup" metadata.
        public enum GetFeatureGroup {
            /// Request type for "GetFeatureGroup".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest
            /// Response type for "GetFeatureGroup".
            public typealias Output = Google_Cloud_Aiplatform_V1_FeatureGroup
            /// Descriptor for "GetFeatureGroup".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "GetFeatureGroup"
            )
        }
        /// Namespace for "ListFeatureGroups" metadata.
        public enum ListFeatureGroups {
            /// Request type for "ListFeatureGroups".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest
            /// Response type for "ListFeatureGroups".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse
            /// Descriptor for "ListFeatureGroups".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "ListFeatureGroups"
            )
        }
        /// Namespace for "UpdateFeatureGroup" metadata.
        public enum UpdateFeatureGroup {
            /// Request type for "UpdateFeatureGroup".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest
            /// Response type for "UpdateFeatureGroup".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "UpdateFeatureGroup".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "UpdateFeatureGroup"
            )
        }
        /// Namespace for "DeleteFeatureGroup" metadata.
        public enum DeleteFeatureGroup {
            /// Request type for "DeleteFeatureGroup".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest
            /// Response type for "DeleteFeatureGroup".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteFeatureGroup".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "DeleteFeatureGroup"
            )
        }
        /// Namespace for "CreateFeature" metadata.
        public enum CreateFeature {
            /// Request type for "CreateFeature".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeatureRequest
            /// Response type for "CreateFeature".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateFeature".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "CreateFeature"
            )
        }
        /// Namespace for "GetFeature" metadata.
        public enum GetFeature {
            /// Request type for "GetFeature".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeatureRequest
            /// Response type for "GetFeature".
            public typealias Output = Google_Cloud_Aiplatform_V1_Feature
            /// Descriptor for "GetFeature".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "GetFeature"
            )
        }
        /// Namespace for "ListFeatures" metadata.
        public enum ListFeatures {
            /// Request type for "ListFeatures".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeaturesRequest
            /// Response type for "ListFeatures".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeaturesResponse
            /// Descriptor for "ListFeatures".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "ListFeatures"
            )
        }
        /// Namespace for "UpdateFeature" metadata.
        public enum UpdateFeature {
            /// Request type for "UpdateFeature".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeatureRequest
            /// Response type for "UpdateFeature".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "UpdateFeature".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "UpdateFeature"
            )
        }
        /// Namespace for "DeleteFeature" metadata.
        public enum DeleteFeature {
            /// Request type for "DeleteFeature".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureRequest
            /// Response type for "DeleteFeature".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteFeature".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService"),
                method: "DeleteFeature"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateFeatureGroup.descriptor,
            GetFeatureGroup.descriptor,
            ListFeatureGroups.descriptor,
            UpdateFeatureGroup.descriptor,
            DeleteFeatureGroup.descriptor,
            CreateFeature.descriptor,
            GetFeature.descriptor,
            ListFeatures.descriptor,
            UpdateFeature.descriptor,
            DeleteFeature.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
    public static let google_cloud_aiplatform_v1_FeatureRegistryService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureRegistryService")
}

// MARK: google.cloud.aiplatform.v1.FeatureRegistryService (client)

extension Google_Cloud_Aiplatform_V1_FeatureRegistryService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The service that handles CRUD and List for resources for
    /// > FeatureRegistry.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new FeatureGroup in a given project and location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets details of a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FeatureGroup` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListFeatureGroups" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists FeatureGroups in a given project and location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listFeatureGroups<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the parameters of a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new Feature in a given FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets details of a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Feature` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListFeatures" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Features in a given FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeaturesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListFeaturesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListFeaturesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listFeatures<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the parameters of a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.FeatureRegistryService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The service that handles CRUD and List for resources for
    /// > FeatureRegistry.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new FeatureGroup in a given project and location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.CreateFeatureGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets details of a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FeatureGroup` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.GetFeatureGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListFeatureGroups" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists FeatureGroups in a given project and location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listFeatureGroups<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.ListFeatureGroups.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the parameters of a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.UpdateFeatureGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteFeatureGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteFeatureGroup<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.DeleteFeatureGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new Feature in a given FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.CreateFeature.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets details of a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Feature` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.GetFeature.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListFeatures" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Features in a given FeatureGroup.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeaturesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListFeaturesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListFeaturesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listFeatures<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.ListFeatures.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the parameters of a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.UpdateFeature.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteFeature" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single Feature.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteFeatureRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteFeature<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureRegistryService.Method.DeleteFeature.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_FeatureRegistryService.ClientProtocol {
    /// Call the "CreateFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new FeatureGroup in a given project and location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFeatureGroup<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets details of a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFeatureGroup<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_FeatureGroup>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListFeatureGroups" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists FeatureGroups in a given project and location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listFeatureGroups<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listFeatureGroups(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the parameters of a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFeatureGroup<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFeatureGroup<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteFeatureGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new Feature in a given FeatureGroup.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateFeatureRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFeature<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets details of a single Feature.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetFeatureRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFeature<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Feature>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListFeatures" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Features in a given FeatureGroup.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListFeaturesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listFeatures<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listFeatures(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the parameters of a single Feature.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateFeatureRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFeature<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single Feature.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteFeatureRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFeature<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_FeatureRegistryService.ClientProtocol {
    /// Call the "CreateFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new FeatureGroup in a given project and location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeatureGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets details of a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FeatureGroup>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeatureGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListFeatureGroups" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists FeatureGroups in a given project and location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listFeatureGroups<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeatureGroupsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeatureGroupsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeatureGroups(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the parameters of a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeatureGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteFeatureGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single FeatureGroup.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFeatureGroup<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeatureGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new Feature in a given FeatureGroup.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeature(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets details of a single Feature.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeature(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListFeatures" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Features in a given FeatureGroup.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listFeatures<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeaturesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeatures(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the parameters of a single Feature.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeature(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteFeature" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single Feature.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeature(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}