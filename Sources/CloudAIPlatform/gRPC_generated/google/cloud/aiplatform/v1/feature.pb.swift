// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Feature Metadata information.
/// For example, color is a feature that describes an apple.
public struct Google_Cloud_Aiplatform_V1_Feature: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Immutable. Name of the Feature.
  /// Format:
  /// `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}`
  /// `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}`
  ///
  /// The last part feature is assigned by the client. The feature can be up to
  /// 64 characters long and can consist only of ASCII Latin letters A-Z and a-z,
  /// underscore(_), and ASCII digits 0-9 starting with a letter. The value will
  /// be unique given an entity type.
  public var name: String = String()

  /// Description of the Feature.
  public var description_p: String = String()

  /// Immutable. Only applicable for Vertex AI Feature Store (Legacy).
  /// Type of Feature value.
  public var valueType: Google_Cloud_Aiplatform_V1_Feature.ValueType = .unspecified

  /// Output only. Only applicable for Vertex AI Feature Store (Legacy).
  /// Timestamp when this EntityType was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Only applicable for Vertex AI Feature Store (Legacy).
  /// Timestamp when this EntityType was most recently updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Optional. The labels with user-defined metadata to organize your Features.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  /// No more than 64 user labels can be associated with one Feature (System
  /// labels are excluded)."
  /// System reserved label keys are prefixed with "aiplatform.googleapis.com/"
  /// and are immutable.
  public var labels: Dictionary<String,String> = [:]

  /// Used to perform a consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// Optional. Only applicable for Vertex AI Feature Store (Legacy).
  /// If not set, use the monitoring_config defined for the EntityType this
  /// Feature belongs to.
  /// Only Features with type
  /// ([Feature.ValueType][google.cloud.aiplatform.v1.Feature.ValueType]) BOOL,
  /// STRING, DOUBLE or INT64 can enable monitoring.
  ///
  /// If set to true, all types of data monitoring are disabled despite the
  /// config on EntityType.
  public var disableMonitoring: Bool = false

  /// Output only. Only applicable for Vertex AI Feature Store (Legacy).
  /// The list of historical stats and anomalies with specified objectives.
  public var monitoringStatsAnomalies: [Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly] = []

  /// Only applicable for Vertex AI Feature Store.
  /// The name of the BigQuery Table/View column hosting data for this version.
  /// If no value is provided, will use feature_id.
  public var versionColumnName: String = String()

  /// Entity responsible for maintaining this feature. Can be comma separated
  /// list of email addresses or URIs.
  public var pointOfContact: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Only applicable for Vertex AI Legacy Feature Store.
  /// An enum representing the value type of a feature.
  public enum ValueType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// The value type is unspecified.
    case unspecified // = 0

    /// Used for Feature that is a boolean.
    case bool // = 1

    /// Used for Feature that is a list of boolean.
    case boolArray // = 2

    /// Used for Feature that is double.
    case double // = 3

    /// Used for Feature that is a list of double.
    case doubleArray // = 4

    /// Used for Feature that is INT64.
    case int64 // = 9

    /// Used for Feature that is a list of INT64.
    case int64Array // = 10

    /// Used for Feature that is string.
    case string // = 11

    /// Used for Feature that is a list of String.
    case stringArray // = 12

    /// Used for Feature that is bytes.
    case bytes // = 13

    /// Used for Feature that is struct.
    case `struct` // = 14
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .bool
      case 2: self = .boolArray
      case 3: self = .double
      case 4: self = .doubleArray
      case 9: self = .int64
      case 10: self = .int64Array
      case 11: self = .string
      case 12: self = .stringArray
      case 13: self = .bytes
      case 14: self = .struct
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .bool: return 1
      case .boolArray: return 2
      case .double: return 3
      case .doubleArray: return 4
      case .int64: return 9
      case .int64Array: return 10
      case .string: return 11
      case .stringArray: return 12
      case .bytes: return 13
      case .struct: return 14
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_Feature.ValueType] = [
      .unspecified,
      .bool,
      .boolArray,
      .double,
      .doubleArray,
      .int64,
      .int64Array,
      .string,
      .stringArray,
      .bytes,
      .struct,
    ]

  }

  /// A list of historical
  /// [SnapshotAnalysis][google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis]
  /// or
  /// [ImportFeaturesAnalysis][google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis]
  /// stats requested by user, sorted by
  /// [FeatureStatsAnomaly.start_time][google.cloud.aiplatform.v1.FeatureStatsAnomaly.start_time]
  /// descending.
  public struct MonitoringStatsAnomaly: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The objective for each stats.
    public var objective: Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly.Objective = .unspecified

    /// Output only. The stats and anomalies generated at specific timestamp.
    public var featureStatsAnomaly: Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly {
      get {return _featureStatsAnomaly ?? Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly()}
      set {_featureStatsAnomaly = newValue}
    }
    /// Returns true if `featureStatsAnomaly` has been explicitly set.
    public var hasFeatureStatsAnomaly: Bool {return self._featureStatsAnomaly != nil}
    /// Clears the value of `featureStatsAnomaly`. Subsequent reads from it will return its default value.
    public mutating func clearFeatureStatsAnomaly() {self._featureStatsAnomaly = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// If the objective in the request is both
    /// Import Feature Analysis and Snapshot Analysis, this objective could be
    /// one of them. Otherwise, this objective should be the same as the
    /// objective in the request.
    public enum Objective: SwiftProtobuf.Enum, Swift.CaseIterable {
      public typealias RawValue = Int

      /// If it's OBJECTIVE_UNSPECIFIED, monitoring_stats will be empty.
      case unspecified // = 0

      /// Stats are generated by Import Feature Analysis.
      case importFeatureAnalysis // = 1

      /// Stats are generated by Snapshot Analysis.
      case snapshotAnalysis // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .importFeatureAnalysis
        case 2: self = .snapshotAnalysis
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .importFeatureAnalysis: return 1
        case .snapshotAnalysis: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      public static let allCases: [Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly.Objective] = [
        .unspecified,
        .importFeatureAnalysis,
        .snapshotAnalysis,
      ]

    }

    public init() {}

    fileprivate var _featureStatsAnomaly: Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly? = nil
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_Feature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Feature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "value_type"),
    4: .standard(proto: "create_time"),
    5: .standard(proto: "update_time"),
    6: .same(proto: "labels"),
    7: .same(proto: "etag"),
    12: .standard(proto: "disable_monitoring"),
    11: .standard(proto: "monitoring_stats_anomalies"),
    106: .standard(proto: "version_column_name"),
    107: .standard(proto: "point_of_contact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.valueType) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.monitoringStatsAnomalies) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.disableMonitoring) }()
      case 106: try { try decoder.decodeSingularStringField(value: &self.versionColumnName) }()
      case 107: try { try decoder.decodeSingularStringField(value: &self.pointOfContact) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.valueType != .unspecified {
      try visitor.visitSingularEnumField(value: self.valueType, fieldNumber: 3)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 6)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 7)
    }
    if !self.monitoringStatsAnomalies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.monitoringStatsAnomalies, fieldNumber: 11)
    }
    if self.disableMonitoring != false {
      try visitor.visitSingularBoolField(value: self.disableMonitoring, fieldNumber: 12)
    }
    if !self.versionColumnName.isEmpty {
      try visitor.visitSingularStringField(value: self.versionColumnName, fieldNumber: 106)
    }
    if !self.pointOfContact.isEmpty {
      try visitor.visitSingularStringField(value: self.pointOfContact, fieldNumber: 107)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Feature, rhs: Google_Cloud_Aiplatform_V1_Feature) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.valueType != rhs.valueType {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.disableMonitoring != rhs.disableMonitoring {return false}
    if lhs.monitoringStatsAnomalies != rhs.monitoringStatsAnomalies {return false}
    if lhs.versionColumnName != rhs.versionColumnName {return false}
    if lhs.pointOfContact != rhs.pointOfContact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Feature.ValueType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUE_TYPE_UNSPECIFIED"),
    1: .same(proto: "BOOL"),
    2: .same(proto: "BOOL_ARRAY"),
    3: .same(proto: "DOUBLE"),
    4: .same(proto: "DOUBLE_ARRAY"),
    9: .same(proto: "INT64"),
    10: .same(proto: "INT64_ARRAY"),
    11: .same(proto: "STRING"),
    12: .same(proto: "STRING_ARRAY"),
    13: .same(proto: "BYTES"),
    14: .same(proto: "STRUCT"),
  ]
}

extension Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_Feature.protoMessageName + ".MonitoringStatsAnomaly"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "objective"),
    2: .standard(proto: "feature_stats_anomaly"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.objective) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._featureStatsAnomaly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.objective != .unspecified {
      try visitor.visitSingularEnumField(value: self.objective, fieldNumber: 1)
    }
    try { if let v = self._featureStatsAnomaly {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly, rhs: Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly) -> Bool {
    if lhs.objective != rhs.objective {return false}
    if lhs._featureStatsAnomaly != rhs._featureStatsAnomaly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Feature.MonitoringStatsAnomaly.Objective: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OBJECTIVE_UNSPECIFIED"),
    1: .same(proto: "IMPORT_FEATURE_ANALYSIS"),
    2: .same(proto: "SNAPSHOT_ANALYSIS"),
  ]
}
