// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/notebook_runtime.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a notebook runtime type.
public enum Google_Cloud_Aiplatform_V1_NotebookRuntimeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// Unspecified notebook runtime type, NotebookRuntimeType will default to
  /// USER_DEFINED.
  case unspecified // = 0

  /// runtime or template with coustomized configurations from user.
  case userDefined // = 1

  /// runtime or template with system defined configurations.
  case oneClick // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .userDefined
    case 2: self = .oneClick
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .userDefined: return 1
    case .oneClick: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Google_Cloud_Aiplatform_V1_NotebookRuntimeType] = [
    .unspecified,
    .userDefined,
    .oneClick,
  ]

}

/// A template that specifies runtime configurations such as machine type,
/// runtime version, network configurations, etc.
/// Multiple runtimes can be created from a runtime template.
public struct Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name of the NotebookRuntimeTemplate.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The display name of the NotebookRuntimeTemplate.
  /// The name can be up to 128 characters long and can consist of any UTF-8
  /// characters.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// The description of the NotebookRuntimeTemplate.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Output only. The default template to use if not specified.
  public var isDefault: Bool {
    get {return _storage._isDefault}
    set {_uniqueStorage()._isDefault = newValue}
  }

  /// Optional. Immutable. The specification of a single machine for the
  /// template.
  public var machineSpec: Google_Cloud_Aiplatform_V1_MachineSpec {
    get {return _storage._machineSpec ?? Google_Cloud_Aiplatform_V1_MachineSpec()}
    set {_uniqueStorage()._machineSpec = newValue}
  }
  /// Returns true if `machineSpec` has been explicitly set.
  public var hasMachineSpec: Bool {return _storage._machineSpec != nil}
  /// Clears the value of `machineSpec`. Subsequent reads from it will return its default value.
  public mutating func clearMachineSpec() {_uniqueStorage()._machineSpec = nil}

  /// Optional. The specification of [persistent
  /// disk][https://cloud.google.com/compute/docs/disks/persistent-disks]
  /// attached to the runtime as data disk storage.
  public var dataPersistentDiskSpec: Google_Cloud_Aiplatform_V1_PersistentDiskSpec {
    get {return _storage._dataPersistentDiskSpec ?? Google_Cloud_Aiplatform_V1_PersistentDiskSpec()}
    set {_uniqueStorage()._dataPersistentDiskSpec = newValue}
  }
  /// Returns true if `dataPersistentDiskSpec` has been explicitly set.
  public var hasDataPersistentDiskSpec: Bool {return _storage._dataPersistentDiskSpec != nil}
  /// Clears the value of `dataPersistentDiskSpec`. Subsequent reads from it will return its default value.
  public mutating func clearDataPersistentDiskSpec() {_uniqueStorage()._dataPersistentDiskSpec = nil}

  /// Optional. Network spec.
  public var networkSpec: Google_Cloud_Aiplatform_V1_NetworkSpec {
    get {return _storage._networkSpec ?? Google_Cloud_Aiplatform_V1_NetworkSpec()}
    set {_uniqueStorage()._networkSpec = newValue}
  }
  /// Returns true if `networkSpec` has been explicitly set.
  public var hasNetworkSpec: Bool {return _storage._networkSpec != nil}
  /// Clears the value of `networkSpec`. Subsequent reads from it will return its default value.
  public mutating func clearNetworkSpec() {_uniqueStorage()._networkSpec = nil}

  /// The service account that the runtime workload runs as.
  /// You can use any service account within the same project, but you
  /// must have the service account user permission to use the instance.
  ///
  /// If not specified, the [Compute Engine default service
  /// account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
  /// is used.
  public var serviceAccount: String {
    get {return _storage._serviceAccount}
    set {_uniqueStorage()._serviceAccount = newValue}
  }

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String {
    get {return _storage._etag}
    set {_uniqueStorage()._etag = newValue}
  }

  /// The labels with user-defined metadata to organize the
  /// NotebookRuntimeTemplates.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information and examples of labels.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// The idle shutdown configuration of NotebookRuntimeTemplate. This config
  /// will only be set when idle shutdown is enabled.
  public var idleShutdownConfig: Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig {
    get {return _storage._idleShutdownConfig ?? Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig()}
    set {_uniqueStorage()._idleShutdownConfig = newValue}
  }
  /// Returns true if `idleShutdownConfig` has been explicitly set.
  public var hasIdleShutdownConfig: Bool {return _storage._idleShutdownConfig != nil}
  /// Clears the value of `idleShutdownConfig`. Subsequent reads from it will return its default value.
  public mutating func clearIdleShutdownConfig() {_uniqueStorage()._idleShutdownConfig = nil}

  /// EUC configuration of the NotebookRuntimeTemplate.
  public var eucConfig: Google_Cloud_Aiplatform_V1_NotebookEucConfig {
    get {return _storage._eucConfig ?? Google_Cloud_Aiplatform_V1_NotebookEucConfig()}
    set {_uniqueStorage()._eucConfig = newValue}
  }
  /// Returns true if `eucConfig` has been explicitly set.
  public var hasEucConfig: Bool {return _storage._eucConfig != nil}
  /// Clears the value of `eucConfig`. Subsequent reads from it will return its default value.
  public mutating func clearEucConfig() {_uniqueStorage()._eucConfig = nil}

  /// Output only. Timestamp when this NotebookRuntimeTemplate was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Timestamp when this NotebookRuntimeTemplate was most recently
  /// updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Optional. Immutable. The type of the notebook runtime template.
  public var notebookRuntimeType: Google_Cloud_Aiplatform_V1_NotebookRuntimeType {
    get {return _storage._notebookRuntimeType}
    set {_uniqueStorage()._notebookRuntimeType = newValue}
  }

  /// Optional. Immutable. Runtime Shielded VM spec.
  public var shieldedVmConfig: Google_Cloud_Aiplatform_V1_ShieldedVmConfig {
    get {return _storage._shieldedVmConfig ?? Google_Cloud_Aiplatform_V1_ShieldedVmConfig()}
    set {_uniqueStorage()._shieldedVmConfig = newValue}
  }
  /// Returns true if `shieldedVmConfig` has been explicitly set.
  public var hasShieldedVmConfig: Bool {return _storage._shieldedVmConfig != nil}
  /// Clears the value of `shieldedVmConfig`. Subsequent reads from it will return its default value.
  public mutating func clearShieldedVmConfig() {_uniqueStorage()._shieldedVmConfig = nil}

  /// Optional. The Compute Engine tags to add to runtime (see [Tagging
  /// instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).
  public var networkTags: [String] {
    get {return _storage._networkTags}
    set {_uniqueStorage()._networkTags = newValue}
  }

  /// Customer-managed encryption key spec for the notebook runtime.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _storage._encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_uniqueStorage()._encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return _storage._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {_uniqueStorage()._encryptionSpec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A runtime is a virtual machine allocated to a particular user for a
/// particular Notebook file on temporary basis with lifetime limited to 24
/// hours.
public struct Google_Cloud_Aiplatform_V1_NotebookRuntime: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the NotebookRuntime.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The user email of the NotebookRuntime.
  public var runtimeUser: String {
    get {return _storage._runtimeUser}
    set {_uniqueStorage()._runtimeUser = newValue}
  }

  /// Output only. The pointer to NotebookRuntimeTemplate this NotebookRuntime is
  /// created from.
  public var notebookRuntimeTemplateRef: Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplateRef {
    get {return _storage._notebookRuntimeTemplateRef ?? Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplateRef()}
    set {_uniqueStorage()._notebookRuntimeTemplateRef = newValue}
  }
  /// Returns true if `notebookRuntimeTemplateRef` has been explicitly set.
  public var hasNotebookRuntimeTemplateRef: Bool {return _storage._notebookRuntimeTemplateRef != nil}
  /// Clears the value of `notebookRuntimeTemplateRef`. Subsequent reads from it will return its default value.
  public mutating func clearNotebookRuntimeTemplateRef() {_uniqueStorage()._notebookRuntimeTemplateRef = nil}

  /// Output only. The proxy endpoint used to access the NotebookRuntime.
  public var proxyUri: String {
    get {return _storage._proxyUri}
    set {_uniqueStorage()._proxyUri = newValue}
  }

  /// Output only. Timestamp when this NotebookRuntime was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Timestamp when this NotebookRuntime was most recently updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Output only. The health state of the NotebookRuntime.
  public var healthState: Google_Cloud_Aiplatform_V1_NotebookRuntime.HealthState {
    get {return _storage._healthState}
    set {_uniqueStorage()._healthState = newValue}
  }

  /// Required. The display name of the NotebookRuntime.
  /// The name can be up to 128 characters long and can consist of any UTF-8
  /// characters.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// The description of the NotebookRuntime.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Output only. The service account that the NotebookRuntime workload runs as.
  public var serviceAccount: String {
    get {return _storage._serviceAccount}
    set {_uniqueStorage()._serviceAccount = newValue}
  }

  /// Output only. The runtime (instance) state of the NotebookRuntime.
  public var runtimeState: Google_Cloud_Aiplatform_V1_NotebookRuntime.RuntimeState {
    get {return _storage._runtimeState}
    set {_uniqueStorage()._runtimeState = newValue}
  }

  /// Output only. Whether NotebookRuntime is upgradable.
  public var isUpgradable: Bool {
    get {return _storage._isUpgradable}
    set {_uniqueStorage()._isUpgradable = newValue}
  }

  /// The labels with user-defined metadata to organize your
  /// NotebookRuntime.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  /// No more than 64 user labels can be associated with one NotebookRuntime
  /// (System labels are excluded).
  ///
  /// See https://goo.gl/xmQnxf for more information and examples of labels.
  /// System reserved label keys are prefixed with "aiplatform.googleapis.com/"
  /// and are immutable. Following system labels exist for NotebookRuntime:
  ///
  /// * "aiplatform.googleapis.com/notebook_runtime_gce_instance_id": output
  /// only, its value is the Compute Engine instance id.
  /// * "aiplatform.googleapis.com/colab_enterprise_entry_service": its value is
  /// either "bigquery" or "vertex"; if absent, it should be "vertex". This is to
  /// describe the entry service, either BigQuery or Vertex.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Output only. Timestamp when this NotebookRuntime will be expired:
  /// 1. System Predefined NotebookRuntime: 24 hours after creation. After
  /// expiration, system predifined runtime will be deleted.
  /// 2. User created NotebookRuntime: 6 months after last upgrade. After
  /// expiration, user created runtime will be stopped and allowed for upgrade.
  public var expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._expirationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  /// Output only. The VM os image version of NotebookRuntime.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Output only. The type of the notebook runtime.
  public var notebookRuntimeType: Google_Cloud_Aiplatform_V1_NotebookRuntimeType {
    get {return _storage._notebookRuntimeType}
    set {_uniqueStorage()._notebookRuntimeType = newValue}
  }

  /// Output only. The idle shutdown configuration of the notebook runtime.
  public var idleShutdownConfig: Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig {
    get {return _storage._idleShutdownConfig ?? Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig()}
    set {_uniqueStorage()._idleShutdownConfig = newValue}
  }
  /// Returns true if `idleShutdownConfig` has been explicitly set.
  public var hasIdleShutdownConfig: Bool {return _storage._idleShutdownConfig != nil}
  /// Clears the value of `idleShutdownConfig`. Subsequent reads from it will return its default value.
  public mutating func clearIdleShutdownConfig() {_uniqueStorage()._idleShutdownConfig = nil}

  /// Optional. The Compute Engine tags to add to runtime (see [Tagging
  /// instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).
  public var networkTags: [String] {
    get {return _storage._networkTags}
    set {_uniqueStorage()._networkTags = newValue}
  }

  /// Output only. Customer-managed encryption key spec for the notebook runtime.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _storage._encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_uniqueStorage()._encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return _storage._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {_uniqueStorage()._encryptionSpec = nil}

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool {
    get {return _storage._satisfiesPzs}
    set {_uniqueStorage()._satisfiesPzs = newValue}
  }

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool {
    get {return _storage._satisfiesPzi}
    set {_uniqueStorage()._satisfiesPzi = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The substate of the NotebookRuntime to display health information.
  public enum HealthState: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Unspecified health state.
    case unspecified // = 0

    /// NotebookRuntime is in healthy state. Applies to ACTIVE state.
    case healthy // = 1

    /// NotebookRuntime is in unhealthy state. Applies to ACTIVE state.
    case unhealthy // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .healthy
      case 2: self = .unhealthy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .healthy: return 1
      case .unhealthy: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_NotebookRuntime.HealthState] = [
      .unspecified,
      .healthy,
      .unhealthy,
    ]

  }

  /// The substate of the NotebookRuntime to display state of runtime.
  /// The resource of NotebookRuntime is in ACTIVE state for these sub state.
  public enum RuntimeState: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Unspecified runtime state.
    case unspecified // = 0

    /// NotebookRuntime is in running state.
    case running // = 1

    /// NotebookRuntime is in starting state.
    case beingStarted // = 2

    /// NotebookRuntime is in stopping state.
    case beingStopped // = 3

    /// NotebookRuntime is in stopped state.
    case stopped // = 4

    /// NotebookRuntime is in upgrading state. It is in the middle of upgrading
    /// process.
    case beingUpgraded // = 5

    /// NotebookRuntime was unable to start/stop properly.
    case error // = 100

    /// NotebookRuntime is in invalid state. Cannot be recovered.
    case invalid // = 101
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .running
      case 2: self = .beingStarted
      case 3: self = .beingStopped
      case 4: self = .stopped
      case 5: self = .beingUpgraded
      case 100: self = .error
      case 101: self = .invalid
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .running: return 1
      case .beingStarted: return 2
      case .beingStopped: return 3
      case .stopped: return 4
      case .beingUpgraded: return 5
      case .error: return 100
      case .invalid: return 101
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_NotebookRuntime.RuntimeState] = [
      .unspecified,
      .running,
      .beingStarted,
      .beingStopped,
      .stopped,
      .beingUpgraded,
      .error,
      .invalid,
    ]

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_NotebookRuntimeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED"),
    1: .same(proto: "USER_DEFINED"),
    2: .same(proto: "ONE_CLICK"),
  ]
}

extension Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotebookRuntimeTemplate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    4: .standard(proto: "is_default"),
    5: .standard(proto: "machine_spec"),
    8: .standard(proto: "data_persistent_disk_spec"),
    12: .standard(proto: "network_spec"),
    13: .standard(proto: "service_account"),
    14: .same(proto: "etag"),
    15: .same(proto: "labels"),
    17: .standard(proto: "idle_shutdown_config"),
    18: .standard(proto: "euc_config"),
    10: .standard(proto: "create_time"),
    11: .standard(proto: "update_time"),
    19: .standard(proto: "notebook_runtime_type"),
    20: .standard(proto: "shielded_vm_config"),
    21: .standard(proto: "network_tags"),
    23: .standard(proto: "encryption_spec"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _description_p: String = String()
    var _isDefault: Bool = false
    var _machineSpec: Google_Cloud_Aiplatform_V1_MachineSpec? = nil
    var _dataPersistentDiskSpec: Google_Cloud_Aiplatform_V1_PersistentDiskSpec? = nil
    var _networkSpec: Google_Cloud_Aiplatform_V1_NetworkSpec? = nil
    var _serviceAccount: String = String()
    var _etag: String = String()
    var _labels: Dictionary<String,String> = [:]
    var _idleShutdownConfig: Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig? = nil
    var _eucConfig: Google_Cloud_Aiplatform_V1_NotebookEucConfig? = nil
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _notebookRuntimeType: Google_Cloud_Aiplatform_V1_NotebookRuntimeType = .unspecified
    var _shieldedVmConfig: Google_Cloud_Aiplatform_V1_ShieldedVmConfig? = nil
    var _networkTags: [String] = []
    var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _description_p = source._description_p
      _isDefault = source._isDefault
      _machineSpec = source._machineSpec
      _dataPersistentDiskSpec = source._dataPersistentDiskSpec
      _networkSpec = source._networkSpec
      _serviceAccount = source._serviceAccount
      _etag = source._etag
      _labels = source._labels
      _idleShutdownConfig = source._idleShutdownConfig
      _eucConfig = source._eucConfig
      _createTime = source._createTime
      _updateTime = source._updateTime
      _notebookRuntimeType = source._notebookRuntimeType
      _shieldedVmConfig = source._shieldedVmConfig
      _networkTags = source._networkTags
      _encryptionSpec = source._encryptionSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isDefault) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._machineSpec) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._dataPersistentDiskSpec) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._networkSpec) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._serviceAccount) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._etag) }()
        case 15: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._idleShutdownConfig) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._eucConfig) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._notebookRuntimeType) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._shieldedVmConfig) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._networkTags) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._encryptionSpec) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._isDefault != false {
        try visitor.visitSingularBoolField(value: _storage._isDefault, fieldNumber: 4)
      }
      try { if let v = _storage._machineSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._dataPersistentDiskSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._networkSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._serviceAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceAccount, fieldNumber: 13)
      }
      if !_storage._etag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._etag, fieldNumber: 14)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 15)
      }
      try { if let v = _storage._idleShutdownConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._eucConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      if _storage._notebookRuntimeType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._notebookRuntimeType, fieldNumber: 19)
      }
      try { if let v = _storage._shieldedVmConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if !_storage._networkTags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._networkTags, fieldNumber: 21)
      }
      try { if let v = _storage._encryptionSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate, rhs: Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._isDefault != rhs_storage._isDefault {return false}
        if _storage._machineSpec != rhs_storage._machineSpec {return false}
        if _storage._dataPersistentDiskSpec != rhs_storage._dataPersistentDiskSpec {return false}
        if _storage._networkSpec != rhs_storage._networkSpec {return false}
        if _storage._serviceAccount != rhs_storage._serviceAccount {return false}
        if _storage._etag != rhs_storage._etag {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._idleShutdownConfig != rhs_storage._idleShutdownConfig {return false}
        if _storage._eucConfig != rhs_storage._eucConfig {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._notebookRuntimeType != rhs_storage._notebookRuntimeType {return false}
        if _storage._shieldedVmConfig != rhs_storage._shieldedVmConfig {return false}
        if _storage._networkTags != rhs_storage._networkTags {return false}
        if _storage._encryptionSpec != rhs_storage._encryptionSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_NotebookRuntime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotebookRuntime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "runtime_user"),
    3: .standard(proto: "notebook_runtime_template_ref"),
    5: .standard(proto: "proxy_uri"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "update_time"),
    8: .standard(proto: "health_state"),
    10: .standard(proto: "display_name"),
    11: .same(proto: "description"),
    13: .standard(proto: "service_account"),
    14: .standard(proto: "runtime_state"),
    15: .standard(proto: "is_upgradable"),
    16: .same(proto: "labels"),
    17: .standard(proto: "expiration_time"),
    18: .same(proto: "version"),
    19: .standard(proto: "notebook_runtime_type"),
    23: .standard(proto: "idle_shutdown_config"),
    25: .standard(proto: "network_tags"),
    28: .standard(proto: "encryption_spec"),
    29: .standard(proto: "satisfies_pzs"),
    30: .standard(proto: "satisfies_pzi"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _runtimeUser: String = String()
    var _notebookRuntimeTemplateRef: Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplateRef? = nil
    var _proxyUri: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _healthState: Google_Cloud_Aiplatform_V1_NotebookRuntime.HealthState = .unspecified
    var _displayName: String = String()
    var _description_p: String = String()
    var _serviceAccount: String = String()
    var _runtimeState: Google_Cloud_Aiplatform_V1_NotebookRuntime.RuntimeState = .unspecified
    var _isUpgradable: Bool = false
    var _labels: Dictionary<String,String> = [:]
    var _expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _version: String = String()
    var _notebookRuntimeType: Google_Cloud_Aiplatform_V1_NotebookRuntimeType = .unspecified
    var _idleShutdownConfig: Google_Cloud_Aiplatform_V1_NotebookIdleShutdownConfig? = nil
    var _networkTags: [String] = []
    var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil
    var _satisfiesPzs: Bool = false
    var _satisfiesPzi: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _runtimeUser = source._runtimeUser
      _notebookRuntimeTemplateRef = source._notebookRuntimeTemplateRef
      _proxyUri = source._proxyUri
      _createTime = source._createTime
      _updateTime = source._updateTime
      _healthState = source._healthState
      _displayName = source._displayName
      _description_p = source._description_p
      _serviceAccount = source._serviceAccount
      _runtimeState = source._runtimeState
      _isUpgradable = source._isUpgradable
      _labels = source._labels
      _expirationTime = source._expirationTime
      _version = source._version
      _notebookRuntimeType = source._notebookRuntimeType
      _idleShutdownConfig = source._idleShutdownConfig
      _networkTags = source._networkTags
      _encryptionSpec = source._encryptionSpec
      _satisfiesPzs = source._satisfiesPzs
      _satisfiesPzi = source._satisfiesPzi
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._runtimeUser) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._notebookRuntimeTemplateRef) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._proxyUri) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._healthState) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._serviceAccount) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._runtimeState) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._isUpgradable) }()
        case 16: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._expirationTime) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._version) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._notebookRuntimeType) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._idleShutdownConfig) }()
        case 25: try { try decoder.decodeRepeatedStringField(value: &_storage._networkTags) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._encryptionSpec) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzs) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzi) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._runtimeUser.isEmpty {
        try visitor.visitSingularStringField(value: _storage._runtimeUser, fieldNumber: 2)
      }
      try { if let v = _storage._notebookRuntimeTemplateRef {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._proxyUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proxyUri, fieldNumber: 5)
      }
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._healthState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._healthState, fieldNumber: 8)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 10)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 11)
      }
      if !_storage._serviceAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceAccount, fieldNumber: 13)
      }
      if _storage._runtimeState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._runtimeState, fieldNumber: 14)
      }
      if _storage._isUpgradable != false {
        try visitor.visitSingularBoolField(value: _storage._isUpgradable, fieldNumber: 15)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 16)
      }
      try { if let v = _storage._expirationTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 18)
      }
      if _storage._notebookRuntimeType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._notebookRuntimeType, fieldNumber: 19)
      }
      try { if let v = _storage._idleShutdownConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      if !_storage._networkTags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._networkTags, fieldNumber: 25)
      }
      try { if let v = _storage._encryptionSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if _storage._satisfiesPzs != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzs, fieldNumber: 29)
      }
      if _storage._satisfiesPzi != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzi, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_NotebookRuntime, rhs: Google_Cloud_Aiplatform_V1_NotebookRuntime) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._runtimeUser != rhs_storage._runtimeUser {return false}
        if _storage._notebookRuntimeTemplateRef != rhs_storage._notebookRuntimeTemplateRef {return false}
        if _storage._proxyUri != rhs_storage._proxyUri {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._healthState != rhs_storage._healthState {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._serviceAccount != rhs_storage._serviceAccount {return false}
        if _storage._runtimeState != rhs_storage._runtimeState {return false}
        if _storage._isUpgradable != rhs_storage._isUpgradable {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._notebookRuntimeType != rhs_storage._notebookRuntimeType {return false}
        if _storage._idleShutdownConfig != rhs_storage._idleShutdownConfig {return false}
        if _storage._networkTags != rhs_storage._networkTags {return false}
        if _storage._encryptionSpec != rhs_storage._encryptionSpec {return false}
        if _storage._satisfiesPzs != rhs_storage._satisfiesPzs {return false}
        if _storage._satisfiesPzi != rhs_storage._satisfiesPzi {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_NotebookRuntime.HealthState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEALTH_STATE_UNSPECIFIED"),
    1: .same(proto: "HEALTHY"),
    2: .same(proto: "UNHEALTHY"),
  ]
}

extension Google_Cloud_Aiplatform_V1_NotebookRuntime.RuntimeState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RUNTIME_STATE_UNSPECIFIED"),
    1: .same(proto: "RUNNING"),
    2: .same(proto: "BEING_STARTED"),
    3: .same(proto: "BEING_STOPPED"),
    4: .same(proto: "STOPPED"),
    5: .same(proto: "BEING_UPGRADED"),
    100: .same(proto: "ERROR"),
    101: .same(proto: "INVALID"),
  ]
}
