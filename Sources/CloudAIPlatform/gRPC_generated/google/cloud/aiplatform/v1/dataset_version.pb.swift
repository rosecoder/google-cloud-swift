// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/dataset_version.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Describes the dataset version.
public struct Google_Cloud_Aiplatform_V1_DatasetVersion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Identifier. The resource name of the DatasetVersion.
  public var name: String = String()

  /// Output only. Timestamp when this DatasetVersion was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this DatasetVersion was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Used to perform consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// Output only. Name of the associated BigQuery dataset.
  public var bigQueryDatasetName: String = String()

  /// The user-defined name of the DatasetVersion.
  /// The name can be up to 128 characters long and can consist of any UTF-8
  /// characters.
  public var displayName: String = String()

  /// Required. Output only. Additional information about the DatasetVersion.
  public var metadata: SwiftProtobuf.Google_Protobuf_Value {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// Output only. Reference to the public base model last used by the dataset
  /// version. Only set for prompt dataset versions.
  public var modelReference: String = String()

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool = false

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_DatasetVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatasetVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "create_time"),
    6: .standard(proto: "update_time"),
    3: .same(proto: "etag"),
    4: .standard(proto: "big_query_dataset_name"),
    7: .standard(proto: "display_name"),
    8: .same(proto: "metadata"),
    9: .standard(proto: "model_reference"),
    10: .standard(proto: "satisfies_pzs"),
    11: .standard(proto: "satisfies_pzi"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.bigQueryDatasetName) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.modelReference) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.satisfiesPzs) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.satisfiesPzi) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 3)
    }
    if !self.bigQueryDatasetName.isEmpty {
      try visitor.visitSingularStringField(value: self.bigQueryDatasetName, fieldNumber: 4)
    }
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 7)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if !self.modelReference.isEmpty {
      try visitor.visitSingularStringField(value: self.modelReference, fieldNumber: 9)
    }
    if self.satisfiesPzs != false {
      try visitor.visitSingularBoolField(value: self.satisfiesPzs, fieldNumber: 10)
    }
    if self.satisfiesPzi != false {
      try visitor.visitSingularBoolField(value: self.satisfiesPzi, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DatasetVersion, rhs: Google_Cloud_Aiplatform_V1_DatasetVersion) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.bigQueryDatasetName != rhs.bigQueryDatasetName {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.modelReference != rhs.modelReference {return false}
    if lhs.satisfiesPzs != rhs.satisfiesPzs {return false}
    if lhs.satisfiesPzi != rhs.satisfiesPzi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
