// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/vizier_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

public enum Google_Cloud_Aiplatform_V1_VizierService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_VizierService
    public enum Method {
        public enum CreateStudy {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateStudyRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "CreateStudy"
            )
        }
        public enum GetStudy {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetStudyRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "GetStudy"
            )
        }
        public enum ListStudies {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListStudiesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListStudiesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "ListStudies"
            )
        }
        public enum DeleteStudy {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteStudyRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "DeleteStudy"
            )
        }
        public enum LookupStudy {
            public typealias Input = Google_Cloud_Aiplatform_V1_LookupStudyRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "LookupStudy"
            )
        }
        public enum SuggestTrials {
            public typealias Input = Google_Cloud_Aiplatform_V1_SuggestTrialsRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "SuggestTrials"
            )
        }
        public enum CreateTrial {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTrialRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "CreateTrial"
            )
        }
        public enum GetTrial {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTrialRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "GetTrial"
            )
        }
        public enum ListTrials {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTrialsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTrialsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "ListTrials"
            )
        }
        public enum AddTrialMeasurement {
            public typealias Input = Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "AddTrialMeasurement"
            )
        }
        public enum CompleteTrial {
            public typealias Input = Google_Cloud_Aiplatform_V1_CompleteTrialRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "CompleteTrial"
            )
        }
        public enum DeleteTrial {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTrialRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "DeleteTrial"
            )
        }
        public enum CheckTrialEarlyStoppingState {
            public typealias Input = Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "CheckTrialEarlyStoppingState"
            )
        }
        public enum StopTrial {
            public typealias Input = Google_Cloud_Aiplatform_V1_StopTrialRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "StopTrial"
            )
        }
        public enum ListOptimalTrials {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_VizierService.descriptor.fullyQualifiedService,
                method: "ListOptimalTrials"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateStudy.descriptor,
            GetStudy.descriptor,
            ListStudies.descriptor,
            DeleteStudy.descriptor,
            LookupStudy.descriptor,
            SuggestTrials.descriptor,
            CreateTrial.descriptor,
            GetTrial.descriptor,
            ListTrials.descriptor,
            AddTrialMeasurement.descriptor,
            CompleteTrial.descriptor,
            DeleteTrial.descriptor,
            CheckTrialEarlyStoppingState.descriptor,
            StopTrial.descriptor,
            ListOptimalTrials.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_VizierService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_VizierService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_VizierService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "VizierService"
    )
}

/// Vertex AI Vizier API.
///
/// Vertex AI Vizier is a service to solve blackbox optimization problems,
/// such as tuning machine learning hyperparameters and searching over deep
/// learning architectures.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_VizierService_ClientProtocol: Sendable {
    /// Creates a Study. A resource name will be generated after creation of the
    /// Study.
    func createStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a Study by name.
    func getStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists all the studies in a region for an associated project.
    func listStudies<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Study.
    func deleteStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Looks a study up using the user-defined display_name field instead of the
    /// fully qualified resource name.
    func lookupStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Adds one or more Trials to a Study, with parameter values
    /// suggested by Vertex AI Vizier. Returns a long-running
    /// operation associated with the generation of Trial suggestions.
    /// When this long-running operation succeeds, it will contain
    /// a
    /// [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    func suggestTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Adds a user provided Trial to a Study.
    func createTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a Trial.
    func getTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists the Trials associated with a Study.
    func listTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Adds a measurement of the objective metrics to a Trial. This measurement
    /// is assumed to have been taken before the Trial is complete.
    func addTrialMeasurement<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Marks a Trial as complete.
    func completeTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Trial.
    func deleteTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Checks  whether a Trial should stop or not. Returns a
    /// long-running operation. When the operation is successful,
    /// it will contain a
    /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    func checkTrialEarlyStoppingState<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Stops a Trial.
    func stopTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists the pareto-optimal Trials for multi-objective Study or the
    /// optimal Trials for single-objective Study. The definition of
    /// pareto-optimal can be checked in wiki page.
    /// https://en.wikipedia.org/wiki/Pareto_efficiency
    func listOptimalTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_VizierService.ClientProtocol {
    public func createStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            body
        )
    }
    
    public func getStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            body
        )
    }
    
    public func listStudies<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listStudies(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func lookupStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.lookupStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            body
        )
    }
    
    public func suggestTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.suggestTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func createTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            body
        )
    }
    
    public func getTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            body
        )
    }
    
    public func listTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>(),
            options: options,
            body
        )
    }
    
    public func addTrialMeasurement<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.addTrialMeasurement(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            body
        )
    }
    
    public func completeTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.completeTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            body
        )
    }
    
    public func deleteTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func checkTrialEarlyStoppingState<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.checkTrialEarlyStoppingState(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func stopTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.stopTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            body
        )
    }
    
    public func listOptimalTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listOptimalTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_VizierService.ClientProtocol {
    /// Creates a Study. A resource name will be generated after creation of the
    /// Study.
    public func createStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createStudy(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a Study by name.
    public func getStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getStudy(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists all the studies in a region for an associated project.
    public func listStudies<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListStudiesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listStudies(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Study.
    public func deleteStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteStudy(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Looks a study up using the user-defined display_name field instead of the
    /// fully qualified resource name.
    public func lookupStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_LookupStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.lookupStudy(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Adds one or more Trials to a Study, with parameter values
    /// suggested by Vertex AI Vizier. Returns a long-running
    /// operation associated with the generation of Trial suggestions.
    /// When this long-running operation succeeds, it will contain
    /// a
    /// [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    public func suggestTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_SuggestTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.suggestTrials(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Adds a user provided Trial to a Study.
    public func createTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTrial(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a Trial.
    public func getTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTrial(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists the Trials associated with a Study.
    public func listTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTrials(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Adds a measurement of the objective metrics to a Trial. This measurement
    /// is assumed to have been taken before the Trial is complete.
    public func addTrialMeasurement<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addTrialMeasurement(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Marks a Trial as complete.
    public func completeTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CompleteTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.completeTrial(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Trial.
    public func deleteTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTrial(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Checks  whether a Trial should stop or not. Returns a
    /// long-running operation. When the operation is successful,
    /// it will contain a
    /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    public func checkTrialEarlyStoppingState<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.checkTrialEarlyStoppingState(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Stops a Trial.
    public func stopTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_StopTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stopTrial(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists the pareto-optimal Trials for multi-objective Study or the
    /// optimal Trials for single-objective Study. The definition of
    /// pareto-optimal can be checked in wiki page.
    /// https://en.wikipedia.org/wiki/Pareto_efficiency
    public func listOptimalTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOptimalTrials(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Vertex AI Vizier API.
///
/// Vertex AI Vizier is a service to solve blackbox optimization problems,
/// such as tuning machine learning hyperparameters and searching over deep
/// learning architectures.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_VizierService_Client: Google_Cloud_Aiplatform_V1_VizierService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a Study. A resource name will be generated after creation of the
    /// Study.
    public func createStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CreateStudy.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a Study by name.
    public func getStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.GetStudy.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists all the studies in a region for an associated project.
    public func listStudies<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListStudies.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Study.
    public func deleteStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.DeleteStudy.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Looks a study up using the user-defined display_name field instead of the
    /// fully qualified resource name.
    public func lookupStudy<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.LookupStudy.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Adds one or more Trials to a Study, with parameter values
    /// suggested by Vertex AI Vizier. Returns a long-running
    /// operation associated with the generation of Trial suggestions.
    /// When this long-running operation succeeds, it will contain
    /// a
    /// [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    public func suggestTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.SuggestTrials.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Adds a user provided Trial to a Study.
    public func createTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CreateTrial.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a Trial.
    public func getTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.GetTrial.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists the Trials associated with a Study.
    public func listTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListTrials.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Adds a measurement of the objective metrics to a Trial. This measurement
    /// is assumed to have been taken before the Trial is complete.
    public func addTrialMeasurement<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.AddTrialMeasurement.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Marks a Trial as complete.
    public func completeTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CompleteTrial.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Trial.
    public func deleteTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.DeleteTrial.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Checks  whether a Trial should stop or not. Returns a
    /// long-running operation. When the operation is successful,
    /// it will contain a
    /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    public func checkTrialEarlyStoppingState<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CheckTrialEarlyStoppingState.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Stops a Trial.
    public func stopTrial<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.StopTrial.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists the pareto-optimal Trials for multi-objective Study or the
    /// optimal Trials for single-objective Study. The definition of
    /// pareto-optimal can be checked in wiki page.
    /// https://en.wikipedia.org/wiki/Pareto_efficiency
    public func listOptimalTrials<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListOptimalTrials.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
