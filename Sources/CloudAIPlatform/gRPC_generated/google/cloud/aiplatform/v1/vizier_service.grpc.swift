// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/vizier_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.aiplatform.v1.VizierService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.VizierService" service.
public enum Google_Cloud_Aiplatform_V1_VizierService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.VizierService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateStudy" metadata.
        public enum CreateStudy {
            /// Request type for "CreateStudy".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateStudyRequest
            /// Response type for "CreateStudy".
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            /// Descriptor for "CreateStudy".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "CreateStudy"
            )
        }
        /// Namespace for "GetStudy" metadata.
        public enum GetStudy {
            /// Request type for "GetStudy".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetStudyRequest
            /// Response type for "GetStudy".
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            /// Descriptor for "GetStudy".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "GetStudy"
            )
        }
        /// Namespace for "ListStudies" metadata.
        public enum ListStudies {
            /// Request type for "ListStudies".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListStudiesRequest
            /// Response type for "ListStudies".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListStudiesResponse
            /// Descriptor for "ListStudies".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "ListStudies"
            )
        }
        /// Namespace for "DeleteStudy" metadata.
        public enum DeleteStudy {
            /// Request type for "DeleteStudy".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteStudyRequest
            /// Response type for "DeleteStudy".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteStudy".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "DeleteStudy"
            )
        }
        /// Namespace for "LookupStudy" metadata.
        public enum LookupStudy {
            /// Request type for "LookupStudy".
            public typealias Input = Google_Cloud_Aiplatform_V1_LookupStudyRequest
            /// Response type for "LookupStudy".
            public typealias Output = Google_Cloud_Aiplatform_V1_Study
            /// Descriptor for "LookupStudy".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "LookupStudy"
            )
        }
        /// Namespace for "SuggestTrials" metadata.
        public enum SuggestTrials {
            /// Request type for "SuggestTrials".
            public typealias Input = Google_Cloud_Aiplatform_V1_SuggestTrialsRequest
            /// Response type for "SuggestTrials".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "SuggestTrials".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "SuggestTrials"
            )
        }
        /// Namespace for "CreateTrial" metadata.
        public enum CreateTrial {
            /// Request type for "CreateTrial".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTrialRequest
            /// Response type for "CreateTrial".
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            /// Descriptor for "CreateTrial".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "CreateTrial"
            )
        }
        /// Namespace for "GetTrial" metadata.
        public enum GetTrial {
            /// Request type for "GetTrial".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTrialRequest
            /// Response type for "GetTrial".
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            /// Descriptor for "GetTrial".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "GetTrial"
            )
        }
        /// Namespace for "ListTrials" metadata.
        public enum ListTrials {
            /// Request type for "ListTrials".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTrialsRequest
            /// Response type for "ListTrials".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTrialsResponse
            /// Descriptor for "ListTrials".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "ListTrials"
            )
        }
        /// Namespace for "AddTrialMeasurement" metadata.
        public enum AddTrialMeasurement {
            /// Request type for "AddTrialMeasurement".
            public typealias Input = Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest
            /// Response type for "AddTrialMeasurement".
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            /// Descriptor for "AddTrialMeasurement".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "AddTrialMeasurement"
            )
        }
        /// Namespace for "CompleteTrial" metadata.
        public enum CompleteTrial {
            /// Request type for "CompleteTrial".
            public typealias Input = Google_Cloud_Aiplatform_V1_CompleteTrialRequest
            /// Response type for "CompleteTrial".
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            /// Descriptor for "CompleteTrial".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "CompleteTrial"
            )
        }
        /// Namespace for "DeleteTrial" metadata.
        public enum DeleteTrial {
            /// Request type for "DeleteTrial".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTrialRequest
            /// Response type for "DeleteTrial".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteTrial".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "DeleteTrial"
            )
        }
        /// Namespace for "CheckTrialEarlyStoppingState" metadata.
        public enum CheckTrialEarlyStoppingState {
            /// Request type for "CheckTrialEarlyStoppingState".
            public typealias Input = Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest
            /// Response type for "CheckTrialEarlyStoppingState".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CheckTrialEarlyStoppingState".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "CheckTrialEarlyStoppingState"
            )
        }
        /// Namespace for "StopTrial" metadata.
        public enum StopTrial {
            /// Request type for "StopTrial".
            public typealias Input = Google_Cloud_Aiplatform_V1_StopTrialRequest
            /// Response type for "StopTrial".
            public typealias Output = Google_Cloud_Aiplatform_V1_Trial
            /// Descriptor for "StopTrial".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "StopTrial"
            )
        }
        /// Namespace for "ListOptimalTrials" metadata.
        public enum ListOptimalTrials {
            /// Request type for "ListOptimalTrials".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest
            /// Response type for "ListOptimalTrials".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse
            /// Descriptor for "ListOptimalTrials".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService"),
                method: "ListOptimalTrials"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.VizierService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateStudy.descriptor,
            GetStudy.descriptor,
            ListStudies.descriptor,
            DeleteStudy.descriptor,
            LookupStudy.descriptor,
            SuggestTrials.descriptor,
            CreateTrial.descriptor,
            GetTrial.descriptor,
            ListTrials.descriptor,
            AddTrialMeasurement.descriptor,
            CompleteTrial.descriptor,
            DeleteTrial.descriptor,
            CheckTrialEarlyStoppingState.descriptor,
            StopTrial.descriptor,
            ListOptimalTrials.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.VizierService" service.
    public static let google_cloud_aiplatform_v1_VizierService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.VizierService")
}

// MARK: google.cloud.aiplatform.v1.VizierService (client)

extension Google_Cloud_Aiplatform_V1_VizierService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.VizierService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Vertex AI Vizier API.
    /// > 
    /// > Vertex AI Vizier is a service to solve blackbox optimization problems,
    /// > such as tuning machine learning hyperparameters and searching over deep
    /// > learning architectures.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Study. A resource name will be generated after creation of the
        /// > Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Study by name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListStudies" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the studies in a region for an associated project.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListStudiesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListStudiesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListStudiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listStudies<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteStudyRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LookupStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Looks a study up using the user-defined display_name field instead of the
        /// > fully qualified resource name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_LookupStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_LookupStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func lookupStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SuggestTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds one or more Trials to a Study, with parameter values
        /// > suggested by Vertex AI Vizier. Returns a long-running
        /// > operation associated with the generation of Trial suggestions.
        /// > When this long-running operation succeeds, it will contain
        /// > a
        /// > [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SuggestTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SuggestTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func suggestTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a user provided Trial to a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists the Trials associated with a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListTrialsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddTrialMeasurement" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a measurement of the objective metrics to a Trial. This measurement
        /// > is assumed to have been taken before the Trial is complete.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addTrialMeasurement<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CompleteTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Marks a Trial as complete.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CompleteTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CompleteTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func completeTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteTrialRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CheckTrialEarlyStoppingState" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Checks  whether a Trial should stop or not. Returns a
        /// > long-running operation. When the operation is successful,
        /// > it will contain a
        /// > [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func checkTrialEarlyStoppingState<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StopTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stops a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StopTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_StopTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stopTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListOptimalTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists the pareto-optimal Trials for multi-objective Study or the
        /// > optimal Trials for single-objective Study. The definition of
        /// > pareto-optimal can be checked in wiki page.
        /// > https://en.wikipedia.org/wiki/Pareto_efficiency
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listOptimalTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.VizierService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Vertex AI Vizier API.
    /// > 
    /// > Vertex AI Vizier is a service to solve blackbox optimization problems,
    /// > such as tuning machine learning hyperparameters and searching over deep
    /// > learning architectures.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Study. A resource name will be generated after creation of the
        /// > Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CreateStudy.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Study by name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.GetStudy.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListStudies" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the studies in a region for an associated project.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListStudiesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListStudiesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListStudiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listStudies<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListStudies.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteStudyRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.DeleteStudy.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LookupStudy" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Looks a study up using the user-defined display_name field instead of the
        /// > fully qualified resource name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_LookupStudyRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_LookupStudyRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Study` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func lookupStudy<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Study>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.LookupStudy.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SuggestTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds one or more Trials to a Study, with parameter values
        /// > suggested by Vertex AI Vizier. Returns a long-running
        /// > operation associated with the generation of Trial suggestions.
        /// > When this long-running operation succeeds, it will contain
        /// > a
        /// > [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SuggestTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SuggestTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func suggestTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.SuggestTrials.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a user provided Trial to a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CreateTrial.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.GetTrial.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists the Trials associated with a Study.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListTrialsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListTrials.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddTrialMeasurement" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a measurement of the objective metrics to a Trial. This measurement
        /// > is assumed to have been taken before the Trial is complete.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addTrialMeasurement<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.AddTrialMeasurement.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CompleteTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Marks a Trial as complete.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CompleteTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CompleteTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func completeTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CompleteTrial.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteTrialRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.DeleteTrial.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CheckTrialEarlyStoppingState" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Checks  whether a Trial should stop or not. Returns a
        /// > long-running operation. When the operation is successful,
        /// > it will contain a
        /// > [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func checkTrialEarlyStoppingState<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.CheckTrialEarlyStoppingState.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StopTrial" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Stops a Trial.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StopTrialRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_StopTrialRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Trial` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func stopTrial<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Trial>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.StopTrial.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListOptimalTrials" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists the pareto-optimal Trials for multi-objective Study or the
        /// > optimal Trials for single-objective Study. The definition of
        /// > pareto-optimal can be checked in wiki page.
        /// > https://en.wikipedia.org/wiki/Pareto_efficiency
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listOptimalTrials<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_VizierService.Method.ListOptimalTrials.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_VizierService.ClientProtocol {
    /// Call the "CreateStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Study. A resource name will be generated after creation of the
    /// > Study.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateStudyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createStudy<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Study by name.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetStudyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getStudy<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStudies" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all the studies in a region for an associated project.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListStudiesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStudies<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listStudies(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListStudiesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListStudiesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Study.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteStudyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteStudy<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LookupStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Looks a study up using the user-defined display_name field instead of the
    /// > fully qualified resource name.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_LookupStudyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func lookupStudy<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.lookupStudy(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_LookupStudyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Study>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SuggestTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds one or more Trials to a Study, with parameter values
    /// > suggested by Vertex AI Vizier. Returns a long-running
    /// > operation associated with the generation of Trial suggestions.
    /// > When this long-running operation succeeds, it will contain
    /// > a
    /// > [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SuggestTrialsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func suggestTrials<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.suggestTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a user provided Trial to a Study.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateTrialRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createTrial<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Trial.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetTrialRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTrial<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists the Trials associated with a Study.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListTrialsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listTrials<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTrialsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddTrialMeasurement" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a measurement of the objective metrics to a Trial. This measurement
    /// > is assumed to have been taken before the Trial is complete.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addTrialMeasurement<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addTrialMeasurement(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CompleteTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Marks a Trial as complete.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CompleteTrialRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func completeTrial<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.completeTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Trial.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteTrialRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteTrial<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CheckTrialEarlyStoppingState" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Checks  whether a Trial should stop or not. Returns a
    /// > long-running operation. When the operation is successful,
    /// > it will contain a
    /// > [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func checkTrialEarlyStoppingState<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.checkTrialEarlyStoppingState(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stops a Trial.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StopTrialRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stopTrial<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stopTrial(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_StopTrialRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Trial>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOptimalTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists the pareto-optimal Trials for multi-objective Study or the
    /// > optimal Trials for single-objective Study. The definition of
    /// > pareto-optimal can be checked in wiki page.
    /// > https://en.wikipedia.org/wiki/Pareto_efficiency
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOptimalTrials<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listOptimalTrials(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_VizierService.ClientProtocol {
    /// Call the "CreateStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Study. A resource name will be generated after creation of the
    /// > Study.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createStudy(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Study by name.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getStudy(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStudies" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all the studies in a region for an associated project.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStudies<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListStudiesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListStudiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListStudiesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listStudies(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Study.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteStudy(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LookupStudy" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Looks a study up using the user-defined display_name field instead of the
    /// > fully qualified resource name.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func lookupStudy<Result>(
        _ message: Google_Cloud_Aiplatform_V1_LookupStudyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Study>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_LookupStudyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.lookupStudy(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SuggestTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds one or more Trials to a Study, with parameter values
    /// > suggested by Vertex AI Vizier. Returns a long-running
    /// > operation associated with the generation of Trial suggestions.
    /// > When this long-running operation succeeds, it will contain
    /// > a
    /// > [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func suggestTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_SuggestTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SuggestTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.suggestTrials(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a user provided Trial to a Study.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTrial(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Trial.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTrial(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists the Trials associated with a Study.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrialsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTrials(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddTrialMeasurement" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a measurement of the objective metrics to a Trial. This measurement
    /// > is assumed to have been taken before the Trial is complete.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addTrialMeasurement<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddTrialMeasurementRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addTrialMeasurement(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CompleteTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Marks a Trial as complete.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func completeTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CompleteTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CompleteTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.completeTrial(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Trial.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTrial(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CheckTrialEarlyStoppingState" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Checks  whether a Trial should stop or not. Returns a
    /// > long-running operation. When the operation is successful,
    /// > it will contain a
    /// > [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func checkTrialEarlyStoppingState<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CheckTrialEarlyStoppingStateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.checkTrialEarlyStoppingState(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopTrial" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Stops a Trial.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stopTrial<Result>(
        _ message: Google_Cloud_Aiplatform_V1_StopTrialRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Trial>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StopTrialRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stopTrial(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOptimalTrials" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists the pareto-optimal Trials for multi-objective Study or the
    /// > optimal Trials for single-objective Study. The definition of
    /// > pareto-optimal can be checked in wiki page.
    /// > https://en.wikipedia.org/wiki/Pareto_efficiency
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOptimalTrials<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListOptimalTrialsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListOptimalTrialsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOptimalTrials(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}
