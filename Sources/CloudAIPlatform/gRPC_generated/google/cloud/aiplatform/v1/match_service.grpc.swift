// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/match_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - google.cloud.aiplatform.v1.MatchService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.MatchService" service.
public enum Google_Cloud_Aiplatform_V1_MatchService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.MatchService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MatchService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "FindNeighbors" metadata.
        public enum FindNeighbors {
            /// Request type for "FindNeighbors".
            public typealias Input = Google_Cloud_Aiplatform_V1_FindNeighborsRequest
            /// Response type for "FindNeighbors".
            public typealias Output = Google_Cloud_Aiplatform_V1_FindNeighborsResponse
            /// Descriptor for "FindNeighbors".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MatchService"),
                method: "FindNeighbors"
            )
        }
        /// Namespace for "ReadIndexDatapoints" metadata.
        public enum ReadIndexDatapoints {
            /// Request type for "ReadIndexDatapoints".
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest
            /// Response type for "ReadIndexDatapoints".
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse
            /// Descriptor for "ReadIndexDatapoints".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MatchService"),
                method: "ReadIndexDatapoints"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.MatchService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            FindNeighbors.descriptor,
            ReadIndexDatapoints.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.MatchService" service.
    public static let google_cloud_aiplatform_v1_MatchService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MatchService")
}

// MARK: google.cloud.aiplatform.v1.MatchService (client)

extension Google_Cloud_Aiplatform_V1_MatchService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.MatchService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > MatchService is a Google managed service for efficient vector similarity
    /// > search at scale.
    public protocol ClientProtocol: Sendable {
        /// Call the "FindNeighbors" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Finds the nearest neighbors of each vector within the request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FindNeighborsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_FindNeighborsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FindNeighborsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func findNeighbors<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReadIndexDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Reads the datapoints/vectors of the given IDs.
        /// > A maximum of 1000 datapoints can be retrieved in a batch.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func readIndexDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.MatchService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > MatchService is a Google managed service for efficient vector similarity
    /// > search at scale.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "FindNeighbors" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Finds the nearest neighbors of each vector within the request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FindNeighborsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_FindNeighborsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FindNeighborsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func findNeighbors<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MatchService.Method.FindNeighbors.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReadIndexDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Reads the datapoints/vectors of the given IDs.
        /// > A maximum of 1000 datapoints can be retrieved in a batch.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func readIndexDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MatchService.Method.ReadIndexDatapoints.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_MatchService.ClientProtocol {
    /// Call the "FindNeighbors" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Finds the nearest neighbors of each vector within the request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FindNeighborsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func findNeighbors<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.findNeighbors(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReadIndexDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Reads the datapoints/vectors of the given IDs.
    /// > A maximum of 1000 datapoints can be retrieved in a batch.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func readIndexDatapoints<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.readIndexDatapoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_MatchService.ClientProtocol {
    /// Call the "FindNeighbors" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Finds the nearest neighbors of each vector within the request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func findNeighbors<Result>(
        _ message: Google_Cloud_Aiplatform_V1_FindNeighborsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.findNeighbors(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReadIndexDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Reads the datapoints/vectors of the given IDs.
    /// > A maximum of 1000 datapoints can be retrieved in a batch.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func readIndexDatapoints<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readIndexDatapoints(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}