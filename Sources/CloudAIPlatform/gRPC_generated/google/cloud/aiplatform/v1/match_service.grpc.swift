// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/match_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_MatchService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_MatchService
    public enum Method {
        public enum FindNeighbors {
            public typealias Input = Google_Cloud_Aiplatform_V1_FindNeighborsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_FindNeighborsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_MatchService.descriptor.fullyQualifiedService,
                method: "FindNeighbors"
            )
        }
        public enum ReadIndexDatapoints {
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_MatchService.descriptor.fullyQualifiedService,
                method: "ReadIndexDatapoints"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            FindNeighbors.descriptor,
            ReadIndexDatapoints.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_MatchService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_MatchService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_MatchService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "MatchService"
    )
}

/// MatchService is a Google managed service for efficient vector similarity
/// search at scale.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_MatchService_ClientProtocol: Sendable {
    /// Finds the nearest neighbors of each vector within the request.
    func findNeighbors<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Reads the datapoints/vectors of the given IDs.
    /// A maximum of 1000 datapoints can be retrieved in a batch.
    func readIndexDatapoints<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_MatchService.ClientProtocol {
    public func findNeighbors<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.findNeighbors(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>(),
            options: options,
            body
        )
    }
    
    public func readIndexDatapoints<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.readIndexDatapoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_MatchService.ClientProtocol {
    /// Finds the nearest neighbors of each vector within the request.
    public func findNeighbors<Result>(
        _ message: Google_Cloud_Aiplatform_V1_FindNeighborsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.findNeighbors(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Reads the datapoints/vectors of the given IDs.
    /// A maximum of 1000 datapoints can be retrieved in a batch.
    public func readIndexDatapoints<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readIndexDatapoints(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// MatchService is a Google managed service for efficient vector similarity
/// search at scale.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_MatchService_Client: Google_Cloud_Aiplatform_V1_MatchService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Finds the nearest neighbors of each vector within the request.
    public func findNeighbors<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FindNeighborsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FindNeighborsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_MatchService.Method.FindNeighbors.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Reads the datapoints/vectors of the given IDs.
    /// A maximum of 1000 datapoints can be retrieved in a batch.
    public func readIndexDatapoints<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadIndexDatapointsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_MatchService.Method.ReadIndexDatapoints.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}