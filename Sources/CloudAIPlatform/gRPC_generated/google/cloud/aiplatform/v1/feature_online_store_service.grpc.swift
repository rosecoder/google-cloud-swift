// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature_online_store_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.aiplatform.v1.FeatureOnlineStoreService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
public enum Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureOnlineStoreService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "FetchFeatureValues" metadata.
        public enum FetchFeatureValues {
            /// Request type for "FetchFeatureValues".
            public typealias Input = Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest
            /// Response type for "FetchFeatureValues".
            public typealias Output = Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse
            /// Descriptor for "FetchFeatureValues".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureOnlineStoreService"),
                method: "FetchFeatureValues"
            )
        }
        /// Namespace for "SearchNearestEntities" metadata.
        public enum SearchNearestEntities {
            /// Request type for "SearchNearestEntities".
            public typealias Input = Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest
            /// Response type for "SearchNearestEntities".
            public typealias Output = Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse
            /// Descriptor for "SearchNearestEntities".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureOnlineStoreService"),
                method: "SearchNearestEntities"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            FetchFeatureValues.descriptor,
            SearchNearestEntities.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
    public static let google_cloud_aiplatform_v1_FeatureOnlineStoreService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.FeatureOnlineStoreService")
}

// MARK: google.cloud.aiplatform.v1.FeatureOnlineStoreService (client)

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for fetching feature values from the online store.
    public protocol ClientProtocol: Sendable {
        /// Call the "FetchFeatureValues" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Fetch feature values under a FeatureView.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func fetchFeatureValues<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SearchNearestEntities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Search the nearest entities under a FeatureView.
        /// > Search only works for indexable feature view; if a feature view isn't
        /// > indexable, returns Invalid argument response.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func searchNearestEntities<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.FeatureOnlineStoreService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for fetching feature values from the online store.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "FetchFeatureValues" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Fetch feature values under a FeatureView.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func fetchFeatureValues<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService.Method.FetchFeatureValues.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SearchNearestEntities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Search the nearest entities under a FeatureView.
        /// > Search only works for indexable feature view; if a feature view isn't
        /// > indexable, returns Invalid argument response.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func searchNearestEntities<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService.Method.SearchNearestEntities.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService.ClientProtocol {
    /// Call the "FetchFeatureValues" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Fetch feature values under a FeatureView.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func fetchFeatureValues<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.fetchFeatureValues(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchNearestEntities" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Search the nearest entities under a FeatureView.
    /// > Search only works for indexable feature view; if a feature view isn't
    /// > indexable, returns Invalid argument response.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func searchNearestEntities<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.searchNearestEntities(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_FeatureOnlineStoreService.ClientProtocol {
    /// Call the "FetchFeatureValues" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Fetch feature values under a FeatureView.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func fetchFeatureValues<Result>(
        _ message: Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_FetchFeatureValuesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_FetchFeatureValuesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.fetchFeatureValues(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchNearestEntities" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Search the nearest entities under a FeatureView.
    /// > Search only works for indexable feature view; if a feature view isn't
    /// > indexable, returns Invalid argument response.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func searchNearestEntities<Result>(
        _ message: Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchNearestEntitiesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.searchNearestEntities(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}