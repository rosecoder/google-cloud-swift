// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/deployment_resource_pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A description of resources that can be shared by multiple DeployedModels,
/// whose underlying specification consists of a DedicatedResources.
public struct Google_Cloud_Aiplatform_V1_DeploymentResourcePool: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Immutable. The resource name of the DeploymentResourcePool.
  /// Format:
  /// `projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}`
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The underlying DedicatedResources that the DeploymentResourcePool
  /// uses.
  public var dedicatedResources: Google_Cloud_Aiplatform_V1_DedicatedResources {
    get {return _storage._dedicatedResources ?? Google_Cloud_Aiplatform_V1_DedicatedResources()}
    set {_uniqueStorage()._dedicatedResources = newValue}
  }
  /// Returns true if `dedicatedResources` has been explicitly set.
  public var hasDedicatedResources: Bool {return _storage._dedicatedResources != nil}
  /// Clears the value of `dedicatedResources`. Subsequent reads from it will return its default value.
  public mutating func clearDedicatedResources() {_uniqueStorage()._dedicatedResources = nil}

  /// Customer-managed encryption key spec for a DeploymentResourcePool. If set,
  /// this DeploymentResourcePool will be secured by this key. Endpoints and the
  /// DeploymentResourcePool they deploy in need to have the same EncryptionSpec.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _storage._encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_uniqueStorage()._encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return _storage._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {_uniqueStorage()._encryptionSpec = nil}

  /// The service account that the DeploymentResourcePool's container(s) run as.
  /// Specify the email address of the service account. If this service account
  /// is not specified, the container(s) run as a service account that doesn't
  /// have access to the resource project.
  ///
  /// Users deploying the Models to this DeploymentResourcePool must have the
  /// `iam.serviceAccounts.actAs` permission on this service account.
  public var serviceAccount: String {
    get {return _storage._serviceAccount}
    set {_uniqueStorage()._serviceAccount = newValue}
  }

  /// If the DeploymentResourcePool is deployed with custom-trained Models or
  /// AutoML Tabular Models, the container(s) of the DeploymentResourcePool will
  /// send `stderr` and `stdout` streams to Cloud Logging by default.
  /// Please note that the logs incur cost, which are subject to [Cloud Logging
  /// pricing](https://cloud.google.com/logging/pricing).
  ///
  /// User can disable container logging by setting this flag to true.
  public var disableContainerLogging: Bool {
    get {return _storage._disableContainerLogging}
    set {_uniqueStorage()._disableContainerLogging = newValue}
  }

  /// Output only. Timestamp when this DeploymentResourcePool was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool {
    get {return _storage._satisfiesPzs}
    set {_uniqueStorage()._satisfiesPzs = newValue}
  }

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool {
    get {return _storage._satisfiesPzi}
    set {_uniqueStorage()._satisfiesPzi = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_DeploymentResourcePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeploymentResourcePool"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "dedicated_resources"),
    5: .standard(proto: "encryption_spec"),
    6: .standard(proto: "service_account"),
    7: .standard(proto: "disable_container_logging"),
    4: .standard(proto: "create_time"),
    8: .standard(proto: "satisfies_pzs"),
    9: .standard(proto: "satisfies_pzi"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _dedicatedResources: Google_Cloud_Aiplatform_V1_DedicatedResources? = nil
    var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil
    var _serviceAccount: String = String()
    var _disableContainerLogging: Bool = false
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _satisfiesPzs: Bool = false
    var _satisfiesPzi: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _dedicatedResources = source._dedicatedResources
      _encryptionSpec = source._encryptionSpec
      _serviceAccount = source._serviceAccount
      _disableContainerLogging = source._disableContainerLogging
      _createTime = source._createTime
      _satisfiesPzs = source._satisfiesPzs
      _satisfiesPzi = source._satisfiesPzi
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._dedicatedResources) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._encryptionSpec) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._serviceAccount) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._disableContainerLogging) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzs) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzi) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      try { if let v = _storage._dedicatedResources {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._encryptionSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._serviceAccount.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceAccount, fieldNumber: 6)
      }
      if _storage._disableContainerLogging != false {
        try visitor.visitSingularBoolField(value: _storage._disableContainerLogging, fieldNumber: 7)
      }
      if _storage._satisfiesPzs != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzs, fieldNumber: 8)
      }
      if _storage._satisfiesPzi != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzi, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DeploymentResourcePool, rhs: Google_Cloud_Aiplatform_V1_DeploymentResourcePool) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._dedicatedResources != rhs_storage._dedicatedResources {return false}
        if _storage._encryptionSpec != rhs_storage._encryptionSpec {return false}
        if _storage._serviceAccount != rhs_storage._serviceAccount {return false}
        if _storage._disableContainerLogging != rhs_storage._disableContainerLogging {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._satisfiesPzs != rhs_storage._satisfiesPzs {return false}
        if _storage._satisfiesPzi != rhs_storage._satisfiesPzi {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
