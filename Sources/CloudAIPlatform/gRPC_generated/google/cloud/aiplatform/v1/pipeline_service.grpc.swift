// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/pipeline_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

public enum Google_Cloud_Aiplatform_V1_PipelineService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_PipelineService
    public enum Method {
        public enum CreateTrainingPipeline {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TrainingPipeline
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "CreateTrainingPipeline"
            )
        }
        public enum GetTrainingPipeline {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TrainingPipeline
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "GetTrainingPipeline"
            )
        }
        public enum ListTrainingPipelines {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "ListTrainingPipelines"
            )
        }
        public enum DeleteTrainingPipeline {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "DeleteTrainingPipeline"
            )
        }
        public enum CancelTrainingPipeline {
            public typealias Input = Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "CancelTrainingPipeline"
            )
        }
        public enum CreatePipelineJob {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_PipelineJob
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "CreatePipelineJob"
            )
        }
        public enum GetPipelineJob {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetPipelineJobRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_PipelineJob
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "GetPipelineJob"
            )
        }
        public enum ListPipelineJobs {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "ListPipelineJobs"
            )
        }
        public enum DeletePipelineJob {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "DeletePipelineJob"
            )
        }
        public enum BatchDeletePipelineJobs {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "BatchDeletePipelineJobs"
            )
        }
        public enum CancelPipelineJob {
            public typealias Input = Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "CancelPipelineJob"
            )
        }
        public enum BatchCancelPipelineJobs {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_PipelineService.descriptor.fullyQualifiedService,
                method: "BatchCancelPipelineJobs"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateTrainingPipeline.descriptor,
            GetTrainingPipeline.descriptor,
            ListTrainingPipelines.descriptor,
            DeleteTrainingPipeline.descriptor,
            CancelTrainingPipeline.descriptor,
            CreatePipelineJob.descriptor,
            GetPipelineJob.descriptor,
            ListPipelineJobs.descriptor,
            DeletePipelineJob.descriptor,
            BatchDeletePipelineJobs.descriptor,
            CancelPipelineJob.descriptor,
            BatchCancelPipelineJobs.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_PipelineService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_PipelineService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_PipelineService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "PipelineService"
    )
}

/// A service for creating and managing Vertex AI's pipelines. This includes both
/// `TrainingPipeline` resources (used for AutoML and custom training) and
/// `PipelineJob` resources (used for Vertex AI Pipelines).
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_PipelineService_ClientProtocol: Sendable {
    /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
    /// attempted to be run.
    func createTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a TrainingPipeline.
    func getTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists TrainingPipelines in a Location.
    func listTrainingPipelines<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a TrainingPipeline.
    func deleteTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Cancels a TrainingPipeline.
    /// Starts asynchronous cancellation on the TrainingPipeline. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1.PipelineService.GetTrainingPipeline]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
    /// a
    /// [TrainingPipeline.error][google.cloud.aiplatform.v1.TrainingPipeline.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`, and
    /// [TrainingPipeline.state][google.cloud.aiplatform.v1.TrainingPipeline.state]
    /// is set to `CANCELLED`.
    func cancelTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a PipelineJob. A PipelineJob will run immediately when created.
    func createPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a PipelineJob.
    func getPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists PipelineJobs in a Location.
    func listPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a PipelineJob.
    func deletePipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Batch deletes PipelineJobs
    /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
    /// If it succeeds, all of the PipelineJobs are deleted.
    func batchDeletePipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Cancels a PipelineJob.
    /// Starts asynchronous cancellation on the PipelineJob. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1.PipelineService.GetPipelineJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the PipelineJob is not deleted; instead it becomes a pipeline with
    /// a [PipelineJob.error][google.cloud.aiplatform.v1.PipelineJob.error] value
    /// with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
    /// to `Code.CANCELLED`, and
    /// [PipelineJob.state][google.cloud.aiplatform.v1.PipelineJob.state] is set to
    /// `CANCELLED`.
    func cancelPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Batch cancel PipelineJobs.
    /// Firstly the server will check if all the jobs are in non-terminal states,
    /// and skip the jobs that are already terminated.
    /// If the operation failed, none of the pipeline jobs are cancelled.
    /// The server will poll the states of all the pipeline jobs periodically
    /// to check the cancellation status.
    /// This operation will return an LRO.
    func batchCancelPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_PipelineService.ClientProtocol {
    public func createTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTrainingPipeline(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>(),
            options: options,
            body
        )
    }
    
    public func getTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTrainingPipeline(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>(),
            options: options,
            body
        )
    }
    
    public func listTrainingPipelines<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTrainingPipelines(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTrainingPipeline(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func cancelTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.cancelTrainingPipeline(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func createPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createPipelineJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>(),
            options: options,
            body
        )
    }
    
    public func getPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getPipelineJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>(),
            options: options,
            body
        )
    }
    
    public func listPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listPipelineJobs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>(),
            options: options,
            body
        )
    }
    
    public func deletePipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deletePipelineJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func batchDeletePipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchDeletePipelineJobs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func cancelPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.cancelPipelineJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func batchCancelPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchCancelPipelineJobs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_PipelineService.ClientProtocol {
    /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
    /// attempted to be run.
    public func createTrainingPipeline<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTrainingPipeline(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a TrainingPipeline.
    public func getTrainingPipeline<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTrainingPipeline(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists TrainingPipelines in a Location.
    public func listTrainingPipelines<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTrainingPipelines(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a TrainingPipeline.
    public func deleteTrainingPipeline<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTrainingPipeline(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Cancels a TrainingPipeline.
    /// Starts asynchronous cancellation on the TrainingPipeline. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1.PipelineService.GetTrainingPipeline]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
    /// a
    /// [TrainingPipeline.error][google.cloud.aiplatform.v1.TrainingPipeline.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`, and
    /// [TrainingPipeline.state][google.cloud.aiplatform.v1.TrainingPipeline.state]
    /// is set to `CANCELLED`.
    public func cancelTrainingPipeline<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelTrainingPipeline(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a PipelineJob. A PipelineJob will run immediately when created.
    public func createPipelineJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createPipelineJob(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a PipelineJob.
    public func getPipelineJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetPipelineJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getPipelineJob(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists PipelineJobs in a Location.
    public func listPipelineJobs<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listPipelineJobs(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a PipelineJob.
    public func deletePipelineJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deletePipelineJob(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Batch deletes PipelineJobs
    /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
    /// If it succeeds, all of the PipelineJobs are deleted.
    public func batchDeletePipelineJobs<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchDeletePipelineJobs(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Cancels a PipelineJob.
    /// Starts asynchronous cancellation on the PipelineJob. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1.PipelineService.GetPipelineJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the PipelineJob is not deleted; instead it becomes a pipeline with
    /// a [PipelineJob.error][google.cloud.aiplatform.v1.PipelineJob.error] value
    /// with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
    /// to `Code.CANCELLED`, and
    /// [PipelineJob.state][google.cloud.aiplatform.v1.PipelineJob.state] is set to
    /// `CANCELLED`.
    public func cancelPipelineJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelPipelineJob(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Batch cancel PipelineJobs.
    /// Firstly the server will check if all the jobs are in non-terminal states,
    /// and skip the jobs that are already terminated.
    /// If the operation failed, none of the pipeline jobs are cancelled.
    /// The server will poll the states of all the pipeline jobs periodically
    /// to check the cancellation status.
    /// This operation will return an LRO.
    public func batchCancelPipelineJobs<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchCancelPipelineJobs(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// A service for creating and managing Vertex AI's pipelines. This includes both
/// `TrainingPipeline` resources (used for AutoML and custom training) and
/// `PipelineJob` resources (used for Vertex AI Pipelines).
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_PipelineService_Client: Google_Cloud_Aiplatform_V1_PipelineService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
    /// attempted to be run.
    public func createTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.CreateTrainingPipeline.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a TrainingPipeline.
    public func getTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TrainingPipeline>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TrainingPipeline>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.GetTrainingPipeline.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists TrainingPipelines in a Location.
    public func listTrainingPipelines<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTrainingPipelinesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.ListTrainingPipelines.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a TrainingPipeline.
    public func deleteTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.DeleteTrainingPipeline.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Cancels a TrainingPipeline.
    /// Starts asynchronous cancellation on the TrainingPipeline. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1.PipelineService.GetTrainingPipeline]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
    /// a
    /// [TrainingPipeline.error][google.cloud.aiplatform.v1.TrainingPipeline.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`, and
    /// [TrainingPipeline.state][google.cloud.aiplatform.v1.TrainingPipeline.state]
    /// is set to `CANCELLED`.
    public func cancelTrainingPipeline<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CancelTrainingPipelineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.CancelTrainingPipeline.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a PipelineJob. A PipelineJob will run immediately when created.
    public func createPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreatePipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.CreatePipelineJob.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a PipelineJob.
    public func getPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetPipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_PipelineJob>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_PipelineJob>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.GetPipelineJob.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists PipelineJobs in a Location.
    public func listPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListPipelineJobsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.ListPipelineJobs.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a PipelineJob.
    public func deletePipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeletePipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.DeletePipelineJob.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Batch deletes PipelineJobs
    /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
    /// If it succeeds, all of the PipelineJobs are deleted.
    public func batchDeletePipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchDeletePipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.BatchDeletePipelineJobs.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Cancels a PipelineJob.
    /// Starts asynchronous cancellation on the PipelineJob. The server
    /// makes a best effort to cancel the pipeline, but success is not
    /// guaranteed. Clients can use
    /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1.PipelineService.GetPipelineJob]
    /// or other methods to check whether the cancellation succeeded or whether the
    /// pipeline completed despite cancellation. On successful cancellation,
    /// the PipelineJob is not deleted; instead it becomes a pipeline with
    /// a [PipelineJob.error][google.cloud.aiplatform.v1.PipelineJob.error] value
    /// with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
    /// to `Code.CANCELLED`, and
    /// [PipelineJob.state][google.cloud.aiplatform.v1.PipelineJob.state] is set to
    /// `CANCELLED`.
    public func cancelPipelineJob<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CancelPipelineJobRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.CancelPipelineJob.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Batch cancel PipelineJobs.
    /// Firstly the server will check if all the jobs are in non-terminal states,
    /// and skip the jobs that are already terminated.
    /// If the operation failed, none of the pipeline jobs are cancelled.
    /// The server will poll the states of all the pipeline jobs periodically
    /// to check the cancellation status.
    /// This operation will return an LRO.
    public func batchCancelPipelineJobs<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCancelPipelineJobsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_PipelineService.Method.BatchCancelPipelineJobs.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
