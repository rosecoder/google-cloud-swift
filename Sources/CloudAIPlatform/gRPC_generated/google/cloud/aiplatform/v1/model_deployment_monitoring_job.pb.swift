// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/model_deployment_monitoring_job.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The Model Monitoring Objective types.
public enum Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// Default value, should not be set.
  case unspecified // = 0

  /// Raw feature values' stats to detect skew between Training-Prediction
  /// datasets.
  case rawFeatureSkew // = 1

  /// Raw feature values' stats to detect drift between Serving-Prediction
  /// datasets.
  case rawFeatureDrift // = 2

  /// Feature attribution scores to detect skew between Training-Prediction
  /// datasets.
  case featureAttributionSkew // = 3

  /// Feature attribution scores to detect skew between Prediction datasets
  /// collected within different time windows.
  case featureAttributionDrift // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .rawFeatureSkew
    case 2: self = .rawFeatureDrift
    case 3: self = .featureAttributionSkew
    case 4: self = .featureAttributionDrift
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .rawFeatureSkew: return 1
    case .rawFeatureDrift: return 2
    case .featureAttributionSkew: return 3
    case .featureAttributionDrift: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveType] = [
    .unspecified,
    .rawFeatureSkew,
    .rawFeatureDrift,
    .featureAttributionSkew,
    .featureAttributionDrift,
  ]

}

/// Represents a job that runs periodically to monitor the deployed models in an
/// endpoint. It will analyze the logged training & prediction data to detect any
/// abnormal behaviors.
public struct Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Resource name of a ModelDeploymentMonitoringJob.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Required. The user-defined name of the ModelDeploymentMonitoringJob.
  /// The name can be up to 128 characters long and can consist of any UTF-8
  /// characters.
  /// Display name of a ModelDeploymentMonitoringJob.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Required. Endpoint resource name.
  /// Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String {
    get {return _storage._endpoint}
    set {_uniqueStorage()._endpoint = newValue}
  }

  /// Output only. The detailed state of the monitoring job.
  /// When the job is still creating, the state will be 'PENDING'.
  /// Once the job is successfully created, the state will be 'RUNNING'.
  /// Pause the job, the state will be 'PAUSED'.
  /// Resume the job, the state will return to 'RUNNING'.
  public var state: Google_Cloud_Aiplatform_V1_JobState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Output only. Schedule state when the monitoring job is in Running state.
  public var scheduleState: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.MonitoringScheduleState {
    get {return _storage._scheduleState}
    set {_uniqueStorage()._scheduleState = newValue}
  }

  /// Output only. Latest triggered monitoring pipeline metadata.
  public var latestMonitoringPipelineMetadata: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata {
    get {return _storage._latestMonitoringPipelineMetadata ?? Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata()}
    set {_uniqueStorage()._latestMonitoringPipelineMetadata = newValue}
  }
  /// Returns true if `latestMonitoringPipelineMetadata` has been explicitly set.
  public var hasLatestMonitoringPipelineMetadata: Bool {return _storage._latestMonitoringPipelineMetadata != nil}
  /// Clears the value of `latestMonitoringPipelineMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearLatestMonitoringPipelineMetadata() {_uniqueStorage()._latestMonitoringPipelineMetadata = nil}

  /// Required. The config for monitoring objectives. This is a per DeployedModel
  /// config. Each DeployedModel needs to be configured separately.
  public var modelDeploymentMonitoringObjectiveConfigs: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig] {
    get {return _storage._modelDeploymentMonitoringObjectiveConfigs}
    set {_uniqueStorage()._modelDeploymentMonitoringObjectiveConfigs = newValue}
  }

  /// Required. Schedule config for running the monitoring job.
  public var modelDeploymentMonitoringScheduleConfig: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig {
    get {return _storage._modelDeploymentMonitoringScheduleConfig ?? Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig()}
    set {_uniqueStorage()._modelDeploymentMonitoringScheduleConfig = newValue}
  }
  /// Returns true if `modelDeploymentMonitoringScheduleConfig` has been explicitly set.
  public var hasModelDeploymentMonitoringScheduleConfig: Bool {return _storage._modelDeploymentMonitoringScheduleConfig != nil}
  /// Clears the value of `modelDeploymentMonitoringScheduleConfig`. Subsequent reads from it will return its default value.
  public mutating func clearModelDeploymentMonitoringScheduleConfig() {_uniqueStorage()._modelDeploymentMonitoringScheduleConfig = nil}

  /// Required. Sample Strategy for logging.
  public var loggingSamplingStrategy: Google_Cloud_Aiplatform_V1_SamplingStrategy {
    get {return _storage._loggingSamplingStrategy ?? Google_Cloud_Aiplatform_V1_SamplingStrategy()}
    set {_uniqueStorage()._loggingSamplingStrategy = newValue}
  }
  /// Returns true if `loggingSamplingStrategy` has been explicitly set.
  public var hasLoggingSamplingStrategy: Bool {return _storage._loggingSamplingStrategy != nil}
  /// Clears the value of `loggingSamplingStrategy`. Subsequent reads from it will return its default value.
  public mutating func clearLoggingSamplingStrategy() {_uniqueStorage()._loggingSamplingStrategy = nil}

  /// Alert config for model monitoring.
  public var modelMonitoringAlertConfig: Google_Cloud_Aiplatform_V1_ModelMonitoringAlertConfig {
    get {return _storage._modelMonitoringAlertConfig ?? Google_Cloud_Aiplatform_V1_ModelMonitoringAlertConfig()}
    set {_uniqueStorage()._modelMonitoringAlertConfig = newValue}
  }
  /// Returns true if `modelMonitoringAlertConfig` has been explicitly set.
  public var hasModelMonitoringAlertConfig: Bool {return _storage._modelMonitoringAlertConfig != nil}
  /// Clears the value of `modelMonitoringAlertConfig`. Subsequent reads from it will return its default value.
  public mutating func clearModelMonitoringAlertConfig() {_uniqueStorage()._modelMonitoringAlertConfig = nil}

  /// YAML schema file uri describing the format of a single instance,
  /// which are given to format this Endpoint's prediction (and explanation).
  /// If not set, we will generate predict schema from collected predict
  /// requests.
  public var predictInstanceSchemaUri: String {
    get {return _storage._predictInstanceSchemaUri}
    set {_uniqueStorage()._predictInstanceSchemaUri = newValue}
  }

  /// Sample Predict instance, same format as
  /// [PredictRequest.instances][google.cloud.aiplatform.v1.PredictRequest.instances],
  /// this can be set as a replacement of
  /// [ModelDeploymentMonitoringJob.predict_instance_schema_uri][google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob.predict_instance_schema_uri].
  /// If not set, we will generate predict schema from collected predict
  /// requests.
  public var samplePredictInstance: SwiftProtobuf.Google_Protobuf_Value {
    get {return _storage._samplePredictInstance ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_uniqueStorage()._samplePredictInstance = newValue}
  }
  /// Returns true if `samplePredictInstance` has been explicitly set.
  public var hasSamplePredictInstance: Bool {return _storage._samplePredictInstance != nil}
  /// Clears the value of `samplePredictInstance`. Subsequent reads from it will return its default value.
  public mutating func clearSamplePredictInstance() {_uniqueStorage()._samplePredictInstance = nil}

  /// YAML schema file uri describing the format of a single instance that you
  /// want Tensorflow Data Validation (TFDV) to analyze.
  ///
  /// If this field is empty, all the feature data types are inferred from
  /// [predict_instance_schema_uri][google.cloud.aiplatform.v1.ModelDeploymentMonitoringJob.predict_instance_schema_uri],
  /// meaning that TFDV will use the data in the exact format(data type) as
  /// prediction request/response.
  /// If there are any data type differences between predict instance and TFDV
  /// instance, this field can be used to override the schema.
  /// For models trained with Vertex AI, this field must be set as all the
  /// fields in predict instance formatted as string.
  public var analysisInstanceSchemaUri: String {
    get {return _storage._analysisInstanceSchemaUri}
    set {_uniqueStorage()._analysisInstanceSchemaUri = newValue}
  }

  /// Output only. The created bigquery tables for the job under customer
  /// project. Customer could do their own query & analysis. There could be 4 log
  /// tables in maximum:
  /// 1. Training data logging predict request/response
  /// 2. Serving data logging predict request/response
  public var bigqueryTables: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable] {
    get {return _storage._bigqueryTables}
    set {_uniqueStorage()._bigqueryTables = newValue}
  }

  /// The TTL of BigQuery tables in user projects which stores logs.
  /// A day is the basic unit of the TTL and we take the ceil of TTL/86400(a
  /// day). e.g. { second: 3600} indicates ttl = 1 day.
  public var logTtl: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._logTtl ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._logTtl = newValue}
  }
  /// Returns true if `logTtl` has been explicitly set.
  public var hasLogTtl: Bool {return _storage._logTtl != nil}
  /// Clears the value of `logTtl`. Subsequent reads from it will return its default value.
  public mutating func clearLogTtl() {_uniqueStorage()._logTtl = nil}

  /// The labels with user-defined metadata to organize your
  /// ModelDeploymentMonitoringJob.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information and examples of labels.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Output only. Timestamp when this ModelDeploymentMonitoringJob was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Timestamp when this ModelDeploymentMonitoringJob was updated
  /// most recently.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Output only. Timestamp when this monitoring pipeline will be scheduled to
  /// run for the next round.
  public var nextScheduleTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._nextScheduleTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._nextScheduleTime = newValue}
  }
  /// Returns true if `nextScheduleTime` has been explicitly set.
  public var hasNextScheduleTime: Bool {return _storage._nextScheduleTime != nil}
  /// Clears the value of `nextScheduleTime`. Subsequent reads from it will return its default value.
  public mutating func clearNextScheduleTime() {_uniqueStorage()._nextScheduleTime = nil}

  /// Stats anomalies base folder path.
  public var statsAnomaliesBaseDirectory: Google_Cloud_Aiplatform_V1_GcsDestination {
    get {return _storage._statsAnomaliesBaseDirectory ?? Google_Cloud_Aiplatform_V1_GcsDestination()}
    set {_uniqueStorage()._statsAnomaliesBaseDirectory = newValue}
  }
  /// Returns true if `statsAnomaliesBaseDirectory` has been explicitly set.
  public var hasStatsAnomaliesBaseDirectory: Bool {return _storage._statsAnomaliesBaseDirectory != nil}
  /// Clears the value of `statsAnomaliesBaseDirectory`. Subsequent reads from it will return its default value.
  public mutating func clearStatsAnomaliesBaseDirectory() {_uniqueStorage()._statsAnomaliesBaseDirectory = nil}

  /// Customer-managed encryption key spec for a ModelDeploymentMonitoringJob. If
  /// set, this ModelDeploymentMonitoringJob and all sub-resources of this
  /// ModelDeploymentMonitoringJob will be secured by this key.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _storage._encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_uniqueStorage()._encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return _storage._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {_uniqueStorage()._encryptionSpec = nil}

  /// If true, the scheduled monitoring pipeline logs are sent to
  /// Google Cloud Logging, including pipeline status and anomalies detected.
  /// Please note the logs incur cost, which are subject to [Cloud Logging
  /// pricing](https://cloud.google.com/logging#pricing).
  public var enableMonitoringPipelineLogs: Bool {
    get {return _storage._enableMonitoringPipelineLogs}
    set {_uniqueStorage()._enableMonitoringPipelineLogs = newValue}
  }

  /// Output only. Only populated when the job's state is `JOB_STATE_FAILED` or
  /// `JOB_STATE_CANCELLED`.
  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool {
    get {return _storage._satisfiesPzs}
    set {_uniqueStorage()._satisfiesPzs = newValue}
  }

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool {
    get {return _storage._satisfiesPzi}
    set {_uniqueStorage()._satisfiesPzi = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The state to Specify the monitoring pipeline.
  public enum MonitoringScheduleState: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Unspecified state.
    case unspecified // = 0

    /// The pipeline is picked up and wait to run.
    case pending // = 1

    /// The pipeline is offline and will be scheduled for next run.
    case offline // = 2

    /// The pipeline is running.
    case running // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .offline
      case 3: self = .running
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .offline: return 2
      case .running: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.MonitoringScheduleState] = [
      .unspecified,
      .pending,
      .offline,
      .running,
    ]

  }

  /// All metadata of most recent monitoring pipelines.
  public struct LatestMonitoringPipelineMetadata: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The time that most recent monitoring pipelines that is related to this
    /// run.
    public var runTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _runTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_runTime = newValue}
    }
    /// Returns true if `runTime` has been explicitly set.
    public var hasRunTime: Bool {return self._runTime != nil}
    /// Clears the value of `runTime`. Subsequent reads from it will return its default value.
    public mutating func clearRunTime() {self._runTime = nil}

    /// The status of the most recent monitoring pipeline.
    public var status: Google_Rpc_Status {
      get {return _status ?? Google_Rpc_Status()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _runTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _status: Google_Rpc_Status? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ModelDeploymentMonitoringBigQueryTable specifies the BigQuery table name
/// as well as some information of the logs stored in this table.
public struct Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The source of log.
  public var logSource: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogSource = .unspecified

  /// The type of log.
  public var logType: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogType = .unspecified

  /// The created BigQuery table to store logs. Customer could do their own query
  /// & analysis. Format:
  /// `bq://<project_id>.model_deployment_monitoring_<endpoint_id>.<tolower(log_source)>_<tolower(log_type)>`
  public var bigqueryTablePath: String = String()

  /// Output only. The schema version of the request/response logging BigQuery
  /// table. Default to v1 if unset.
  public var requestResponseLoggingSchemaVersion: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Indicates where does the log come from.
  public enum LogSource: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Unspecified source.
    case unspecified // = 0

    /// Logs coming from Training dataset.
    case training // = 1

    /// Logs coming from Serving traffic.
    case serving // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .training
      case 2: self = .serving
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .training: return 1
      case .serving: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogSource] = [
      .unspecified,
      .training,
      .serving,
    ]

  }

  /// Indicates what type of traffic does the log belong to.
  public enum LogType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Unspecified type.
    case unspecified // = 0

    /// Predict logs.
    case predict // = 1

    /// Explain logs.
    case explain // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .predict
      case 2: self = .explain
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .predict: return 1
      case .explain: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogType] = [
      .unspecified,
      .predict,
      .explain,
    ]

  }

  public init() {}
}

/// ModelDeploymentMonitoringObjectiveConfig contains the pair of
/// deployed_model_id to ModelMonitoringObjectiveConfig.
public struct Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The DeployedModel ID of the objective config.
  public var deployedModelID: String = String()

  /// The objective config of for the modelmonitoring job of this deployed model.
  public var objectiveConfig: Google_Cloud_Aiplatform_V1_ModelMonitoringObjectiveConfig {
    get {return _objectiveConfig ?? Google_Cloud_Aiplatform_V1_ModelMonitoringObjectiveConfig()}
    set {_objectiveConfig = newValue}
  }
  /// Returns true if `objectiveConfig` has been explicitly set.
  public var hasObjectiveConfig: Bool {return self._objectiveConfig != nil}
  /// Clears the value of `objectiveConfig`. Subsequent reads from it will return its default value.
  public mutating func clearObjectiveConfig() {self._objectiveConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _objectiveConfig: Google_Cloud_Aiplatform_V1_ModelMonitoringObjectiveConfig? = nil
}

/// The config for scheduling monitoring job.
public struct Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The model monitoring job scheduling interval. It will be rounded
  /// up to next full hour. This defines how often the monitoring jobs are
  /// triggered.
  public var monitorInterval: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _monitorInterval ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_monitorInterval = newValue}
  }
  /// Returns true if `monitorInterval` has been explicitly set.
  public var hasMonitorInterval: Bool {return self._monitorInterval != nil}
  /// Clears the value of `monitorInterval`. Subsequent reads from it will return its default value.
  public mutating func clearMonitorInterval() {self._monitorInterval = nil}

  /// The time window of the prediction data being included in each prediction
  /// dataset. This window specifies how long the data should be collected from
  /// historical model results for each run. If not set,
  /// [ModelDeploymentMonitoringScheduleConfig.monitor_interval][google.cloud.aiplatform.v1.ModelDeploymentMonitoringScheduleConfig.monitor_interval]
  /// will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and
  /// the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to
  /// 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the
  /// monitoring statistics.
  public var monitorWindow: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _monitorWindow ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_monitorWindow = newValue}
  }
  /// Returns true if `monitorWindow` has been explicitly set.
  public var hasMonitorWindow: Bool {return self._monitorWindow != nil}
  /// Clears the value of `monitorWindow`. Subsequent reads from it will return its default value.
  public mutating func clearMonitorWindow() {self._monitorWindow = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _monitorInterval: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _monitorWindow: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// Statistics and anomalies generated by Model Monitoring.
public struct Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Model Monitoring Objective those stats and anomalies belonging to.
  public var objective: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveType = .unspecified

  /// Deployed Model ID.
  public var deployedModelID: String = String()

  /// Number of anomalies within all stats.
  public var anomalyCount: Int32 = 0

  /// A list of historical Stats and Anomalies generated for all Features.
  public var featureStats: [Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Historical Stats (and Anomalies) for a specific Feature.
  public struct FeatureHistoricStatsAnomalies: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Display Name of the Feature.
    public var featureDisplayName: String = String()

    /// Threshold for anomaly detection.
    public var threshold: Google_Cloud_Aiplatform_V1_ThresholdConfig {
      get {return _threshold ?? Google_Cloud_Aiplatform_V1_ThresholdConfig()}
      set {_threshold = newValue}
    }
    /// Returns true if `threshold` has been explicitly set.
    public var hasThreshold: Bool {return self._threshold != nil}
    /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
    public mutating func clearThreshold() {self._threshold = nil}

    /// Stats calculated for the Training Dataset.
    public var trainingStats: Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly {
      get {return _trainingStats ?? Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly()}
      set {_trainingStats = newValue}
    }
    /// Returns true if `trainingStats` has been explicitly set.
    public var hasTrainingStats: Bool {return self._trainingStats != nil}
    /// Clears the value of `trainingStats`. Subsequent reads from it will return its default value.
    public mutating func clearTrainingStats() {self._trainingStats = nil}

    /// A list of historical stats generated by different time window's
    /// Prediction Dataset.
    public var predictionStats: [Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _threshold: Google_Cloud_Aiplatform_V1_ThresholdConfig? = nil
    fileprivate var _trainingStats: Google_Cloud_Aiplatform_V1_FeatureStatsAnomaly? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED"),
    1: .same(proto: "RAW_FEATURE_SKEW"),
    2: .same(proto: "RAW_FEATURE_DRIFT"),
    3: .same(proto: "FEATURE_ATTRIBUTION_SKEW"),
    4: .same(proto: "FEATURE_ATTRIBUTION_DRIFT"),
  ]
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelDeploymentMonitoringJob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "endpoint"),
    4: .same(proto: "state"),
    5: .standard(proto: "schedule_state"),
    25: .standard(proto: "latest_monitoring_pipeline_metadata"),
    6: .standard(proto: "model_deployment_monitoring_objective_configs"),
    7: .standard(proto: "model_deployment_monitoring_schedule_config"),
    8: .standard(proto: "logging_sampling_strategy"),
    15: .standard(proto: "model_monitoring_alert_config"),
    9: .standard(proto: "predict_instance_schema_uri"),
    19: .standard(proto: "sample_predict_instance"),
    16: .standard(proto: "analysis_instance_schema_uri"),
    10: .standard(proto: "bigquery_tables"),
    17: .standard(proto: "log_ttl"),
    11: .same(proto: "labels"),
    12: .standard(proto: "create_time"),
    13: .standard(proto: "update_time"),
    14: .standard(proto: "next_schedule_time"),
    20: .standard(proto: "stats_anomalies_base_directory"),
    21: .standard(proto: "encryption_spec"),
    22: .standard(proto: "enable_monitoring_pipeline_logs"),
    23: .same(proto: "error"),
    26: .standard(proto: "satisfies_pzs"),
    27: .standard(proto: "satisfies_pzi"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _endpoint: String = String()
    var _state: Google_Cloud_Aiplatform_V1_JobState = .unspecified
    var _scheduleState: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.MonitoringScheduleState = .unspecified
    var _latestMonitoringPipelineMetadata: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata? = nil
    var _modelDeploymentMonitoringObjectiveConfigs: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig] = []
    var _modelDeploymentMonitoringScheduleConfig: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig? = nil
    var _loggingSamplingStrategy: Google_Cloud_Aiplatform_V1_SamplingStrategy? = nil
    var _modelMonitoringAlertConfig: Google_Cloud_Aiplatform_V1_ModelMonitoringAlertConfig? = nil
    var _predictInstanceSchemaUri: String = String()
    var _samplePredictInstance: SwiftProtobuf.Google_Protobuf_Value? = nil
    var _analysisInstanceSchemaUri: String = String()
    var _bigqueryTables: [Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable] = []
    var _logTtl: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _labels: Dictionary<String,String> = [:]
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _nextScheduleTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _statsAnomaliesBaseDirectory: Google_Cloud_Aiplatform_V1_GcsDestination? = nil
    var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil
    var _enableMonitoringPipelineLogs: Bool = false
    var _error: Google_Rpc_Status? = nil
    var _satisfiesPzs: Bool = false
    var _satisfiesPzi: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _endpoint = source._endpoint
      _state = source._state
      _scheduleState = source._scheduleState
      _latestMonitoringPipelineMetadata = source._latestMonitoringPipelineMetadata
      _modelDeploymentMonitoringObjectiveConfigs = source._modelDeploymentMonitoringObjectiveConfigs
      _modelDeploymentMonitoringScheduleConfig = source._modelDeploymentMonitoringScheduleConfig
      _loggingSamplingStrategy = source._loggingSamplingStrategy
      _modelMonitoringAlertConfig = source._modelMonitoringAlertConfig
      _predictInstanceSchemaUri = source._predictInstanceSchemaUri
      _samplePredictInstance = source._samplePredictInstance
      _analysisInstanceSchemaUri = source._analysisInstanceSchemaUri
      _bigqueryTables = source._bigqueryTables
      _logTtl = source._logTtl
      _labels = source._labels
      _createTime = source._createTime
      _updateTime = source._updateTime
      _nextScheduleTime = source._nextScheduleTime
      _statsAnomaliesBaseDirectory = source._statsAnomaliesBaseDirectory
      _encryptionSpec = source._encryptionSpec
      _enableMonitoringPipelineLogs = source._enableMonitoringPipelineLogs
      _error = source._error
      _satisfiesPzs = source._satisfiesPzs
      _satisfiesPzi = source._satisfiesPzi
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._endpoint) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._scheduleState) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._modelDeploymentMonitoringObjectiveConfigs) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._modelDeploymentMonitoringScheduleConfig) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._loggingSamplingStrategy) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._predictInstanceSchemaUri) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._bigqueryTables) }()
        case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._nextScheduleTime) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._modelMonitoringAlertConfig) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._analysisInstanceSchemaUri) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._logTtl) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._samplePredictInstance) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._statsAnomaliesBaseDirectory) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._encryptionSpec) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._enableMonitoringPipelineLogs) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._error) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._latestMonitoringPipelineMetadata) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzs) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzi) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if !_storage._endpoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endpoint, fieldNumber: 3)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 4)
      }
      if _storage._scheduleState != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._scheduleState, fieldNumber: 5)
      }
      if !_storage._modelDeploymentMonitoringObjectiveConfigs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._modelDeploymentMonitoringObjectiveConfigs, fieldNumber: 6)
      }
      try { if let v = _storage._modelDeploymentMonitoringScheduleConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._loggingSamplingStrategy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._predictInstanceSchemaUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._predictInstanceSchemaUri, fieldNumber: 9)
      }
      if !_storage._bigqueryTables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bigqueryTables, fieldNumber: 10)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 11)
      }
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._nextScheduleTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._modelMonitoringAlertConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._analysisInstanceSchemaUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._analysisInstanceSchemaUri, fieldNumber: 16)
      }
      try { if let v = _storage._logTtl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._samplePredictInstance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._statsAnomaliesBaseDirectory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._encryptionSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._enableMonitoringPipelineLogs != false {
        try visitor.visitSingularBoolField(value: _storage._enableMonitoringPipelineLogs, fieldNumber: 22)
      }
      try { if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._latestMonitoringPipelineMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      if _storage._satisfiesPzs != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzs, fieldNumber: 26)
      }
      if _storage._satisfiesPzi != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzi, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob, rhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._endpoint != rhs_storage._endpoint {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._scheduleState != rhs_storage._scheduleState {return false}
        if _storage._latestMonitoringPipelineMetadata != rhs_storage._latestMonitoringPipelineMetadata {return false}
        if _storage._modelDeploymentMonitoringObjectiveConfigs != rhs_storage._modelDeploymentMonitoringObjectiveConfigs {return false}
        if _storage._modelDeploymentMonitoringScheduleConfig != rhs_storage._modelDeploymentMonitoringScheduleConfig {return false}
        if _storage._loggingSamplingStrategy != rhs_storage._loggingSamplingStrategy {return false}
        if _storage._modelMonitoringAlertConfig != rhs_storage._modelMonitoringAlertConfig {return false}
        if _storage._predictInstanceSchemaUri != rhs_storage._predictInstanceSchemaUri {return false}
        if _storage._samplePredictInstance != rhs_storage._samplePredictInstance {return false}
        if _storage._analysisInstanceSchemaUri != rhs_storage._analysisInstanceSchemaUri {return false}
        if _storage._bigqueryTables != rhs_storage._bigqueryTables {return false}
        if _storage._logTtl != rhs_storage._logTtl {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._nextScheduleTime != rhs_storage._nextScheduleTime {return false}
        if _storage._statsAnomaliesBaseDirectory != rhs_storage._statsAnomaliesBaseDirectory {return false}
        if _storage._encryptionSpec != rhs_storage._encryptionSpec {return false}
        if _storage._enableMonitoringPipelineLogs != rhs_storage._enableMonitoringPipelineLogs {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._satisfiesPzs != rhs_storage._satisfiesPzs {return false}
        if _storage._satisfiesPzi != rhs_storage._satisfiesPzi {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.MonitoringScheduleState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MONITORING_SCHEDULE_STATE_UNSPECIFIED"),
    1: .same(proto: "PENDING"),
    2: .same(proto: "OFFLINE"),
    3: .same(proto: "RUNNING"),
  ]
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.protoMessageName + ".LatestMonitoringPipelineMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "run_time"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._runTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._runTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata, rhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringJob.LatestMonitoringPipelineMetadata) -> Bool {
    if lhs._runTime != rhs._runTime {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelDeploymentMonitoringBigQueryTable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "log_source"),
    2: .standard(proto: "log_type"),
    3: .standard(proto: "bigquery_table_path"),
    4: .standard(proto: "request_response_logging_schema_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.logSource) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.logType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.bigqueryTablePath) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.requestResponseLoggingSchemaVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.logSource != .unspecified {
      try visitor.visitSingularEnumField(value: self.logSource, fieldNumber: 1)
    }
    if self.logType != .unspecified {
      try visitor.visitSingularEnumField(value: self.logType, fieldNumber: 2)
    }
    if !self.bigqueryTablePath.isEmpty {
      try visitor.visitSingularStringField(value: self.bigqueryTablePath, fieldNumber: 3)
    }
    if !self.requestResponseLoggingSchemaVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.requestResponseLoggingSchemaVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable, rhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable) -> Bool {
    if lhs.logSource != rhs.logSource {return false}
    if lhs.logType != rhs.logType {return false}
    if lhs.bigqueryTablePath != rhs.bigqueryTablePath {return false}
    if lhs.requestResponseLoggingSchemaVersion != rhs.requestResponseLoggingSchemaVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_SOURCE_UNSPECIFIED"),
    1: .same(proto: "TRAINING"),
    2: .same(proto: "SERVING"),
  ]
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringBigQueryTable.LogType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_TYPE_UNSPECIFIED"),
    1: .same(proto: "PREDICT"),
    2: .same(proto: "EXPLAIN"),
  ]
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelDeploymentMonitoringObjectiveConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deployed_model_id"),
    2: .standard(proto: "objective_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deployedModelID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._objectiveConfig) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.deployedModelID.isEmpty {
      try visitor.visitSingularStringField(value: self.deployedModelID, fieldNumber: 1)
    }
    try { if let v = self._objectiveConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig, rhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringObjectiveConfig) -> Bool {
    if lhs.deployedModelID != rhs.deployedModelID {return false}
    if lhs._objectiveConfig != rhs._objectiveConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelDeploymentMonitoringScheduleConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "monitor_interval"),
    2: .standard(proto: "monitor_window"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._monitorInterval) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._monitorWindow) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._monitorInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._monitorWindow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig, rhs: Google_Cloud_Aiplatform_V1_ModelDeploymentMonitoringScheduleConfig) -> Bool {
    if lhs._monitorInterval != rhs._monitorInterval {return false}
    if lhs._monitorWindow != rhs._monitorWindow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelMonitoringStatsAnomalies"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "objective"),
    2: .standard(proto: "deployed_model_id"),
    3: .standard(proto: "anomaly_count"),
    4: .standard(proto: "feature_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.objective) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deployedModelID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.anomalyCount) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.featureStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.objective != .unspecified {
      try visitor.visitSingularEnumField(value: self.objective, fieldNumber: 1)
    }
    if !self.deployedModelID.isEmpty {
      try visitor.visitSingularStringField(value: self.deployedModelID, fieldNumber: 2)
    }
    if self.anomalyCount != 0 {
      try visitor.visitSingularInt32Field(value: self.anomalyCount, fieldNumber: 3)
    }
    if !self.featureStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featureStats, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies, rhs: Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies) -> Bool {
    if lhs.objective != rhs.objective {return false}
    if lhs.deployedModelID != rhs.deployedModelID {return false}
    if lhs.anomalyCount != rhs.anomalyCount {return false}
    if lhs.featureStats != rhs.featureStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies.protoMessageName + ".FeatureHistoricStatsAnomalies"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feature_display_name"),
    3: .same(proto: "threshold"),
    4: .standard(proto: "training_stats"),
    5: .standard(proto: "prediction_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.featureDisplayName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._threshold) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._trainingStats) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.predictionStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.featureDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.featureDisplayName, fieldNumber: 1)
    }
    try { if let v = self._threshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._trainingStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.predictionStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.predictionStats, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies, rhs: Google_Cloud_Aiplatform_V1_ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies) -> Bool {
    if lhs.featureDisplayName != rhs.featureDisplayName {return false}
    if lhs._threshold != rhs._threshold {return false}
    if lhs._trainingStats != rhs._trainingStats {return false}
    if lhs.predictionStats != rhs.predictionStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
