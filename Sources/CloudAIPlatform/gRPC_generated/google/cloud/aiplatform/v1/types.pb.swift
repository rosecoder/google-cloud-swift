// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A list of boolean values.
public struct Google_Cloud_Aiplatform_V1_BoolArray: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of bool values.
  public var values: [Bool] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A list of double values.
public struct Google_Cloud_Aiplatform_V1_DoubleArray: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of double values.
  public var values: [Double] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A list of int64 values.
public struct Google_Cloud_Aiplatform_V1_Int64Array: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of int64 values.
  public var values: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A list of string values.
public struct Google_Cloud_Aiplatform_V1_StringArray: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of string values.
  public var values: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A tensor value type.
public struct Google_Cloud_Aiplatform_V1_Tensor: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The data type of tensor.
  public var dtype: Google_Cloud_Aiplatform_V1_Tensor.DataType = .unspecified

  /// Shape of the tensor.
  public var shape: [Int64] = []

  /// Type specific representations that make it easy to create tensor protos in
  /// all languages.  Only the representation corresponding to "dtype" can
  /// be set.  The values hold the flattened representation of the tensor in
  /// row major order.
  ///
  /// [BOOL][google.aiplatform.master.Tensor.DataType.BOOL]
  public var boolVal: [Bool] = []

  /// [STRING][google.aiplatform.master.Tensor.DataType.STRING]
  public var stringVal: [String] = []

  /// [STRING][google.aiplatform.master.Tensor.DataType.STRING]
  public var bytesVal: [Data] = []

  /// [FLOAT][google.aiplatform.master.Tensor.DataType.FLOAT]
  public var floatVal: [Float] = []

  /// [DOUBLE][google.aiplatform.master.Tensor.DataType.DOUBLE]
  public var doubleVal: [Double] = []

  /// [INT_8][google.aiplatform.master.Tensor.DataType.INT8]
  /// [INT_16][google.aiplatform.master.Tensor.DataType.INT16]
  /// [INT_32][google.aiplatform.master.Tensor.DataType.INT32]
  public var intVal: [Int32] = []

  /// [INT64][google.aiplatform.master.Tensor.DataType.INT64]
  public var int64Val: [Int64] = []

  /// [UINT8][google.aiplatform.master.Tensor.DataType.UINT8]
  /// [UINT16][google.aiplatform.master.Tensor.DataType.UINT16]
  /// [UINT32][google.aiplatform.master.Tensor.DataType.UINT32]
  public var uintVal: [UInt32] = []

  /// [UINT64][google.aiplatform.master.Tensor.DataType.UINT64]
  public var uint64Val: [UInt64] = []

  /// A list of tensor values.
  public var listVal: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// A map of string to tensor.
  public var structVal: Dictionary<String,Google_Cloud_Aiplatform_V1_Tensor> = [:]

  /// Serialized raw tensor content.
  public var tensorVal: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Data type of the tensor.
  public enum DataType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Not a legal value for DataType. Used to indicate a DataType field has not
    /// been set.
    case unspecified // = 0

    /// Data types that all computation devices are expected to be
    /// capable to support.
    case bool // = 1
    case string // = 2
    case float // = 3
    case double // = 4
    case int8 // = 5
    case int16 // = 6
    case int32 // = 7
    case int64 // = 8
    case uint8 // = 9
    case uint16 // = 10
    case uint32 // = 11
    case uint64 // = 12
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .bool
      case 2: self = .string
      case 3: self = .float
      case 4: self = .double
      case 5: self = .int8
      case 6: self = .int16
      case 7: self = .int32
      case 8: self = .int64
      case 9: self = .uint8
      case 10: self = .uint16
      case 11: self = .uint32
      case 12: self = .uint64
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .bool: return 1
      case .string: return 2
      case .float: return 3
      case .double: return 4
      case .int8: return 5
      case .int16: return 6
      case .int32: return 7
      case .int64: return 8
      case .uint8: return 9
      case .uint16: return 10
      case .uint32: return 11
      case .uint64: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_Tensor.DataType] = [
      .unspecified,
      .bool,
      .string,
      .float,
      .double,
      .int8,
      .int16,
      .int32,
      .int64,
      .uint8,
      .uint16,
      .uint32,
      .uint64,
    ]

  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_BoolArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoolArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBoolField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedBoolField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_BoolArray, rhs: Google_Cloud_Aiplatform_V1_BoolArray) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DoubleArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DoubleArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedDoubleField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedDoubleField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DoubleArray, rhs: Google_Cloud_Aiplatform_V1_DoubleArray) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Int64Array: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Int64Array"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitPackedInt64Field(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Int64Array, rhs: Google_Cloud_Aiplatform_V1_Int64Array) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StringArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StringArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StringArray, rhs: Google_Cloud_Aiplatform_V1_StringArray) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Tensor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tensor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dtype"),
    2: .same(proto: "shape"),
    3: .standard(proto: "bool_val"),
    14: .standard(proto: "string_val"),
    15: .standard(proto: "bytes_val"),
    5: .standard(proto: "float_val"),
    6: .standard(proto: "double_val"),
    7: .standard(proto: "int_val"),
    8: .standard(proto: "int64_val"),
    9: .standard(proto: "uint_val"),
    10: .standard(proto: "uint64_val"),
    11: .standard(proto: "list_val"),
    12: .standard(proto: "struct_val"),
    13: .standard(proto: "tensor_val"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.dtype) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.shape) }()
      case 3: try { try decoder.decodeRepeatedBoolField(value: &self.boolVal) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.floatVal) }()
      case 6: try { try decoder.decodeRepeatedDoubleField(value: &self.doubleVal) }()
      case 7: try { try decoder.decodeRepeatedInt32Field(value: &self.intVal) }()
      case 8: try { try decoder.decodeRepeatedInt64Field(value: &self.int64Val) }()
      case 9: try { try decoder.decodeRepeatedUInt32Field(value: &self.uintVal) }()
      case 10: try { try decoder.decodeRepeatedUInt64Field(value: &self.uint64Val) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.listVal) }()
      case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_Tensor>.self, value: &self.structVal) }()
      case 13: try { try decoder.decodeSingularBytesField(value: &self.tensorVal) }()
      case 14: try { try decoder.decodeRepeatedStringField(value: &self.stringVal) }()
      case 15: try { try decoder.decodeRepeatedBytesField(value: &self.bytesVal) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dtype != .unspecified {
      try visitor.visitSingularEnumField(value: self.dtype, fieldNumber: 1)
    }
    if !self.shape.isEmpty {
      try visitor.visitPackedInt64Field(value: self.shape, fieldNumber: 2)
    }
    if !self.boolVal.isEmpty {
      try visitor.visitPackedBoolField(value: self.boolVal, fieldNumber: 3)
    }
    if !self.floatVal.isEmpty {
      try visitor.visitPackedFloatField(value: self.floatVal, fieldNumber: 5)
    }
    if !self.doubleVal.isEmpty {
      try visitor.visitPackedDoubleField(value: self.doubleVal, fieldNumber: 6)
    }
    if !self.intVal.isEmpty {
      try visitor.visitPackedInt32Field(value: self.intVal, fieldNumber: 7)
    }
    if !self.int64Val.isEmpty {
      try visitor.visitPackedInt64Field(value: self.int64Val, fieldNumber: 8)
    }
    if !self.uintVal.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.uintVal, fieldNumber: 9)
    }
    if !self.uint64Val.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.uint64Val, fieldNumber: 10)
    }
    if !self.listVal.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listVal, fieldNumber: 11)
    }
    if !self.structVal.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_Tensor>.self, value: self.structVal, fieldNumber: 12)
    }
    if !self.tensorVal.isEmpty {
      try visitor.visitSingularBytesField(value: self.tensorVal, fieldNumber: 13)
    }
    if !self.stringVal.isEmpty {
      try visitor.visitRepeatedStringField(value: self.stringVal, fieldNumber: 14)
    }
    if !self.bytesVal.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.bytesVal, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Tensor, rhs: Google_Cloud_Aiplatform_V1_Tensor) -> Bool {
    if lhs.dtype != rhs.dtype {return false}
    if lhs.shape != rhs.shape {return false}
    if lhs.boolVal != rhs.boolVal {return false}
    if lhs.stringVal != rhs.stringVal {return false}
    if lhs.bytesVal != rhs.bytesVal {return false}
    if lhs.floatVal != rhs.floatVal {return false}
    if lhs.doubleVal != rhs.doubleVal {return false}
    if lhs.intVal != rhs.intVal {return false}
    if lhs.int64Val != rhs.int64Val {return false}
    if lhs.uintVal != rhs.uintVal {return false}
    if lhs.uint64Val != rhs.uint64Val {return false}
    if lhs.listVal != rhs.listVal {return false}
    if lhs.structVal != rhs.structVal {return false}
    if lhs.tensorVal != rhs.tensorVal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Tensor.DataType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_TYPE_UNSPECIFIED"),
    1: .same(proto: "BOOL"),
    2: .same(proto: "STRING"),
    3: .same(proto: "FLOAT"),
    4: .same(proto: "DOUBLE"),
    5: .same(proto: "INT8"),
    6: .same(proto: "INT16"),
    7: .same(proto: "INT32"),
    8: .same(proto: "INT64"),
    9: .same(proto: "UINT8"),
    10: .same(proto: "UINT16"),
    11: .same(proto: "UINT32"),
    12: .same(proto: "UINT64"),
  ]
}
