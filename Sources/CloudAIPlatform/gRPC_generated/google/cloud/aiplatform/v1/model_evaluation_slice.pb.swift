// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/model_evaluation_slice.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A collection of metrics calculated by comparing Model's predictions on a
/// slice of the test data against ground truth annotations.
public struct Google_Cloud_Aiplatform_V1_ModelEvaluationSlice: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. The resource name of the ModelEvaluationSlice.
  public var name: String = String()

  /// Output only. The slice of the test data that is used to evaluate the Model.
  public var slice: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice {
    get {return _slice ?? Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice()}
    set {_slice = newValue}
  }
  /// Returns true if `slice` has been explicitly set.
  public var hasSlice: Bool {return self._slice != nil}
  /// Clears the value of `slice`. Subsequent reads from it will return its default value.
  public mutating func clearSlice() {self._slice = nil}

  /// Output only. Points to a YAML file stored on Google Cloud Storage
  /// describing the
  /// [metrics][google.cloud.aiplatform.v1.ModelEvaluationSlice.metrics] of this
  /// ModelEvaluationSlice. The schema is defined as an OpenAPI 3.0.2 [Schema
  /// Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
  public var metricsSchemaUri: String = String()

  /// Output only. Sliced evaluation metrics of the Model. The schema of the
  /// metrics is stored in
  /// [metrics_schema_uri][google.cloud.aiplatform.v1.ModelEvaluationSlice.metrics_schema_uri]
  public var metrics: SwiftProtobuf.Google_Protobuf_Value {
    get {return _metrics ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  public var hasMetrics: Bool {return self._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  public mutating func clearMetrics() {self._metrics = nil}

  /// Output only. Timestamp when this ModelEvaluationSlice was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Aggregated explanation metrics for the Model's prediction
  /// output over the data this ModelEvaluation uses. This field is populated
  /// only if the Model is evaluated with explanations, and only for tabular
  /// Models.
  public var modelExplanation: Google_Cloud_Aiplatform_V1_ModelExplanation {
    get {return _modelExplanation ?? Google_Cloud_Aiplatform_V1_ModelExplanation()}
    set {_modelExplanation = newValue}
  }
  /// Returns true if `modelExplanation` has been explicitly set.
  public var hasModelExplanation: Bool {return self._modelExplanation != nil}
  /// Clears the value of `modelExplanation`. Subsequent reads from it will return its default value.
  public mutating func clearModelExplanation() {self._modelExplanation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Definition of a slice.
  public struct Slice: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. The dimension of the slice.
    /// Well-known dimensions are:
    ///   * `annotationSpec`: This slice is on the test data that has either
    ///     ground truth or prediction with
    ///     [AnnotationSpec.display_name][google.cloud.aiplatform.v1.AnnotationSpec.display_name]
    ///     equals to
    ///     [value][google.cloud.aiplatform.v1.ModelEvaluationSlice.Slice.value].
    ///   * `slice`: This slice is a user customized slice defined by its
    ///     SliceSpec.
    public var dimension: String = String()

    /// Output only. The value of the dimension in this slice.
    public var value: String = String()

    /// Output only. Specification for how the data was sliced.
    public var sliceSpec: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec {
      get {return _sliceSpec ?? Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec()}
      set {_sliceSpec = newValue}
    }
    /// Returns true if `sliceSpec` has been explicitly set.
    public var hasSliceSpec: Bool {return self._sliceSpec != nil}
    /// Clears the value of `sliceSpec`. Subsequent reads from it will return its default value.
    public mutating func clearSliceSpec() {self._sliceSpec = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specification for how the data should be sliced.
    public struct SliceSpec: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Mapping configuration for this SliceSpec.
      /// The key is the name of the feature.
      /// By default, the key will be prefixed by "instance" as a dictionary
      /// prefix for Vertex Batch Predictions output format.
      public var configs: Dictionary<String,Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig> = [:]

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Specification message containing the config for this SliceSpec.
      /// When `kind` is selected as `value` and/or `range`, only a single slice
      /// will be computed.
      /// When `all_values` is present, a separate slice will be computed for
      /// each possible label/value for the corresponding key in `config`.
      /// Examples, with feature zip_code with values 12345, 23334, 88888 and
      /// feature country with values "US", "Canada", "Mexico" in the dataset:
      ///
      /// Example 1:
      ///
      ///     {
      ///       "zip_code": { "value": { "float_value": 12345.0 } }
      ///     }
      ///
      /// A single slice for any data with zip_code 12345 in the dataset.
      ///
      /// Example 2:
      ///
      ///     {
      ///       "zip_code": { "range": { "low": 12345, "high": 20000 } }
      ///     }
      ///
      /// A single slice containing data where the zip_codes between 12345 and
      /// 20000 For this example, data with the zip_code of 12345 will be in this
      /// slice.
      ///
      /// Example 3:
      ///
      ///     {
      ///       "zip_code": { "range": { "low": 10000, "high": 20000 } },
      ///       "country": { "value": { "string_value": "US" } }
      ///     }
      ///
      /// A single slice containing data where the zip_codes between 10000 and
      /// 20000 has the country "US". For this example, data with the zip_code of
      /// 12345 and country "US" will be in this slice.
      ///
      /// Example 4:
      ///
      ///     { "country": {"all_values": { "value": true } } }
      ///
      /// Three slices are computed, one for each unique country in the dataset.
      ///
      /// Example 5:
      ///
      ///     {
      ///       "country": { "all_values": { "value": true } },
      ///       "zip_code": { "value": { "float_value": 12345.0 } }
      ///     }
      ///
      /// Three slices are computed, one for each unique country in the dataset
      /// where the zip_code is also 12345. For this example, data with zip_code
      /// 12345 and country "US" will be in one slice, zip_code 12345 and country
      /// "Canada" in another slice, and zip_code 12345 and country "Mexico" in
      /// another slice, totaling 3 slices.
      public struct SliceConfig: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var kind: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig.OneOf_Kind? = nil

        /// A unique specific value for a given feature.
        /// Example: `{ "value": { "string_value": "12345" } }`
        public var value: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value {
          get {
            if case .value(let v)? = kind {return v}
            return Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value()
          }
          set {kind = .value(newValue)}
        }

        /// A range of values for a numerical feature.
        /// Example: `{"range":{"low":10000.0,"high":50000.0}}`
        /// will capture 12345 and 23334 in the slice.
        public var range: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range {
          get {
            if case .range(let v)? = kind {return v}
            return Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range()
          }
          set {kind = .range(newValue)}
        }

        /// If all_values is set to true, then all possible labels of the keyed
        /// feature will have another slice computed.
        /// Example: `{"all_values":{"value":true}}`
        public var allValues: SwiftProtobuf.Google_Protobuf_BoolValue {
          get {
            if case .allValues(let v)? = kind {return v}
            return SwiftProtobuf.Google_Protobuf_BoolValue()
          }
          set {kind = .allValues(newValue)}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Kind: Equatable, Sendable {
          /// A unique specific value for a given feature.
          /// Example: `{ "value": { "string_value": "12345" } }`
          case value(Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value)
          /// A range of values for a numerical feature.
          /// Example: `{"range":{"low":10000.0,"high":50000.0}}`
          /// will capture 12345 and 23334 in the slice.
          case range(Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range)
          /// If all_values is set to true, then all possible labels of the keyed
          /// feature will have another slice computed.
          /// Example: `{"all_values":{"value":true}}`
          case allValues(SwiftProtobuf.Google_Protobuf_BoolValue)

        }

        public init() {}
      }

      /// A range of values for slice(s).
      /// `low` is inclusive, `high` is exclusive.
      public struct Range: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Inclusive low value for the range.
        public var low: Float = 0

        /// Exclusive high value for the range.
        public var high: Float = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Single value that supports strings and floats.
      public struct Value: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var kind: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value.OneOf_Kind? = nil

        /// String type.
        public var stringValue: String {
          get {
            if case .stringValue(let v)? = kind {return v}
            return String()
          }
          set {kind = .stringValue(newValue)}
        }

        /// Float type.
        public var floatValue: Float {
          get {
            if case .floatValue(let v)? = kind {return v}
            return 0
          }
          set {kind = .floatValue(newValue)}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Kind: Equatable, Sendable {
          /// String type.
          case stringValue(String)
          /// Float type.
          case floatValue(Float)

        }

        public init() {}
      }

      public init() {}
    }

    public init() {}

    fileprivate var _sliceSpec: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec? = nil
  }

  public init() {}

  fileprivate var _slice: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice? = nil
  fileprivate var _metrics: SwiftProtobuf.Google_Protobuf_Value? = nil
  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _modelExplanation: Google_Cloud_Aiplatform_V1_ModelExplanation? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ModelEvaluationSlice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "slice"),
    3: .standard(proto: "metrics_schema_uri"),
    4: .same(proto: "metrics"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "model_explanation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._slice) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.metricsSchemaUri) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._metrics) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._modelExplanation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._slice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.metricsSchemaUri.isEmpty {
      try visitor.visitSingularStringField(value: self.metricsSchemaUri, fieldNumber: 3)
    }
    try { if let v = self._metrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._modelExplanation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._slice != rhs._slice {return false}
    if lhs.metricsSchemaUri != rhs.metricsSchemaUri {return false}
    if lhs._metrics != rhs._metrics {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._modelExplanation != rhs._modelExplanation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.protoMessageName + ".Slice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dimension"),
    2: .same(proto: "value"),
    3: .standard(proto: "slice_spec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dimension) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sliceSpec) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dimension.isEmpty {
      try visitor.visitSingularStringField(value: self.dimension, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try { if let v = self._sliceSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice) -> Bool {
    if lhs.dimension != rhs.dimension {return false}
    if lhs.value != rhs.value {return false}
    if lhs._sliceSpec != rhs._sliceSpec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.protoMessageName + ".SliceSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig>.self, value: &self.configs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig>.self, value: self.configs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec) -> Bool {
    if lhs.configs != rhs.configs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.protoMessageName + ".SliceConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "range"),
    3: .standard(proto: "all_values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .value(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .value(v)
        }
      }()
      case 2: try {
        var v: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .range(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .range(v)
        }
      }()
      case 3: try {
        var v: SwiftProtobuf.Google_Protobuf_BoolValue?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .allValues(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .allValues(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .value?: try {
      guard case .value(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .range?: try {
      guard case .range(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .allValues?: try {
      guard case .allValues(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.SliceConfig) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.protoMessageName + ".Range"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "low"),
    2: .same(proto: "high"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.low) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.high) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.low.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.low, fieldNumber: 1)
    }
    if self.high.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.high, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Range) -> Bool {
    if lhs.low != rhs.low {return false}
    if lhs.high != rhs.high {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.protoMessageName + ".Value"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "string_value"),
    2: .standard(proto: "float_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .stringValue(v)
        }
      }()
      case 2: try {
        var v: Float?
        try decoder.decodeSingularFloatField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .floatValue(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .stringValue?: try {
      guard case .stringValue(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .floatValue?: try {
      guard case .floatValue(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value, rhs: Google_Cloud_Aiplatform_V1_ModelEvaluationSlice.Slice.SliceSpec.Value) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
