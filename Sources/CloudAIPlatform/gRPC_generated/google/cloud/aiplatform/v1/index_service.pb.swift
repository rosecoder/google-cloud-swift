// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/index_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for
/// [IndexService.CreateIndex][google.cloud.aiplatform.v1.IndexService.CreateIndex].
public struct Google_Cloud_Aiplatform_V1_CreateIndexRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the Location to create the Index in.
  /// Format: `projects/{project}/locations/{location}`
  public var parent: String = String()

  /// Required. The Index to create.
  public var index: Google_Cloud_Aiplatform_V1_Index {
    get {return _index ?? Google_Cloud_Aiplatform_V1_Index()}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  public var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  public mutating func clearIndex() {self._index = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _index: Google_Cloud_Aiplatform_V1_Index? = nil
}

/// Runtime operation information for
/// [IndexService.CreateIndex][google.cloud.aiplatform.v1.IndexService.CreateIndex].
public struct Google_Cloud_Aiplatform_V1_CreateIndexOperationMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The operation generic information.
  public var genericMetadata: Google_Cloud_Aiplatform_V1_GenericOperationMetadata {
    get {return _genericMetadata ?? Google_Cloud_Aiplatform_V1_GenericOperationMetadata()}
    set {_genericMetadata = newValue}
  }
  /// Returns true if `genericMetadata` has been explicitly set.
  public var hasGenericMetadata: Bool {return self._genericMetadata != nil}
  /// Clears the value of `genericMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearGenericMetadata() {self._genericMetadata = nil}

  /// The operation metadata with regard to Matching Engine Index operation.
  public var nearestNeighborSearchOperationMetadata: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata {
    get {return _nearestNeighborSearchOperationMetadata ?? Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata()}
    set {_nearestNeighborSearchOperationMetadata = newValue}
  }
  /// Returns true if `nearestNeighborSearchOperationMetadata` has been explicitly set.
  public var hasNearestNeighborSearchOperationMetadata: Bool {return self._nearestNeighborSearchOperationMetadata != nil}
  /// Clears the value of `nearestNeighborSearchOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearNearestNeighborSearchOperationMetadata() {self._nearestNeighborSearchOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _genericMetadata: Google_Cloud_Aiplatform_V1_GenericOperationMetadata? = nil
  fileprivate var _nearestNeighborSearchOperationMetadata: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata? = nil
}

/// Request message for
/// [IndexService.GetIndex][google.cloud.aiplatform.v1.IndexService.GetIndex]
public struct Google_Cloud_Aiplatform_V1_GetIndexRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Index resource.
  /// Format:
  /// `projects/{project}/locations/{location}/indexes/{index}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [IndexService.ListIndexes][google.cloud.aiplatform.v1.IndexService.ListIndexes].
public struct Google_Cloud_Aiplatform_V1_ListIndexesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the Location from which to list the Indexes.
  /// Format: `projects/{project}/locations/{location}`
  public var parent: String = String()

  /// The standard list filter.
  public var filter: String = String()

  /// The standard list page size.
  public var pageSize: Int32 = 0

  /// The standard list page token.
  /// Typically obtained via
  /// [ListIndexesResponse.next_page_token][google.cloud.aiplatform.v1.ListIndexesResponse.next_page_token]
  /// of the previous
  /// [IndexService.ListIndexes][google.cloud.aiplatform.v1.IndexService.ListIndexes]
  /// call.
  public var pageToken: String = String()

  /// Mask specifying which fields to read.
  public var readMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _readMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_readMask = newValue}
  }
  /// Returns true if `readMask` has been explicitly set.
  public var hasReadMask: Bool {return self._readMask != nil}
  /// Clears the value of `readMask`. Subsequent reads from it will return its default value.
  public mutating func clearReadMask() {self._readMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Response message for
/// [IndexService.ListIndexes][google.cloud.aiplatform.v1.IndexService.ListIndexes].
public struct Google_Cloud_Aiplatform_V1_ListIndexesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of indexes in the requested page.
  public var indexes: [Google_Cloud_Aiplatform_V1_Index] = []

  /// A token to retrieve next page of results.
  /// Pass to
  /// [ListIndexesRequest.page_token][google.cloud.aiplatform.v1.ListIndexesRequest.page_token]
  /// to obtain that page.
  public var nextPageToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [IndexService.UpdateIndex][google.cloud.aiplatform.v1.IndexService.UpdateIndex].
public struct Google_Cloud_Aiplatform_V1_UpdateIndexRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The Index which updates the resource on the server.
  public var index: Google_Cloud_Aiplatform_V1_Index {
    get {return _index ?? Google_Cloud_Aiplatform_V1_Index()}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  public var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  public mutating func clearIndex() {self._index = nil}

  /// The update mask applies to the resource.
  /// For the `FieldMask` definition, see
  /// [google.protobuf.FieldMask][google.protobuf.FieldMask].
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _index: Google_Cloud_Aiplatform_V1_Index? = nil
  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Runtime operation information for
/// [IndexService.UpdateIndex][google.cloud.aiplatform.v1.IndexService.UpdateIndex].
public struct Google_Cloud_Aiplatform_V1_UpdateIndexOperationMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The operation generic information.
  public var genericMetadata: Google_Cloud_Aiplatform_V1_GenericOperationMetadata {
    get {return _genericMetadata ?? Google_Cloud_Aiplatform_V1_GenericOperationMetadata()}
    set {_genericMetadata = newValue}
  }
  /// Returns true if `genericMetadata` has been explicitly set.
  public var hasGenericMetadata: Bool {return self._genericMetadata != nil}
  /// Clears the value of `genericMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearGenericMetadata() {self._genericMetadata = nil}

  /// The operation metadata with regard to Matching Engine Index operation.
  public var nearestNeighborSearchOperationMetadata: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata {
    get {return _nearestNeighborSearchOperationMetadata ?? Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata()}
    set {_nearestNeighborSearchOperationMetadata = newValue}
  }
  /// Returns true if `nearestNeighborSearchOperationMetadata` has been explicitly set.
  public var hasNearestNeighborSearchOperationMetadata: Bool {return self._nearestNeighborSearchOperationMetadata != nil}
  /// Clears the value of `nearestNeighborSearchOperationMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearNearestNeighborSearchOperationMetadata() {self._nearestNeighborSearchOperationMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _genericMetadata: Google_Cloud_Aiplatform_V1_GenericOperationMetadata? = nil
  fileprivate var _nearestNeighborSearchOperationMetadata: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata? = nil
}

/// Request message for
/// [IndexService.DeleteIndex][google.cloud.aiplatform.v1.IndexService.DeleteIndex].
public struct Google_Cloud_Aiplatform_V1_DeleteIndexRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Index resource to be deleted.
  /// Format:
  /// `projects/{project}/locations/{location}/indexes/{index}`
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [IndexService.UpsertDatapoints][google.cloud.aiplatform.v1.IndexService.UpsertDatapoints]
public struct Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Index resource to be updated.
  /// Format:
  /// `projects/{project}/locations/{location}/indexes/{index}`
  public var index: String = String()

  /// A list of datapoints to be created/updated.
  public var datapoints: [Google_Cloud_Aiplatform_V1_IndexDatapoint] = []

  /// Optional. Update mask is used to specify the fields to be overwritten in
  /// the datapoints by the update. The fields specified in the update_mask are
  /// relative to each IndexDatapoint inside datapoints, not the full request.
  ///
  /// Updatable fields:
  ///
  ///   * Use `all_restricts` to update both restricts and numeric_restricts.
  public var updateMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _updateMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_updateMask = newValue}
  }
  /// Returns true if `updateMask` has been explicitly set.
  public var hasUpdateMask: Bool {return self._updateMask != nil}
  /// Clears the value of `updateMask`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateMask() {self._updateMask = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _updateMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

/// Response message for
/// [IndexService.UpsertDatapoints][google.cloud.aiplatform.v1.IndexService.UpsertDatapoints]
public struct Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [IndexService.RemoveDatapoints][google.cloud.aiplatform.v1.IndexService.RemoveDatapoints]
public struct Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Index resource to be updated.
  /// Format:
  /// `projects/{project}/locations/{location}/indexes/{index}`
  public var index: String = String()

  /// A list of datapoint ids to be deleted.
  public var datapointIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for
/// [IndexService.RemoveDatapoints][google.cloud.aiplatform.v1.IndexService.RemoveDatapoints]
public struct Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Runtime operation metadata with regard to Matching Engine Index.
public struct Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The validation stats of the content (per file) to be inserted or
  /// updated on the Matching Engine Index resource. Populated if
  /// contentsDeltaUri is provided as part of
  /// [Index.metadata][google.cloud.aiplatform.v1.Index.metadata]. Please note
  /// that, currently for those files that are broken or has unsupported file
  /// format, we will not have the stats for those files.
  public var contentValidationStats: [Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.ContentValidationStats] = []

  /// The ingested data size in bytes.
  public var dataBytesCount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct RecordError: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The error type of this record.
    public var errorType: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError.RecordErrorType = .errorTypeUnspecified

    /// A human-readable message that is shown to the user to help them fix the
    /// error. Note that this message may change from time to time, your code
    /// should check against error_type as the source of truth.
    public var errorMessage: String = String()

    /// Cloud Storage URI pointing to the original file in user's bucket.
    public var sourceGcsUri: String = String()

    /// Empty if the embedding id is failed to parse.
    public var embeddingID: String = String()

    /// The original content of this record.
    public var rawRecord: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum RecordErrorType: SwiftProtobuf.Enum, Swift.CaseIterable {
      public typealias RawValue = Int

      /// Default, shall not be used.
      case errorTypeUnspecified // = 0

      /// The record is empty.
      case emptyLine // = 1

      /// Invalid json format.
      case invalidJsonSyntax // = 2

      /// Invalid csv format.
      case invalidCsvSyntax // = 3

      /// Invalid avro format.
      case invalidAvroSyntax // = 4

      /// The embedding id is not valid.
      case invalidEmbeddingID // = 5

      /// The size of the dense embedding vectors does not match with the
      /// specified dimension.
      case embeddingSizeMismatch // = 6

      /// The `namespace` field is missing.
      case namespaceMissing // = 7

      /// Generic catch-all error. Only used for validation failure where the
      /// root cause cannot be easily retrieved programmatically.
      case parsingError // = 8

      /// There are multiple restricts with the same `namespace` value.
      case duplicateNamespace // = 9

      /// Numeric restrict has operator specified in datapoint.
      case opInDatapoint // = 10

      /// Numeric restrict has multiple values specified.
      case multipleValues // = 11

      /// Numeric restrict has invalid numeric value specified.
      case invalidNumericValue // = 12

      /// File is not in UTF_8 format.
      case invalidEncoding // = 13

      /// Error parsing sparse dimensions field.
      case invalidSparseDimensions // = 14

      /// Token restrict value is invalid.
      case invalidTokenValue // = 15

      /// Invalid sparse embedding.
      case invalidSparseEmbedding // = 16

      /// Invalid dense embedding.
      case invalidEmbedding // = 17
      case UNRECOGNIZED(Int)

      public init() {
        self = .errorTypeUnspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .errorTypeUnspecified
        case 1: self = .emptyLine
        case 2: self = .invalidJsonSyntax
        case 3: self = .invalidCsvSyntax
        case 4: self = .invalidAvroSyntax
        case 5: self = .invalidEmbeddingID
        case 6: self = .embeddingSizeMismatch
        case 7: self = .namespaceMissing
        case 8: self = .parsingError
        case 9: self = .duplicateNamespace
        case 10: self = .opInDatapoint
        case 11: self = .multipleValues
        case 12: self = .invalidNumericValue
        case 13: self = .invalidEncoding
        case 14: self = .invalidSparseDimensions
        case 15: self = .invalidTokenValue
        case 16: self = .invalidSparseEmbedding
        case 17: self = .invalidEmbedding
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .errorTypeUnspecified: return 0
        case .emptyLine: return 1
        case .invalidJsonSyntax: return 2
        case .invalidCsvSyntax: return 3
        case .invalidAvroSyntax: return 4
        case .invalidEmbeddingID: return 5
        case .embeddingSizeMismatch: return 6
        case .namespaceMissing: return 7
        case .parsingError: return 8
        case .duplicateNamespace: return 9
        case .opInDatapoint: return 10
        case .multipleValues: return 11
        case .invalidNumericValue: return 12
        case .invalidEncoding: return 13
        case .invalidSparseDimensions: return 14
        case .invalidTokenValue: return 15
        case .invalidSparseEmbedding: return 16
        case .invalidEmbedding: return 17
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      public static let allCases: [Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError.RecordErrorType] = [
        .errorTypeUnspecified,
        .emptyLine,
        .invalidJsonSyntax,
        .invalidCsvSyntax,
        .invalidAvroSyntax,
        .invalidEmbeddingID,
        .embeddingSizeMismatch,
        .namespaceMissing,
        .parsingError,
        .duplicateNamespace,
        .opInDatapoint,
        .multipleValues,
        .invalidNumericValue,
        .invalidEncoding,
        .invalidSparseDimensions,
        .invalidTokenValue,
        .invalidSparseEmbedding,
        .invalidEmbedding,
      ]

    }

    public init() {}
  }

  public struct ContentValidationStats: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Cloud Storage URI pointing to the original file in user's bucket.
    public var sourceGcsUri: String = String()

    /// Number of records in this file that were successfully processed.
    public var validRecordCount: Int64 = 0

    /// Number of records in this file we skipped due to validate errors.
    public var invalidRecordCount: Int64 = 0

    /// The detail information of the partial failures encountered for those
    /// invalid records that couldn't be parsed.
    /// Up to 50 partial errors will be reported.
    public var partialErrors: [Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError] = []

    /// Number of sparse records in this file that were successfully processed.
    public var validSparseRecordCount: Int64 = 0

    /// Number of sparse records in this file we skipped due to validate errors.
    public var invalidSparseRecordCount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_CreateIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateIndexRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._index) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    try { if let v = self._index {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_CreateIndexRequest, rhs: Google_Cloud_Aiplatform_V1_CreateIndexRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_CreateIndexOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateIndexOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "generic_metadata"),
    2: .standard(proto: "nearest_neighbor_search_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._genericMetadata) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nearestNeighborSearchOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._genericMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._nearestNeighborSearchOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_CreateIndexOperationMetadata, rhs: Google_Cloud_Aiplatform_V1_CreateIndexOperationMetadata) -> Bool {
    if lhs._genericMetadata != rhs._genericMetadata {return false}
    if lhs._nearestNeighborSearchOperationMetadata != rhs._nearestNeighborSearchOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_GetIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIndexRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GetIndexRequest, rhs: Google_Cloud_Aiplatform_V1_GetIndexRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ListIndexesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIndexesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "filter"),
    3: .standard(proto: "page_size"),
    4: .standard(proto: "page_token"),
    5: .standard(proto: "read_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._readMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 2)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    try { if let v = self._readMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ListIndexesRequest, rhs: Google_Cloud_Aiplatform_V1_ListIndexesRequest) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs._readMask != rhs._readMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ListIndexesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListIndexesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "indexes"),
    2: .standard(proto: "next_page_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.indexes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.indexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.indexes, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ListIndexesResponse, rhs: Google_Cloud_Aiplatform_V1_ListIndexesResponse) -> Bool {
    if lhs.indexes != rhs.indexes {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_UpdateIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateIndexRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._index) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._index {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_UpdateIndexRequest, rhs: Google_Cloud_Aiplatform_V1_UpdateIndexRequest) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_UpdateIndexOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateIndexOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "generic_metadata"),
    2: .standard(proto: "nearest_neighbor_search_operation_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._genericMetadata) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nearestNeighborSearchOperationMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._genericMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._nearestNeighborSearchOperationMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_UpdateIndexOperationMetadata, rhs: Google_Cloud_Aiplatform_V1_UpdateIndexOperationMetadata) -> Bool {
    if lhs._genericMetadata != rhs._genericMetadata {return false}
    if lhs._nearestNeighborSearchOperationMetadata != rhs._nearestNeighborSearchOperationMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DeleteIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteIndexRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DeleteIndexRequest, rhs: Google_Cloud_Aiplatform_V1_DeleteIndexRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpsertDatapointsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "datapoints"),
    3: .standard(proto: "update_mask"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.datapoints) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updateMask) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 1)
    }
    if !self.datapoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datapoints, fieldNumber: 2)
    }
    try { if let v = self._updateMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest, rhs: Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.datapoints != rhs.datapoints {return false}
    if lhs._updateMask != rhs._updateMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpsertDatapointsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse, rhs: Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveDatapointsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "datapoint_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.datapointIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 1)
    }
    if !self.datapointIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.datapointIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest, rhs: Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.datapointIds != rhs.datapointIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveDatapointsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse, rhs: Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NearestNeighborSearchOperationMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "content_validation_stats"),
    2: .standard(proto: "data_bytes_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.contentValidationStats) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.dataBytesCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contentValidationStats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contentValidationStats, fieldNumber: 1)
    }
    if self.dataBytesCount != 0 {
      try visitor.visitSingularInt64Field(value: self.dataBytesCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata, rhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata) -> Bool {
    if lhs.contentValidationStats != rhs.contentValidationStats {return false}
    if lhs.dataBytesCount != rhs.dataBytesCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.protoMessageName + ".RecordError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_type"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "source_gcs_uri"),
    4: .standard(proto: "embedding_id"),
    5: .standard(proto: "raw_record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.errorType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sourceGcsUri) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.embeddingID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.rawRecord) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorType != .errorTypeUnspecified {
      try visitor.visitSingularEnumField(value: self.errorType, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.sourceGcsUri.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceGcsUri, fieldNumber: 3)
    }
    if !self.embeddingID.isEmpty {
      try visitor.visitSingularStringField(value: self.embeddingID, fieldNumber: 4)
    }
    if !self.rawRecord.isEmpty {
      try visitor.visitSingularStringField(value: self.rawRecord, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError, rhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError) -> Bool {
    if lhs.errorType != rhs.errorType {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.sourceGcsUri != rhs.sourceGcsUri {return false}
    if lhs.embeddingID != rhs.embeddingID {return false}
    if lhs.rawRecord != rhs.rawRecord {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.RecordError.RecordErrorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR_TYPE_UNSPECIFIED"),
    1: .same(proto: "EMPTY_LINE"),
    2: .same(proto: "INVALID_JSON_SYNTAX"),
    3: .same(proto: "INVALID_CSV_SYNTAX"),
    4: .same(proto: "INVALID_AVRO_SYNTAX"),
    5: .same(proto: "INVALID_EMBEDDING_ID"),
    6: .same(proto: "EMBEDDING_SIZE_MISMATCH"),
    7: .same(proto: "NAMESPACE_MISSING"),
    8: .same(proto: "PARSING_ERROR"),
    9: .same(proto: "DUPLICATE_NAMESPACE"),
    10: .same(proto: "OP_IN_DATAPOINT"),
    11: .same(proto: "MULTIPLE_VALUES"),
    12: .same(proto: "INVALID_NUMERIC_VALUE"),
    13: .same(proto: "INVALID_ENCODING"),
    14: .same(proto: "INVALID_SPARSE_DIMENSIONS"),
    15: .same(proto: "INVALID_TOKEN_VALUE"),
    16: .same(proto: "INVALID_SPARSE_EMBEDDING"),
    17: .same(proto: "INVALID_EMBEDDING"),
  ]
}

extension Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.ContentValidationStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.protoMessageName + ".ContentValidationStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_gcs_uri"),
    2: .standard(proto: "valid_record_count"),
    3: .standard(proto: "invalid_record_count"),
    4: .standard(proto: "partial_errors"),
    5: .standard(proto: "valid_sparse_record_count"),
    6: .standard(proto: "invalid_sparse_record_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourceGcsUri) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.validRecordCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.invalidRecordCount) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.partialErrors) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.validSparseRecordCount) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.invalidSparseRecordCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceGcsUri.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceGcsUri, fieldNumber: 1)
    }
    if self.validRecordCount != 0 {
      try visitor.visitSingularInt64Field(value: self.validRecordCount, fieldNumber: 2)
    }
    if self.invalidRecordCount != 0 {
      try visitor.visitSingularInt64Field(value: self.invalidRecordCount, fieldNumber: 3)
    }
    if !self.partialErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.partialErrors, fieldNumber: 4)
    }
    if self.validSparseRecordCount != 0 {
      try visitor.visitSingularInt64Field(value: self.validSparseRecordCount, fieldNumber: 5)
    }
    if self.invalidSparseRecordCount != 0 {
      try visitor.visitSingularInt64Field(value: self.invalidSparseRecordCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.ContentValidationStats, rhs: Google_Cloud_Aiplatform_V1_NearestNeighborSearchOperationMetadata.ContentValidationStats) -> Bool {
    if lhs.sourceGcsUri != rhs.sourceGcsUri {return false}
    if lhs.validRecordCount != rhs.validRecordCount {return false}
    if lhs.invalidRecordCount != rhs.invalidRecordCount {return false}
    if lhs.partialErrors != rhs.partialErrors {return false}
    if lhs.validSparseRecordCount != rhs.validSparseRecordCount {return false}
    if lhs.invalidSparseRecordCount != rhs.invalidSparseRecordCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
