// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/notebook_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - google.cloud.aiplatform.v1.NotebookService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.NotebookService" service.
public enum Google_Cloud_Aiplatform_V1_NotebookService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.NotebookService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateNotebookRuntimeTemplate" metadata.
        public enum CreateNotebookRuntimeTemplate {
            /// Request type for "CreateNotebookRuntimeTemplate".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest
            /// Response type for "CreateNotebookRuntimeTemplate".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateNotebookRuntimeTemplate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "CreateNotebookRuntimeTemplate"
            )
        }
        /// Namespace for "GetNotebookRuntimeTemplate" metadata.
        public enum GetNotebookRuntimeTemplate {
            /// Request type for "GetNotebookRuntimeTemplate".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest
            /// Response type for "GetNotebookRuntimeTemplate".
            public typealias Output = Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate
            /// Descriptor for "GetNotebookRuntimeTemplate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "GetNotebookRuntimeTemplate"
            )
        }
        /// Namespace for "ListNotebookRuntimeTemplates" metadata.
        public enum ListNotebookRuntimeTemplates {
            /// Request type for "ListNotebookRuntimeTemplates".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest
            /// Response type for "ListNotebookRuntimeTemplates".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse
            /// Descriptor for "ListNotebookRuntimeTemplates".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "ListNotebookRuntimeTemplates"
            )
        }
        /// Namespace for "DeleteNotebookRuntimeTemplate" metadata.
        public enum DeleteNotebookRuntimeTemplate {
            /// Request type for "DeleteNotebookRuntimeTemplate".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest
            /// Response type for "DeleteNotebookRuntimeTemplate".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteNotebookRuntimeTemplate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "DeleteNotebookRuntimeTemplate"
            )
        }
        /// Namespace for "UpdateNotebookRuntimeTemplate" metadata.
        public enum UpdateNotebookRuntimeTemplate {
            /// Request type for "UpdateNotebookRuntimeTemplate".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest
            /// Response type for "UpdateNotebookRuntimeTemplate".
            public typealias Output = Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate
            /// Descriptor for "UpdateNotebookRuntimeTemplate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "UpdateNotebookRuntimeTemplate"
            )
        }
        /// Namespace for "AssignNotebookRuntime" metadata.
        public enum AssignNotebookRuntime {
            /// Request type for "AssignNotebookRuntime".
            public typealias Input = Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest
            /// Response type for "AssignNotebookRuntime".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "AssignNotebookRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "AssignNotebookRuntime"
            )
        }
        /// Namespace for "GetNotebookRuntime" metadata.
        public enum GetNotebookRuntime {
            /// Request type for "GetNotebookRuntime".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest
            /// Response type for "GetNotebookRuntime".
            public typealias Output = Google_Cloud_Aiplatform_V1_NotebookRuntime
            /// Descriptor for "GetNotebookRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "GetNotebookRuntime"
            )
        }
        /// Namespace for "ListNotebookRuntimes" metadata.
        public enum ListNotebookRuntimes {
            /// Request type for "ListNotebookRuntimes".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest
            /// Response type for "ListNotebookRuntimes".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse
            /// Descriptor for "ListNotebookRuntimes".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "ListNotebookRuntimes"
            )
        }
        /// Namespace for "DeleteNotebookRuntime" metadata.
        public enum DeleteNotebookRuntime {
            /// Request type for "DeleteNotebookRuntime".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest
            /// Response type for "DeleteNotebookRuntime".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteNotebookRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "DeleteNotebookRuntime"
            )
        }
        /// Namespace for "UpgradeNotebookRuntime" metadata.
        public enum UpgradeNotebookRuntime {
            /// Request type for "UpgradeNotebookRuntime".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest
            /// Response type for "UpgradeNotebookRuntime".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "UpgradeNotebookRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "UpgradeNotebookRuntime"
            )
        }
        /// Namespace for "StartNotebookRuntime" metadata.
        public enum StartNotebookRuntime {
            /// Request type for "StartNotebookRuntime".
            public typealias Input = Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest
            /// Response type for "StartNotebookRuntime".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "StartNotebookRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "StartNotebookRuntime"
            )
        }
        /// Namespace for "CreateNotebookExecutionJob" metadata.
        public enum CreateNotebookExecutionJob {
            /// Request type for "CreateNotebookExecutionJob".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest
            /// Response type for "CreateNotebookExecutionJob".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateNotebookExecutionJob".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "CreateNotebookExecutionJob"
            )
        }
        /// Namespace for "GetNotebookExecutionJob" metadata.
        public enum GetNotebookExecutionJob {
            /// Request type for "GetNotebookExecutionJob".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest
            /// Response type for "GetNotebookExecutionJob".
            public typealias Output = Google_Cloud_Aiplatform_V1_NotebookExecutionJob
            /// Descriptor for "GetNotebookExecutionJob".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "GetNotebookExecutionJob"
            )
        }
        /// Namespace for "ListNotebookExecutionJobs" metadata.
        public enum ListNotebookExecutionJobs {
            /// Request type for "ListNotebookExecutionJobs".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest
            /// Response type for "ListNotebookExecutionJobs".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse
            /// Descriptor for "ListNotebookExecutionJobs".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "ListNotebookExecutionJobs"
            )
        }
        /// Namespace for "DeleteNotebookExecutionJob" metadata.
        public enum DeleteNotebookExecutionJob {
            /// Request type for "DeleteNotebookExecutionJob".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest
            /// Response type for "DeleteNotebookExecutionJob".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteNotebookExecutionJob".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService"),
                method: "DeleteNotebookExecutionJob"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.NotebookService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateNotebookRuntimeTemplate.descriptor,
            GetNotebookRuntimeTemplate.descriptor,
            ListNotebookRuntimeTemplates.descriptor,
            DeleteNotebookRuntimeTemplate.descriptor,
            UpdateNotebookRuntimeTemplate.descriptor,
            AssignNotebookRuntime.descriptor,
            GetNotebookRuntime.descriptor,
            ListNotebookRuntimes.descriptor,
            DeleteNotebookRuntime.descriptor,
            UpgradeNotebookRuntime.descriptor,
            StartNotebookRuntime.descriptor,
            CreateNotebookExecutionJob.descriptor,
            GetNotebookExecutionJob.descriptor,
            ListNotebookExecutionJobs.descriptor,
            DeleteNotebookExecutionJob.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.NotebookService" service.
    public static let google_cloud_aiplatform_v1_NotebookService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.NotebookService")
}

// MARK: google.cloud.aiplatform.v1.NotebookService (client)

extension Google_Cloud_Aiplatform_V1_NotebookService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.NotebookService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The interface for Vertex Notebook service (a.k.a. Colab on Workbench).
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNotebookRuntimeTemplates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookRuntimeTemplates in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNotebookRuntimeTemplates<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AssignNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Assigns a NotebookRuntime to a user for a particular Notebook file. This
        /// > method will either returns an existing assignment or generates a new one.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func assignNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntime` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntime>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntime>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNotebookRuntimes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookRuntimes in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNotebookRuntimes<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpgradeNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upgrades a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upgradeNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StartNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func startNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookExecutionJob` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNotebookExecutionJobs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookExecutionJobs in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNotebookExecutionJobs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.NotebookService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The interface for Vertex Notebook service (a.k.a. Colab on Workbench).
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.CreateNotebookRuntimeTemplate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.GetNotebookRuntimeTemplate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNotebookRuntimeTemplates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookRuntimeTemplates in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listNotebookRuntimeTemplates<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.ListNotebookRuntimeTemplates.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.DeleteNotebookRuntimeTemplate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNotebookRuntimeTemplate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a NotebookRuntimeTemplate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateNotebookRuntimeTemplate<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.UpdateNotebookRuntimeTemplate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AssignNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Assigns a NotebookRuntime to a user for a particular Notebook file. This
        /// > method will either returns an existing assignment or generates a new one.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func assignNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.AssignNotebookRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookRuntime` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntime>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntime>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.GetNotebookRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNotebookRuntimes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookRuntimes in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listNotebookRuntimes<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.ListNotebookRuntimes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.DeleteNotebookRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpgradeNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upgrades a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func upgradeNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.UpgradeNotebookRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StartNotebookRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a NotebookRuntime.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func startNotebookRuntime<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.StartNotebookRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.CreateNotebookExecutionJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_NotebookExecutionJob` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.GetNotebookExecutionJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNotebookExecutionJobs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists NotebookExecutionJobs in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listNotebookExecutionJobs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.ListNotebookExecutionJobs.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNotebookExecutionJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a NotebookExecutionJob.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteNotebookExecutionJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_NotebookService.Method.DeleteNotebookExecutionJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_NotebookService.ClientProtocol {
    /// Call the "CreateNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotebookRuntimeTemplate<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNotebookRuntimeTemplate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookRuntimeTemplate<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNotebookRuntimeTemplate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookRuntimeTemplates" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookRuntimeTemplates in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookRuntimeTemplates<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNotebookRuntimeTemplates(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookRuntimeTemplate<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNotebookRuntimeTemplate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNotebookRuntimeTemplate<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNotebookRuntimeTemplate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AssignNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Assigns a NotebookRuntime to a user for a particular Notebook file. This
    /// > method will either returns an existing assignment or generates a new one.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func assignNotebookRuntime<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.assignNotebookRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookRuntime<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntime>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNotebookRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_NotebookRuntime>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookRuntimes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookRuntimes in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookRuntimes<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNotebookRuntimes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookRuntime<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNotebookRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpgradeNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upgrades a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func upgradeNotebookRuntime<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upgradeNotebookRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func startNotebookRuntime<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.startNotebookRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotebookExecutionJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNotebookExecutionJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookExecutionJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNotebookExecutionJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookExecutionJobs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookExecutionJobs in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookExecutionJobs<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNotebookExecutionJobs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookExecutionJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNotebookExecutionJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_NotebookService.ClientProtocol {
    /// Call the "CreateNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotebookRuntimeTemplate<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookRuntimeTemplateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNotebookRuntimeTemplate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookRuntimeTemplate<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeTemplateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNotebookRuntimeTemplate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookRuntimeTemplates" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookRuntimeTemplates in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookRuntimeTemplates<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimeTemplatesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNotebookRuntimeTemplates(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookRuntimeTemplate<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeTemplateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNotebookRuntimeTemplate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNotebookRuntimeTemplate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a NotebookRuntimeTemplate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateNotebookRuntimeTemplate<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntimeTemplate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateNotebookRuntimeTemplateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNotebookRuntimeTemplate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AssignNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Assigns a NotebookRuntime to a user for a particular Notebook file. This
    /// > method will either returns an existing assignment or generates a new one.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func assignNotebookRuntime<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AssignNotebookRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.assignNotebookRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookRuntime<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookRuntime>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNotebookRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookRuntimes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookRuntimes in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookRuntimes<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookRuntimesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNotebookRuntimes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookRuntime<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNotebookRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpgradeNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upgrades a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func upgradeNotebookRuntime<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpgradeNotebookRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upgradeNotebookRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartNotebookRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a NotebookRuntime.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func startNotebookRuntime<Result>(
        _ message: Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_StartNotebookRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.startNotebookRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotebookExecutionJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateNotebookExecutionJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNotebookExecutionJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotebookExecutionJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_NotebookExecutionJob>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetNotebookExecutionJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNotebookExecutionJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotebookExecutionJobs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists NotebookExecutionJobs in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotebookExecutionJobs<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListNotebookExecutionJobsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNotebookExecutionJobs(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotebookExecutionJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a NotebookExecutionJob.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotebookExecutionJob<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteNotebookExecutionJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNotebookExecutionJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}