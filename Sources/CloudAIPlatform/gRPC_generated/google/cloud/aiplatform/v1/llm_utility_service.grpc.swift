// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/llm_utility_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_LlmUtilityService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_LlmUtilityService
    public enum Method {
        public enum CountTokens {
            public typealias Input = Google_Cloud_Aiplatform_V1_CountTokensRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_CountTokensResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_LlmUtilityService.descriptor.fullyQualifiedService,
                method: "CountTokens"
            )
        }
        public enum ComputeTokens {
            public typealias Input = Google_Cloud_Aiplatform_V1_ComputeTokensRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ComputeTokensResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_LlmUtilityService.descriptor.fullyQualifiedService,
                method: "ComputeTokens"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CountTokens.descriptor,
            ComputeTokens.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_LlmUtilityService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_LlmUtilityService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_LlmUtilityService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "LlmUtilityService"
    )
}

/// Service for LLM related utility functions.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_LlmUtilityService_ClientProtocol: Sendable {
    /// Perform a token counting.
    func countTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CountTokensRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CountTokensRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_CountTokensResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_CountTokensResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Return a list of tokens based on the input text.
    func computeTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_LlmUtilityService.ClientProtocol {
    public func countTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CountTokensRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_CountTokensResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.countTokens(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CountTokensRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_CountTokensResponse>(),
            options: options,
            body
        )
    }
    
    public func computeTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.computeTokens(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_LlmUtilityService.ClientProtocol {
    /// Perform a token counting.
    public func countTokens<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CountTokensRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_CountTokensResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CountTokensRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.countTokens(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Return a list of tokens based on the input text.
    public func computeTokens<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.computeTokens(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Service for LLM related utility functions.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_LlmUtilityService_Client: Google_Cloud_Aiplatform_V1_LlmUtilityService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Perform a token counting.
    public func countTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CountTokensRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CountTokensRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_CountTokensResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_CountTokensResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_LlmUtilityService.Method.CountTokens.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Return a list of tokens based on the input text.
    public func computeTokens<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ComputeTokensRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ComputeTokensResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_LlmUtilityService.Method.ComputeTokens.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}