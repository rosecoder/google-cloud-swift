//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/llm_utility_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for LLM related utility functions.
///
/// Usage: instantiate `Google_Cloud_Aiplatform_V1_LlmUtilityServiceClient`, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? { get }

  func countTokens(
    _ request: Google_Cloud_Aiplatform_V1_CountTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Aiplatform_V1_CountTokensRequest, Google_Cloud_Aiplatform_V1_CountTokensResponse>

  func computeTokens(
    _ request: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Aiplatform_V1_ComputeTokensRequest, Google_Cloud_Aiplatform_V1_ComputeTokensResponse>
}

extension Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientProtocol {
  public var serviceName: String {
    return "google.cloud.aiplatform.v1.LlmUtilityService"
  }

  /// Perform a token counting.
  ///
  /// - Parameters:
  ///   - request: Request to send to CountTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func countTokens(
    _ request: Google_Cloud_Aiplatform_V1_CountTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Aiplatform_V1_CountTokensRequest, Google_Cloud_Aiplatform_V1_CountTokensResponse> {
    return self.makeUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.countTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountTokensInterceptors() ?? []
    )
  }

  /// Return a list of tokens based on the input text.
  ///
  /// - Parameters:
  ///   - request: Request to send to ComputeTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func computeTokens(
    _ request: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Aiplatform_V1_ComputeTokensRequest, Google_Cloud_Aiplatform_V1_ComputeTokensResponse> {
    return self.makeUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.computeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeTokensInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Google_Cloud_Aiplatform_V1_LlmUtilityServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Google_Cloud_Aiplatform_V1_LlmUtilityServiceNIOClient")
public final class Google_Cloud_Aiplatform_V1_LlmUtilityServiceClient: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.cloud.aiplatform.v1.LlmUtilityService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Google_Cloud_Aiplatform_V1_LlmUtilityServiceNIOClient: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the google.cloud.aiplatform.v1.LlmUtilityService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service for LLM related utility functions.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Google_Cloud_Aiplatform_V1_LlmUtilityServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? { get }

  func makeCountTokensCall(
    _ request: Google_Cloud_Aiplatform_V1_CountTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Cloud_Aiplatform_V1_CountTokensRequest, Google_Cloud_Aiplatform_V1_CountTokensResponse>

  func makeComputeTokensCall(
    _ request: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Cloud_Aiplatform_V1_ComputeTokensRequest, Google_Cloud_Aiplatform_V1_ComputeTokensResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Cloud_Aiplatform_V1_LlmUtilityServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCountTokensCall(
    _ request: Google_Cloud_Aiplatform_V1_CountTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Cloud_Aiplatform_V1_CountTokensRequest, Google_Cloud_Aiplatform_V1_CountTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.countTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountTokensInterceptors() ?? []
    )
  }

  public func makeComputeTokensCall(
    _ request: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Cloud_Aiplatform_V1_ComputeTokensRequest, Google_Cloud_Aiplatform_V1_ComputeTokensResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.computeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeTokensInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Cloud_Aiplatform_V1_LlmUtilityServiceAsyncClientProtocol {
  public func countTokens(
    _ request: Google_Cloud_Aiplatform_V1_CountTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Cloud_Aiplatform_V1_CountTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.countTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCountTokensInterceptors() ?? []
    )
  }

  public func computeTokens(
    _ request: Google_Cloud_Aiplatform_V1_ComputeTokensRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Cloud_Aiplatform_V1_ComputeTokensResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.computeTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeTokensInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Google_Cloud_Aiplatform_V1_LlmUtilityServiceAsyncClient: Google_Cloud_Aiplatform_V1_LlmUtilityServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'countTokens'.
  func makeCountTokensInterceptors() -> [ClientInterceptor<Google_Cloud_Aiplatform_V1_CountTokensRequest, Google_Cloud_Aiplatform_V1_CountTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'computeTokens'.
  func makeComputeTokensInterceptors() -> [ClientInterceptor<Google_Cloud_Aiplatform_V1_ComputeTokensRequest, Google_Cloud_Aiplatform_V1_ComputeTokensResponse>]
}

public enum Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LlmUtilityService",
    fullName: "google.cloud.aiplatform.v1.LlmUtilityService",
    methods: [
      Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.countTokens,
      Google_Cloud_Aiplatform_V1_LlmUtilityServiceClientMetadata.Methods.computeTokens,
    ]
  )

  public enum Methods {
    public static let countTokens = GRPCMethodDescriptor(
      name: "CountTokens",
      path: "/google.cloud.aiplatform.v1.LlmUtilityService/CountTokens",
      type: GRPCCallType.unary
    )

    public static let computeTokens = GRPCMethodDescriptor(
      name: "ComputeTokens",
      path: "/google.cloud.aiplatform.v1.LlmUtilityService/ComputeTokens",
      type: GRPCCallType.unary
    )
  }
}

