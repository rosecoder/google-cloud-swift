// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/model_garden_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// View enumeration of PublisherModel.
public enum Google_Cloud_Aiplatform_V1_PublisherModelView: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// The default / unset value. The API will default to the BASIC view.
  case unspecified // = 0

  /// Include basic metadata about the publisher model, but not the full
  /// contents.
  case basic // = 1

  /// Include everything.
  case full // = 2

  /// Include: VersionId, ModelVersionExternalName, and SupportedActions.
  case publisherModelVersionViewBasic // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .basic
    case 2: self = .full
    case 3: self = .publisherModelVersionViewBasic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .basic: return 1
    case .full: return 2
    case .publisherModelVersionViewBasic: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Google_Cloud_Aiplatform_V1_PublisherModelView] = [
    .unspecified,
    .basic,
    .full,
    .publisherModelVersionViewBasic,
  ]

}

/// Request message for
/// [ModelGardenService.GetPublisherModel][google.cloud.aiplatform.v1.ModelGardenService.GetPublisherModel]
public struct Google_Cloud_Aiplatform_V1_GetPublisherModelRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the PublisherModel resource.
  /// Format:
  /// `publishers/{publisher}/models/{publisher_model}`
  public var name: String = String()

  /// Optional. The IETF BCP-47 language code representing the language in which
  /// the publisher model's text information should be written in.
  public var languageCode: String = String()

  /// Optional. PublisherModel view specifying which fields to read.
  public var view: Google_Cloud_Aiplatform_V1_PublisherModelView = .unspecified

  /// Optional. Boolean indicates whether the requested model is a Hugging Face
  /// model.
  public var isHuggingFaceModel: Bool = false

  /// Optional. Token used to access Hugging Face gated models.
  public var huggingFaceToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_PublisherModelView: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUBLISHER_MODEL_VIEW_UNSPECIFIED"),
    1: .same(proto: "PUBLISHER_MODEL_VIEW_BASIC"),
    2: .same(proto: "PUBLISHER_MODEL_VIEW_FULL"),
    3: .same(proto: "PUBLISHER_MODEL_VERSION_VIEW_BASIC"),
  ]
}

extension Google_Cloud_Aiplatform_V1_GetPublisherModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPublisherModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "language_code"),
    3: .same(proto: "view"),
    5: .standard(proto: "is_hugging_face_model"),
    6: .standard(proto: "hugging_face_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.languageCode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.view) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isHuggingFaceModel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.huggingFaceToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.view != .unspecified {
      try visitor.visitSingularEnumField(value: self.view, fieldNumber: 3)
    }
    if self.isHuggingFaceModel != false {
      try visitor.visitSingularBoolField(value: self.isHuggingFaceModel, fieldNumber: 5)
    }
    if !self.huggingFaceToken.isEmpty {
      try visitor.visitSingularStringField(value: self.huggingFaceToken, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GetPublisherModelRequest, rhs: Google_Cloud_Aiplatform_V1_GetPublisherModelRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.view != rhs.view {return false}
    if lhs.isHuggingFaceModel != rhs.isHuggingFaceModel {return false}
    if lhs.huggingFaceToken != rhs.huggingFaceToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
