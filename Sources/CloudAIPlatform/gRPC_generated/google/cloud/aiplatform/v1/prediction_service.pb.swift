// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/prediction_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for
/// [PredictionService.Predict][google.cloud.aiplatform.v1.PredictionService.Predict].
public struct Google_Cloud_Aiplatform_V1_PredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Required. The instances that are the input to the prediction call.
  /// A DeployedModel may have an upper limit on the number of instances it
  /// supports per request, and when it is exceeded the prediction call errors
  /// in case of AutoML Models, or, in case of customer created Models, the
  /// behaviour is as documented by that Model.
  /// The schema of any single instance may be specified via Endpoint's
  /// DeployedModels' [Model's][google.cloud.aiplatform.v1.DeployedModel.model]
  /// [PredictSchemata's][google.cloud.aiplatform.v1.Model.predict_schemata]
  /// [instance_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.instance_schema_uri].
  public var instances: [SwiftProtobuf.Google_Protobuf_Value] = []

  /// The parameters that govern the prediction. The schema of the parameters may
  /// be specified via Endpoint's DeployedModels' [Model's
  /// ][google.cloud.aiplatform.v1.DeployedModel.model]
  /// [PredictSchemata's][google.cloud.aiplatform.v1.Model.predict_schemata]
  /// [parameters_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.parameters_schema_uri].
  public var parameters: SwiftProtobuf.Google_Protobuf_Value {
    get {return _parameters ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: SwiftProtobuf.Google_Protobuf_Value? = nil
}

/// Response message for
/// [PredictionService.Predict][google.cloud.aiplatform.v1.PredictionService.Predict].
public struct Google_Cloud_Aiplatform_V1_PredictResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The predictions that are the output of the predictions call.
  /// The schema of any single prediction may be specified via Endpoint's
  /// DeployedModels' [Model's ][google.cloud.aiplatform.v1.DeployedModel.model]
  /// [PredictSchemata's][google.cloud.aiplatform.v1.Model.predict_schemata]
  /// [prediction_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.prediction_schema_uri].
  public var predictions: [SwiftProtobuf.Google_Protobuf_Value] = []

  /// ID of the Endpoint's DeployedModel that served this prediction.
  public var deployedModelID: String = String()

  /// Output only. The resource name of the Model which is deployed as the
  /// DeployedModel that this prediction hits.
  public var model: String = String()

  /// Output only. The version ID of the Model which is deployed as the
  /// DeployedModel that this prediction hits.
  public var modelVersionID: String = String()

  /// Output only. The [display
  /// name][google.cloud.aiplatform.v1.Model.display_name] of the Model which is
  /// deployed as the DeployedModel that this prediction hits.
  public var modelDisplayName: String = String()

  /// Output only. Request-level metadata returned by the model. The metadata
  /// type will be dependent upon the model implementation.
  public var metadata: SwiftProtobuf.Google_Protobuf_Value {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Value? = nil
}

/// Request message for
/// [PredictionService.RawPredict][google.cloud.aiplatform.v1.PredictionService.RawPredict].
public struct Google_Cloud_Aiplatform_V1_RawPredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// The prediction input. Supports HTTP headers and arbitrary data payload.
  ///
  /// A [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] may have an
  /// upper limit on the number of instances it supports per request. When this
  /// limit it is exceeded for an AutoML model, the
  /// [RawPredict][google.cloud.aiplatform.v1.PredictionService.RawPredict]
  /// method returns an error. When this limit is exceeded for a custom-trained
  /// model, the behavior varies depending on the model.
  ///
  /// You can specify the schema for each instance in the
  /// [predict_schemata.instance_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.instance_schema_uri]
  /// field when you create a [Model][google.cloud.aiplatform.v1.Model]. This
  /// schema applies when you deploy the `Model` as a `DeployedModel` to an
  /// [Endpoint][google.cloud.aiplatform.v1.Endpoint] and use the `RawPredict`
  /// method.
  public var httpBody: Google_Api_HttpBody {
    get {return _httpBody ?? Google_Api_HttpBody()}
    set {_httpBody = newValue}
  }
  /// Returns true if `httpBody` has been explicitly set.
  public var hasHTTPBody: Bool {return self._httpBody != nil}
  /// Clears the value of `httpBody`. Subsequent reads from it will return its default value.
  public mutating func clearHTTPBody() {self._httpBody = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _httpBody: Google_Api_HttpBody? = nil
}

/// Request message for
/// [PredictionService.StreamRawPredict][google.cloud.aiplatform.v1.PredictionService.StreamRawPredict].
public struct Google_Cloud_Aiplatform_V1_StreamRawPredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// The prediction input. Supports HTTP headers and arbitrary data payload.
  public var httpBody: Google_Api_HttpBody {
    get {return _httpBody ?? Google_Api_HttpBody()}
    set {_httpBody = newValue}
  }
  /// Returns true if `httpBody` has been explicitly set.
  public var hasHTTPBody: Bool {return self._httpBody != nil}
  /// Clears the value of `httpBody`. Subsequent reads from it will return its default value.
  public mutating func clearHTTPBody() {self._httpBody = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _httpBody: Google_Api_HttpBody? = nil
}

/// Request message for
/// [PredictionService.DirectPredict][google.cloud.aiplatform.v1.PredictionService.DirectPredict].
public struct Google_Cloud_Aiplatform_V1_DirectPredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// The prediction input.
  public var inputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Response message for
/// [PredictionService.DirectPredict][google.cloud.aiplatform.v1.PredictionService.DirectPredict].
public struct Google_Cloud_Aiplatform_V1_DirectPredictResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var outputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Request message for
/// [PredictionService.DirectRawPredict][google.cloud.aiplatform.v1.PredictionService.DirectRawPredict].
public struct Google_Cloud_Aiplatform_V1_DirectRawPredictRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Fully qualified name of the API method being invoked to perform
  /// predictions.
  ///
  /// Format:
  /// `/namespace.Service/Method/`
  /// Example:
  /// `/tensorflow.serving.PredictionService/Predict`
  public var methodName: String = String()

  /// The prediction input.
  public var input: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for
/// [PredictionService.DirectRawPredict][google.cloud.aiplatform.v1.PredictionService.DirectRawPredict].
public struct Google_Cloud_Aiplatform_V1_DirectRawPredictResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var output: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [PredictionService.StreamDirectPredict][google.cloud.aiplatform.v1.PredictionService.StreamDirectPredict].
///
/// The first message must contain
/// [endpoint][google.cloud.aiplatform.v1.StreamDirectPredictRequest.endpoint]
/// field and optionally [input][]. The subsequent messages must contain
/// [input][].
public struct Google_Cloud_Aiplatform_V1_StreamDirectPredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Optional. The prediction input.
  public var inputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// Optional. The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Response message for
/// [PredictionService.StreamDirectPredict][google.cloud.aiplatform.v1.PredictionService.StreamDirectPredict].
public struct Google_Cloud_Aiplatform_V1_StreamDirectPredictResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var outputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Request message for
/// [PredictionService.StreamDirectRawPredict][google.cloud.aiplatform.v1.PredictionService.StreamDirectRawPredict].
///
/// The first message must contain
/// [endpoint][google.cloud.aiplatform.v1.StreamDirectRawPredictRequest.endpoint]
/// and
/// [method_name][google.cloud.aiplatform.v1.StreamDirectRawPredictRequest.method_name]
/// fields and optionally
/// [input][google.cloud.aiplatform.v1.StreamDirectRawPredictRequest.input]. The
/// subsequent messages must contain
/// [input][google.cloud.aiplatform.v1.StreamDirectRawPredictRequest.input].
/// [method_name][google.cloud.aiplatform.v1.StreamDirectRawPredictRequest.method_name]
/// in the subsequent messages have no effect.
public struct Google_Cloud_Aiplatform_V1_StreamDirectRawPredictRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Optional. Fully qualified name of the API method being invoked to perform
  /// predictions.
  ///
  /// Format:
  /// `/namespace.Service/Method/`
  /// Example:
  /// `/tensorflow.serving.PredictionService/Predict`
  public var methodName: String = String()

  /// Optional. The prediction input.
  public var input: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for
/// [PredictionService.StreamDirectRawPredict][google.cloud.aiplatform.v1.PredictionService.StreamDirectRawPredict].
public struct Google_Cloud_Aiplatform_V1_StreamDirectRawPredictResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var output: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [PredictionService.StreamingPredict][google.cloud.aiplatform.v1.PredictionService.StreamingPredict].
///
/// The first message must contain
/// [endpoint][google.cloud.aiplatform.v1.StreamingPredictRequest.endpoint] field
/// and optionally [input][]. The subsequent messages must contain [input][].
public struct Google_Cloud_Aiplatform_V1_StreamingPredictRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// The prediction input.
  public var inputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Response message for
/// [PredictionService.StreamingPredict][google.cloud.aiplatform.v1.PredictionService.StreamingPredict].
public struct Google_Cloud_Aiplatform_V1_StreamingPredictResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var outputs: [Google_Cloud_Aiplatform_V1_Tensor] = []

  /// The parameters that govern the prediction.
  public var parameters: Google_Cloud_Aiplatform_V1_Tensor {
    get {return _parameters ?? Google_Cloud_Aiplatform_V1_Tensor()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Google_Cloud_Aiplatform_V1_Tensor? = nil
}

/// Request message for
/// [PredictionService.StreamingRawPredict][google.cloud.aiplatform.v1.PredictionService.StreamingRawPredict].
///
/// The first message must contain
/// [endpoint][google.cloud.aiplatform.v1.StreamingRawPredictRequest.endpoint]
/// and
/// [method_name][google.cloud.aiplatform.v1.StreamingRawPredictRequest.method_name]
/// fields and optionally
/// [input][google.cloud.aiplatform.v1.StreamingRawPredictRequest.input]. The
/// subsequent messages must contain
/// [input][google.cloud.aiplatform.v1.StreamingRawPredictRequest.input].
/// [method_name][google.cloud.aiplatform.v1.StreamingRawPredictRequest.method_name]
/// in the subsequent messages have no effect.
public struct Google_Cloud_Aiplatform_V1_StreamingRawPredictRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the prediction.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Fully qualified name of the API method being invoked to perform
  /// predictions.
  ///
  /// Format:
  /// `/namespace.Service/Method/`
  /// Example:
  /// `/tensorflow.serving.PredictionService/Predict`
  public var methodName: String = String()

  /// The prediction input.
  public var input: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for
/// [PredictionService.StreamingRawPredict][google.cloud.aiplatform.v1.PredictionService.StreamingRawPredict].
public struct Google_Cloud_Aiplatform_V1_StreamingRawPredictResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The prediction output.
  public var output: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [PredictionService.Explain][google.cloud.aiplatform.v1.PredictionService.Explain].
public struct Google_Cloud_Aiplatform_V1_ExplainRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to serve the explanation.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String {
    get {return _storage._endpoint}
    set {_uniqueStorage()._endpoint = newValue}
  }

  /// Required. The instances that are the input to the explanation call.
  /// A DeployedModel may have an upper limit on the number of instances it
  /// supports per request, and when it is exceeded the explanation call errors
  /// in case of AutoML Models, or, in case of customer created Models, the
  /// behaviour is as documented by that Model.
  /// The schema of any single instance may be specified via Endpoint's
  /// DeployedModels' [Model's][google.cloud.aiplatform.v1.DeployedModel.model]
  /// [PredictSchemata's][google.cloud.aiplatform.v1.Model.predict_schemata]
  /// [instance_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.instance_schema_uri].
  public var instances: [SwiftProtobuf.Google_Protobuf_Value] {
    get {return _storage._instances}
    set {_uniqueStorage()._instances = newValue}
  }

  /// The parameters that govern the prediction. The schema of the parameters may
  /// be specified via Endpoint's DeployedModels' [Model's
  /// ][google.cloud.aiplatform.v1.DeployedModel.model]
  /// [PredictSchemata's][google.cloud.aiplatform.v1.Model.predict_schemata]
  /// [parameters_schema_uri][google.cloud.aiplatform.v1.PredictSchemata.parameters_schema_uri].
  public var parameters: SwiftProtobuf.Google_Protobuf_Value {
    get {return _storage._parameters ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_uniqueStorage()._parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {_uniqueStorage()._parameters = nil}

  /// If specified, overrides the
  /// [explanation_spec][google.cloud.aiplatform.v1.DeployedModel.explanation_spec]
  /// of the DeployedModel. Can be used for explaining prediction results with
  /// different configurations, such as:
  ///  - Explaining top-5 predictions results as opposed to top-1;
  ///  - Increasing path count or step count of the attribution methods to reduce
  ///    approximate errors;
  ///  - Using different baselines for explaining the prediction results.
  public var explanationSpecOverride: Google_Cloud_Aiplatform_V1_ExplanationSpecOverride {
    get {return _storage._explanationSpecOverride ?? Google_Cloud_Aiplatform_V1_ExplanationSpecOverride()}
    set {_uniqueStorage()._explanationSpecOverride = newValue}
  }
  /// Returns true if `explanationSpecOverride` has been explicitly set.
  public var hasExplanationSpecOverride: Bool {return _storage._explanationSpecOverride != nil}
  /// Clears the value of `explanationSpecOverride`. Subsequent reads from it will return its default value.
  public mutating func clearExplanationSpecOverride() {_uniqueStorage()._explanationSpecOverride = nil}

  /// If specified, this ExplainRequest will be served by the chosen
  /// DeployedModel, overriding
  /// [Endpoint.traffic_split][google.cloud.aiplatform.v1.Endpoint.traffic_split].
  public var deployedModelID: String {
    get {return _storage._deployedModelID}
    set {_uniqueStorage()._deployedModelID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response message for
/// [PredictionService.Explain][google.cloud.aiplatform.v1.PredictionService.Explain].
public struct Google_Cloud_Aiplatform_V1_ExplainResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The explanations of the Model's
  /// [PredictResponse.predictions][google.cloud.aiplatform.v1.PredictResponse.predictions].
  ///
  /// It has the same number of elements as
  /// [instances][google.cloud.aiplatform.v1.ExplainRequest.instances] to be
  /// explained.
  public var explanations: [Google_Cloud_Aiplatform_V1_Explanation] = []

  /// ID of the Endpoint's DeployedModel that served this explanation.
  public var deployedModelID: String = String()

  /// The predictions that are the output of the predictions call.
  /// Same as
  /// [PredictResponse.predictions][google.cloud.aiplatform.v1.PredictResponse.predictions].
  public var predictions: [SwiftProtobuf.Google_Protobuf_Value] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for [PredictionService.CountTokens][].
public struct Google_Cloud_Aiplatform_V1_CountTokensRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The name of the Endpoint requested to perform token counting.
  /// Format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var endpoint: String = String()

  /// Optional. The name of the publisher model requested to serve the
  /// prediction. Format:
  /// `projects/{project}/locations/{location}/publishers/*/models/*`
  public var model: String = String()

  /// Optional. The instances that are the input to token counting call.
  /// Schema is identical to the prediction schema of the underlying model.
  public var instances: [SwiftProtobuf.Google_Protobuf_Value] = []

  /// Optional. Input content.
  public var contents: [Google_Cloud_Aiplatform_V1_Content] = []

  /// Optional. The user provided system instructions for the model.
  /// Note: only text should be used in parts and content in each part will be in
  /// a separate paragraph.
  public var systemInstruction: Google_Cloud_Aiplatform_V1_Content {
    get {return _systemInstruction ?? Google_Cloud_Aiplatform_V1_Content()}
    set {_systemInstruction = newValue}
  }
  /// Returns true if `systemInstruction` has been explicitly set.
  public var hasSystemInstruction: Bool {return self._systemInstruction != nil}
  /// Clears the value of `systemInstruction`. Subsequent reads from it will return its default value.
  public mutating func clearSystemInstruction() {self._systemInstruction = nil}

  /// Optional. A list of `Tools` the model may use to generate the next
  /// response.
  ///
  /// A `Tool` is a piece of code that enables the system to interact with
  /// external systems to perform an action, or set of actions, outside of
  /// knowledge and scope of the model.
  public var tools: [Google_Cloud_Aiplatform_V1_Tool] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _systemInstruction: Google_Cloud_Aiplatform_V1_Content? = nil
}

/// Response message for [PredictionService.CountTokens][].
public struct Google_Cloud_Aiplatform_V1_CountTokensResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The total number of tokens counted across all instances from the request.
  public var totalTokens: Int32 = 0

  /// The total number of billable characters counted across all instances from
  /// the request.
  public var totalBillableCharacters: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for [PredictionService.GenerateContent].
public struct Google_Cloud_Aiplatform_V1_GenerateContentRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The fully qualified name of the publisher model or tuned model
  /// endpoint to use.
  ///
  /// Publisher model format:
  /// `projects/{project}/locations/{location}/publishers/*/models/*`
  ///
  /// Tuned model endpoint format:
  /// `projects/{project}/locations/{location}/endpoints/{endpoint}`
  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  /// Required. The content of the current conversation with the model.
  ///
  /// For single-turn queries, this is a single instance. For multi-turn queries,
  /// this is a repeated field that contains conversation history + latest
  /// request.
  public var contents: [Google_Cloud_Aiplatform_V1_Content] {
    get {return _storage._contents}
    set {_uniqueStorage()._contents = newValue}
  }

  /// Optional. The user provided system instructions for the model.
  /// Note: only text should be used in parts and content in each part will be in
  /// a separate paragraph.
  public var systemInstruction: Google_Cloud_Aiplatform_V1_Content {
    get {return _storage._systemInstruction ?? Google_Cloud_Aiplatform_V1_Content()}
    set {_uniqueStorage()._systemInstruction = newValue}
  }
  /// Returns true if `systemInstruction` has been explicitly set.
  public var hasSystemInstruction: Bool {return _storage._systemInstruction != nil}
  /// Clears the value of `systemInstruction`. Subsequent reads from it will return its default value.
  public mutating func clearSystemInstruction() {_uniqueStorage()._systemInstruction = nil}

  /// Optional. A list of `Tools` the model may use to generate the next
  /// response.
  ///
  /// A `Tool` is a piece of code that enables the system to interact with
  /// external systems to perform an action, or set of actions, outside of
  /// knowledge and scope of the model.
  public var tools: [Google_Cloud_Aiplatform_V1_Tool] {
    get {return _storage._tools}
    set {_uniqueStorage()._tools = newValue}
  }

  /// Optional. Tool config. This config is shared for all tools provided in the
  /// request.
  public var toolConfig: Google_Cloud_Aiplatform_V1_ToolConfig {
    get {return _storage._toolConfig ?? Google_Cloud_Aiplatform_V1_ToolConfig()}
    set {_uniqueStorage()._toolConfig = newValue}
  }
  /// Returns true if `toolConfig` has been explicitly set.
  public var hasToolConfig: Bool {return _storage._toolConfig != nil}
  /// Clears the value of `toolConfig`. Subsequent reads from it will return its default value.
  public mutating func clearToolConfig() {_uniqueStorage()._toolConfig = nil}

  /// Optional. Per request settings for blocking unsafe content.
  /// Enforced on GenerateContentResponse.candidates.
  public var safetySettings: [Google_Cloud_Aiplatform_V1_SafetySetting] {
    get {return _storage._safetySettings}
    set {_uniqueStorage()._safetySettings = newValue}
  }

  /// Optional. Generation config.
  public var generationConfig: Google_Cloud_Aiplatform_V1_GenerationConfig {
    get {return _storage._generationConfig ?? Google_Cloud_Aiplatform_V1_GenerationConfig()}
    set {_uniqueStorage()._generationConfig = newValue}
  }
  /// Returns true if `generationConfig` has been explicitly set.
  public var hasGenerationConfig: Bool {return _storage._generationConfig != nil}
  /// Clears the value of `generationConfig`. Subsequent reads from it will return its default value.
  public mutating func clearGenerationConfig() {_uniqueStorage()._generationConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response message for [PredictionService.GenerateContent].
public struct Google_Cloud_Aiplatform_V1_GenerateContentResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Generated candidates.
  public var candidates: [Google_Cloud_Aiplatform_V1_Candidate] = []

  /// Output only. Content filter results for a prompt sent in the request.
  /// Note: Sent only in the first stream chunk.
  /// Only happens when no candidates were generated due to content violations.
  public var promptFeedback: Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback {
    get {return _promptFeedback ?? Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback()}
    set {_promptFeedback = newValue}
  }
  /// Returns true if `promptFeedback` has been explicitly set.
  public var hasPromptFeedback: Bool {return self._promptFeedback != nil}
  /// Clears the value of `promptFeedback`. Subsequent reads from it will return its default value.
  public mutating func clearPromptFeedback() {self._promptFeedback = nil}

  /// Usage metadata about the response(s).
  public var usageMetadata: Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata {
    get {return _usageMetadata ?? Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata()}
    set {_usageMetadata = newValue}
  }
  /// Returns true if `usageMetadata` has been explicitly set.
  public var hasUsageMetadata: Bool {return self._usageMetadata != nil}
  /// Clears the value of `usageMetadata`. Subsequent reads from it will return its default value.
  public mutating func clearUsageMetadata() {self._usageMetadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Content filter results for a prompt sent in the request.
  public struct PromptFeedback: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. Blocked reason.
    public var blockReason: Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback.BlockedReason = .unspecified

    /// Output only. Safety ratings.
    public var safetyRatings: [Google_Cloud_Aiplatform_V1_SafetyRating] = []

    /// Output only. A readable block reason message.
    public var blockReasonMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Blocked reason enumeration.
    public enum BlockedReason: SwiftProtobuf.Enum, Swift.CaseIterable {
      public typealias RawValue = Int

      /// Unspecified blocked reason.
      case unspecified // = 0

      /// Candidates blocked due to safety.
      case safety // = 1

      /// Candidates blocked due to other reason.
      case other // = 2

      /// Candidates blocked due to the terms which are included from the
      /// terminology blocklist.
      case blocklist // = 3

      /// Candidates blocked due to prohibited content.
      case prohibitedContent // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .unspecified
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .safety
        case 2: self = .other
        case 3: self = .blocklist
        case 4: self = .prohibitedContent
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .safety: return 1
        case .other: return 2
        case .blocklist: return 3
        case .prohibitedContent: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      public static let allCases: [Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback.BlockedReason] = [
        .unspecified,
        .safety,
        .other,
        .blocklist,
        .prohibitedContent,
      ]

    }

    public init() {}
  }

  /// Usage metadata about response(s).
  public struct UsageMetadata: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Number of tokens in the request. When `cached_content` is set, this is
    /// still the total effective prompt size meaning this includes the number of
    /// tokens in the cached content.
    public var promptTokenCount: Int32 = 0

    /// Number of tokens in the response(s).
    public var candidatesTokenCount: Int32 = 0

    public var totalTokenCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _promptFeedback: Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback? = nil
  fileprivate var _usageMetadata: Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_PredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "instances"),
    3: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.instances) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.instances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instances, fieldNumber: 2)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_PredictRequest, rhs: Google_Cloud_Aiplatform_V1_PredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.instances != rhs.instances {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_PredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "predictions"),
    2: .standard(proto: "deployed_model_id"),
    3: .same(proto: "model"),
    5: .standard(proto: "model_version_id"),
    4: .standard(proto: "model_display_name"),
    6: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.predictions) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deployedModelID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.modelDisplayName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.modelVersionID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.predictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.predictions, fieldNumber: 1)
    }
    if !self.deployedModelID.isEmpty {
      try visitor.visitSingularStringField(value: self.deployedModelID, fieldNumber: 2)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 3)
    }
    if !self.modelDisplayName.isEmpty {
      try visitor.visitSingularStringField(value: self.modelDisplayName, fieldNumber: 4)
    }
    if !self.modelVersionID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelVersionID, fieldNumber: 5)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_PredictResponse, rhs: Google_Cloud_Aiplatform_V1_PredictResponse) -> Bool {
    if lhs.predictions != rhs.predictions {return false}
    if lhs.deployedModelID != rhs.deployedModelID {return false}
    if lhs.model != rhs.model {return false}
    if lhs.modelVersionID != rhs.modelVersionID {return false}
    if lhs.modelDisplayName != rhs.modelDisplayName {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_RawPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RawPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .standard(proto: "http_body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._httpBody) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    try { if let v = self._httpBody {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_RawPredictRequest, rhs: Google_Cloud_Aiplatform_V1_RawPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs._httpBody != rhs._httpBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamRawPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamRawPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .standard(proto: "http_body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._httpBody) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    try { if let v = self._httpBody {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamRawPredictRequest, rhs: Google_Cloud_Aiplatform_V1_StreamRawPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs._httpBody != rhs._httpBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DirectPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "inputs"),
    3: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DirectPredictRequest, rhs: Google_Cloud_Aiplatform_V1_DirectPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DirectPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DirectPredictResponse, rhs: Google_Cloud_Aiplatform_V1_DirectPredictResponse) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DirectRawPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectRawPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .standard(proto: "method_name"),
    3: .same(proto: "input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.methodName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.input) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.methodName.isEmpty {
      try visitor.visitSingularStringField(value: self.methodName, fieldNumber: 2)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularBytesField(value: self.input, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DirectRawPredictRequest, rhs: Google_Cloud_Aiplatform_V1_DirectRawPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.methodName != rhs.methodName {return false}
    if lhs.input != rhs.input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_DirectRawPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectRawPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.output) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.output.isEmpty {
      try visitor.visitSingularBytesField(value: self.output, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_DirectRawPredictResponse, rhs: Google_Cloud_Aiplatform_V1_DirectRawPredictResponse) -> Bool {
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamDirectPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamDirectPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "inputs"),
    3: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamDirectPredictRequest, rhs: Google_Cloud_Aiplatform_V1_StreamDirectPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamDirectPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamDirectPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamDirectPredictResponse, rhs: Google_Cloud_Aiplatform_V1_StreamDirectPredictResponse) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamDirectRawPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamDirectRawPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .standard(proto: "method_name"),
    3: .same(proto: "input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.methodName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.input) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.methodName.isEmpty {
      try visitor.visitSingularStringField(value: self.methodName, fieldNumber: 2)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularBytesField(value: self.input, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamDirectRawPredictRequest, rhs: Google_Cloud_Aiplatform_V1_StreamDirectRawPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.methodName != rhs.methodName {return false}
    if lhs.input != rhs.input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamDirectRawPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamDirectRawPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.output) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.output.isEmpty {
      try visitor.visitSingularBytesField(value: self.output, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamDirectRawPredictResponse, rhs: Google_Cloud_Aiplatform_V1_StreamDirectRawPredictResponse) -> Bool {
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamingPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "inputs"),
    3: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamingPredictRequest, rhs: Google_Cloud_Aiplatform_V1_StreamingPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamingPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "outputs"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 1)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamingPredictResponse, rhs: Google_Cloud_Aiplatform_V1_StreamingPredictResponse) -> Bool {
    if lhs.outputs != rhs.outputs {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamingRawPredictRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingRawPredictRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .standard(proto: "method_name"),
    3: .same(proto: "input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.methodName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.input) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.methodName.isEmpty {
      try visitor.visitSingularStringField(value: self.methodName, fieldNumber: 2)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularBytesField(value: self.input, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamingRawPredictRequest, rhs: Google_Cloud_Aiplatform_V1_StreamingRawPredictRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.methodName != rhs.methodName {return false}
    if lhs.input != rhs.input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamingRawPredictResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingRawPredictResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.output) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.output.isEmpty {
      try visitor.visitSingularBytesField(value: self.output, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamingRawPredictResponse, rhs: Google_Cloud_Aiplatform_V1_StreamingRawPredictResponse) -> Bool {
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ExplainRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExplainRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "instances"),
    4: .same(proto: "parameters"),
    5: .standard(proto: "explanation_spec_override"),
    3: .standard(proto: "deployed_model_id"),
  ]

  fileprivate class _StorageClass {
    var _endpoint: String = String()
    var _instances: [SwiftProtobuf.Google_Protobuf_Value] = []
    var _parameters: SwiftProtobuf.Google_Protobuf_Value? = nil
    var _explanationSpecOverride: Google_Cloud_Aiplatform_V1_ExplanationSpecOverride? = nil
    var _deployedModelID: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _endpoint = source._endpoint
      _instances = source._instances
      _parameters = source._parameters
      _explanationSpecOverride = source._explanationSpecOverride
      _deployedModelID = source._deployedModelID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._endpoint) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._instances) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._deployedModelID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._parameters) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._explanationSpecOverride) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._endpoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endpoint, fieldNumber: 1)
      }
      if !_storage._instances.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._instances, fieldNumber: 2)
      }
      if !_storage._deployedModelID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deployedModelID, fieldNumber: 3)
      }
      try { if let v = _storage._parameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._explanationSpecOverride {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ExplainRequest, rhs: Google_Cloud_Aiplatform_V1_ExplainRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._endpoint != rhs_storage._endpoint {return false}
        if _storage._instances != rhs_storage._instances {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        if _storage._explanationSpecOverride != rhs_storage._explanationSpecOverride {return false}
        if _storage._deployedModelID != rhs_storage._deployedModelID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ExplainResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExplainResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "explanations"),
    2: .standard(proto: "deployed_model_id"),
    3: .same(proto: "predictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.explanations) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deployedModelID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.predictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.explanations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.explanations, fieldNumber: 1)
    }
    if !self.deployedModelID.isEmpty {
      try visitor.visitSingularStringField(value: self.deployedModelID, fieldNumber: 2)
    }
    if !self.predictions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.predictions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ExplainResponse, rhs: Google_Cloud_Aiplatform_V1_ExplainResponse) -> Bool {
    if lhs.explanations != rhs.explanations {return false}
    if lhs.deployedModelID != rhs.deployedModelID {return false}
    if lhs.predictions != rhs.predictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_CountTokensRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CountTokensRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    3: .same(proto: "model"),
    2: .same(proto: "instances"),
    4: .same(proto: "contents"),
    5: .standard(proto: "system_instruction"),
    6: .same(proto: "tools"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.instances) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.contents) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._systemInstruction) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.tools) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if !self.instances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instances, fieldNumber: 2)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 3)
    }
    if !self.contents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contents, fieldNumber: 4)
    }
    try { if let v = self._systemInstruction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.tools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tools, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_CountTokensRequest, rhs: Google_Cloud_Aiplatform_V1_CountTokensRequest) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.model != rhs.model {return false}
    if lhs.instances != rhs.instances {return false}
    if lhs.contents != rhs.contents {return false}
    if lhs._systemInstruction != rhs._systemInstruction {return false}
    if lhs.tools != rhs.tools {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_CountTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CountTokensResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_tokens"),
    2: .standard(proto: "total_billable_characters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalTokens) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalBillableCharacters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalTokens != 0 {
      try visitor.visitSingularInt32Field(value: self.totalTokens, fieldNumber: 1)
    }
    if self.totalBillableCharacters != 0 {
      try visitor.visitSingularInt32Field(value: self.totalBillableCharacters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_CountTokensResponse, rhs: Google_Cloud_Aiplatform_V1_CountTokensResponse) -> Bool {
    if lhs.totalTokens != rhs.totalTokens {return false}
    if lhs.totalBillableCharacters != rhs.totalBillableCharacters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_GenerateContentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateContentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "model"),
    2: .same(proto: "contents"),
    8: .standard(proto: "system_instruction"),
    6: .same(proto: "tools"),
    7: .standard(proto: "tool_config"),
    3: .standard(proto: "safety_settings"),
    4: .standard(proto: "generation_config"),
  ]

  fileprivate class _StorageClass {
    var _model: String = String()
    var _contents: [Google_Cloud_Aiplatform_V1_Content] = []
    var _systemInstruction: Google_Cloud_Aiplatform_V1_Content? = nil
    var _tools: [Google_Cloud_Aiplatform_V1_Tool] = []
    var _toolConfig: Google_Cloud_Aiplatform_V1_ToolConfig? = nil
    var _safetySettings: [Google_Cloud_Aiplatform_V1_SafetySetting] = []
    var _generationConfig: Google_Cloud_Aiplatform_V1_GenerationConfig? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _model = source._model
      _contents = source._contents
      _systemInstruction = source._systemInstruction
      _tools = source._tools
      _toolConfig = source._toolConfig
      _safetySettings = source._safetySettings
      _generationConfig = source._generationConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._contents) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._safetySettings) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._generationConfig) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._model) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._tools) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._toolConfig) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._systemInstruction) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._contents.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contents, fieldNumber: 2)
      }
      if !_storage._safetySettings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._safetySettings, fieldNumber: 3)
      }
      try { if let v = _storage._generationConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 5)
      }
      if !_storage._tools.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tools, fieldNumber: 6)
      }
      try { if let v = _storage._toolConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._systemInstruction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GenerateContentRequest, rhs: Google_Cloud_Aiplatform_V1_GenerateContentRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._model != rhs_storage._model {return false}
        if _storage._contents != rhs_storage._contents {return false}
        if _storage._systemInstruction != rhs_storage._systemInstruction {return false}
        if _storage._tools != rhs_storage._tools {return false}
        if _storage._toolConfig != rhs_storage._toolConfig {return false}
        if _storage._safetySettings != rhs_storage._safetySettings {return false}
        if _storage._generationConfig != rhs_storage._generationConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_GenerateContentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenerateContentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "candidates"),
    3: .standard(proto: "prompt_feedback"),
    4: .standard(proto: "usage_metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.candidates) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._promptFeedback) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._usageMetadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.candidates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.candidates, fieldNumber: 2)
    }
    try { if let v = self._promptFeedback {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._usageMetadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse, rhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse) -> Bool {
    if lhs.candidates != rhs.candidates {return false}
    if lhs._promptFeedback != rhs._promptFeedback {return false}
    if lhs._usageMetadata != rhs._usageMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_GenerateContentResponse.protoMessageName + ".PromptFeedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_reason"),
    2: .standard(proto: "safety_ratings"),
    3: .standard(proto: "block_reason_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.blockReason) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.safetyRatings) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.blockReasonMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockReason != .unspecified {
      try visitor.visitSingularEnumField(value: self.blockReason, fieldNumber: 1)
    }
    if !self.safetyRatings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.safetyRatings, fieldNumber: 2)
    }
    if !self.blockReasonMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.blockReasonMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback, rhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback) -> Bool {
    if lhs.blockReason != rhs.blockReason {return false}
    if lhs.safetyRatings != rhs.safetyRatings {return false}
    if lhs.blockReasonMessage != rhs.blockReasonMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_GenerateContentResponse.PromptFeedback.BlockedReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BLOCKED_REASON_UNSPECIFIED"),
    1: .same(proto: "SAFETY"),
    2: .same(proto: "OTHER"),
    3: .same(proto: "BLOCKLIST"),
    4: .same(proto: "PROHIBITED_CONTENT"),
  ]
}

extension Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_GenerateContentResponse.protoMessageName + ".UsageMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "prompt_token_count"),
    2: .standard(proto: "candidates_token_count"),
    3: .standard(proto: "total_token_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.promptTokenCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.candidatesTokenCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.totalTokenCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.promptTokenCount != 0 {
      try visitor.visitSingularInt32Field(value: self.promptTokenCount, fieldNumber: 1)
    }
    if self.candidatesTokenCount != 0 {
      try visitor.visitSingularInt32Field(value: self.candidatesTokenCount, fieldNumber: 2)
    }
    if self.totalTokenCount != 0 {
      try visitor.visitSingularInt32Field(value: self.totalTokenCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata, rhs: Google_Cloud_Aiplatform_V1_GenerateContentResponse.UsageMetadata) -> Bool {
    if lhs.promptTokenCount != rhs.promptTokenCount {return false}
    if lhs.candidatesTokenCount != rhs.candidatesTokenCount {return false}
    if lhs.totalTokenCount != rhs.totalTokenCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
