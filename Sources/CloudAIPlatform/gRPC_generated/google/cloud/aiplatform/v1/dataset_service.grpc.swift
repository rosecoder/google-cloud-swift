// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/dataset_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - google.cloud.aiplatform.v1.DatasetService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.DatasetService" service.
public enum Google_Cloud_Aiplatform_V1_DatasetService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.DatasetService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateDataset" metadata.
        public enum CreateDataset {
            /// Request type for "CreateDataset".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateDatasetRequest
            /// Response type for "CreateDataset".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateDataset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "CreateDataset"
            )
        }
        /// Namespace for "GetDataset" metadata.
        public enum GetDataset {
            /// Request type for "GetDataset".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetDatasetRequest
            /// Response type for "GetDataset".
            public typealias Output = Google_Cloud_Aiplatform_V1_Dataset
            /// Descriptor for "GetDataset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "GetDataset"
            )
        }
        /// Namespace for "UpdateDataset" metadata.
        public enum UpdateDataset {
            /// Request type for "UpdateDataset".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateDatasetRequest
            /// Response type for "UpdateDataset".
            public typealias Output = Google_Cloud_Aiplatform_V1_Dataset
            /// Descriptor for "UpdateDataset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "UpdateDataset"
            )
        }
        /// Namespace for "ListDatasets" metadata.
        public enum ListDatasets {
            /// Request type for "ListDatasets".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListDatasetsRequest
            /// Response type for "ListDatasets".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListDatasetsResponse
            /// Descriptor for "ListDatasets".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ListDatasets"
            )
        }
        /// Namespace for "DeleteDataset" metadata.
        public enum DeleteDataset {
            /// Request type for "DeleteDataset".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteDatasetRequest
            /// Response type for "DeleteDataset".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteDataset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "DeleteDataset"
            )
        }
        /// Namespace for "ImportData" metadata.
        public enum ImportData {
            /// Request type for "ImportData".
            public typealias Input = Google_Cloud_Aiplatform_V1_ImportDataRequest
            /// Response type for "ImportData".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "ImportData".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ImportData"
            )
        }
        /// Namespace for "ExportData" metadata.
        public enum ExportData {
            /// Request type for "ExportData".
            public typealias Input = Google_Cloud_Aiplatform_V1_ExportDataRequest
            /// Response type for "ExportData".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "ExportData".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ExportData"
            )
        }
        /// Namespace for "CreateDatasetVersion" metadata.
        public enum CreateDatasetVersion {
            /// Request type for "CreateDatasetVersion".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest
            /// Response type for "CreateDatasetVersion".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateDatasetVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "CreateDatasetVersion"
            )
        }
        /// Namespace for "UpdateDatasetVersion" metadata.
        public enum UpdateDatasetVersion {
            /// Request type for "UpdateDatasetVersion".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest
            /// Response type for "UpdateDatasetVersion".
            public typealias Output = Google_Cloud_Aiplatform_V1_DatasetVersion
            /// Descriptor for "UpdateDatasetVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "UpdateDatasetVersion"
            )
        }
        /// Namespace for "DeleteDatasetVersion" metadata.
        public enum DeleteDatasetVersion {
            /// Request type for "DeleteDatasetVersion".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest
            /// Response type for "DeleteDatasetVersion".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteDatasetVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "DeleteDatasetVersion"
            )
        }
        /// Namespace for "GetDatasetVersion" metadata.
        public enum GetDatasetVersion {
            /// Request type for "GetDatasetVersion".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest
            /// Response type for "GetDatasetVersion".
            public typealias Output = Google_Cloud_Aiplatform_V1_DatasetVersion
            /// Descriptor for "GetDatasetVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "GetDatasetVersion"
            )
        }
        /// Namespace for "ListDatasetVersions" metadata.
        public enum ListDatasetVersions {
            /// Request type for "ListDatasetVersions".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest
            /// Response type for "ListDatasetVersions".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse
            /// Descriptor for "ListDatasetVersions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ListDatasetVersions"
            )
        }
        /// Namespace for "RestoreDatasetVersion" metadata.
        public enum RestoreDatasetVersion {
            /// Request type for "RestoreDatasetVersion".
            public typealias Input = Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest
            /// Response type for "RestoreDatasetVersion".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "RestoreDatasetVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "RestoreDatasetVersion"
            )
        }
        /// Namespace for "ListDataItems" metadata.
        public enum ListDataItems {
            /// Request type for "ListDataItems".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListDataItemsRequest
            /// Response type for "ListDataItems".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListDataItemsResponse
            /// Descriptor for "ListDataItems".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ListDataItems"
            )
        }
        /// Namespace for "SearchDataItems" metadata.
        public enum SearchDataItems {
            /// Request type for "SearchDataItems".
            public typealias Input = Google_Cloud_Aiplatform_V1_SearchDataItemsRequest
            /// Response type for "SearchDataItems".
            public typealias Output = Google_Cloud_Aiplatform_V1_SearchDataItemsResponse
            /// Descriptor for "SearchDataItems".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "SearchDataItems"
            )
        }
        /// Namespace for "ListSavedQueries" metadata.
        public enum ListSavedQueries {
            /// Request type for "ListSavedQueries".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest
            /// Response type for "ListSavedQueries".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse
            /// Descriptor for "ListSavedQueries".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ListSavedQueries"
            )
        }
        /// Namespace for "DeleteSavedQuery" metadata.
        public enum DeleteSavedQuery {
            /// Request type for "DeleteSavedQuery".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest
            /// Response type for "DeleteSavedQuery".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteSavedQuery".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "DeleteSavedQuery"
            )
        }
        /// Namespace for "GetAnnotationSpec" metadata.
        public enum GetAnnotationSpec {
            /// Request type for "GetAnnotationSpec".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest
            /// Response type for "GetAnnotationSpec".
            public typealias Output = Google_Cloud_Aiplatform_V1_AnnotationSpec
            /// Descriptor for "GetAnnotationSpec".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "GetAnnotationSpec"
            )
        }
        /// Namespace for "ListAnnotations" metadata.
        public enum ListAnnotations {
            /// Request type for "ListAnnotations".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListAnnotationsRequest
            /// Response type for "ListAnnotations".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListAnnotationsResponse
            /// Descriptor for "ListAnnotations".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService"),
                method: "ListAnnotations"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.DatasetService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateDataset.descriptor,
            GetDataset.descriptor,
            UpdateDataset.descriptor,
            ListDatasets.descriptor,
            DeleteDataset.descriptor,
            ImportData.descriptor,
            ExportData.descriptor,
            CreateDatasetVersion.descriptor,
            UpdateDatasetVersion.descriptor,
            DeleteDatasetVersion.descriptor,
            GetDatasetVersion.descriptor,
            ListDatasetVersions.descriptor,
            RestoreDatasetVersion.descriptor,
            ListDataItems.descriptor,
            SearchDataItems.descriptor,
            ListSavedQueries.descriptor,
            DeleteSavedQuery.descriptor,
            GetAnnotationSpec.descriptor,
            ListAnnotations.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.DatasetService" service.
    public static let google_cloud_aiplatform_v1_DatasetService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.DatasetService")
}

// MARK: google.cloud.aiplatform.v1.DatasetService (client)

extension Google_Cloud_Aiplatform_V1_DatasetService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.DatasetService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The service that manages Vertex AI Dataset and its child resources.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDatasets" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Datasets in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDatasetsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDatasetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDatasets<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ImportData" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Imports data into a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ImportDataRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ImportDataRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func importData<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportDataRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportDataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ExportData" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Exports data from a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ExportDataRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ExportDataRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func exportData<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportDataRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportDataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a version from a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a DatasetVersion.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_DatasetVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_DatasetVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDatasetVersions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists DatasetVersions in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDatasetVersions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RestoreDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Restores a dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func restoreDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDataItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists DataItems in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDataItemsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDataItemsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDataItemsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDataItems<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SearchDataItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Searches DataItems in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchDataItemsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SearchDataItemsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_SearchDataItemsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func searchDataItems<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListSavedQueries" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists SavedQueries in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listSavedQueries<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteSavedQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a SavedQuery.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteSavedQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAnnotationSpec" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets an AnnotationSpec.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AnnotationSpec` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAnnotationSpec<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AnnotationSpec>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AnnotationSpec>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAnnotations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Annotations belongs to a dataitem
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListAnnotationsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListAnnotationsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListAnnotationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAnnotations<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.DatasetService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The service that manages Vertex AI Dataset and its child resources.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.CreateDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.GetDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.UpdateDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDatasets" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Datasets in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDatasetsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDatasetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDatasets<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ListDatasets.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.DeleteDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ImportData" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Imports data into a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ImportDataRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ImportDataRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func importData<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportDataRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportDataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ImportData.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ExportData" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Exports data from a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ExportDataRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ExportDataRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func exportData<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportDataRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportDataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ExportData.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a version from a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.CreateDatasetVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a DatasetVersion.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_DatasetVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.UpdateDatasetVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.DeleteDatasetVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_DatasetVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.GetDatasetVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDatasetVersions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists DatasetVersions in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDatasetVersions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ListDatasetVersions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RestoreDatasetVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Restores a dataset version.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func restoreDatasetVersion<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.RestoreDatasetVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDataItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists DataItems in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDataItemsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListDataItemsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListDataItemsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDataItems<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ListDataItems.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SearchDataItems" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Searches DataItems in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchDataItemsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_SearchDataItemsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_SearchDataItemsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func searchDataItems<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.SearchDataItems.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListSavedQueries" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists SavedQueries in a Dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listSavedQueries<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ListSavedQueries.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteSavedQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a SavedQuery.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteSavedQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.DeleteSavedQuery.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAnnotationSpec" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets an AnnotationSpec.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AnnotationSpec` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAnnotationSpec<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AnnotationSpec>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AnnotationSpec>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.GetAnnotationSpec.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAnnotations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Annotations belongs to a dataitem
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListAnnotationsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListAnnotationsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListAnnotationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAnnotations<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_DatasetService.Method.ListAnnotations.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_DatasetService.ClientProtocol {
    /// Call the "CreateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasets" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Datasets in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDatasets<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDatasets(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ImportData" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Imports data into a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ImportDataRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func importData<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.importData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ImportDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ExportData" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Exports data from a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ExportDataRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func exportData<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.exportData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ExportDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a version from a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDatasetVersion<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDatasetVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a DatasetVersion.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDatasetVersion<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDatasetVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Dataset version.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDatasetVersion<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteDatasetVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Dataset version.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDatasetVersion<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDatasetVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_DatasetVersion>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasetVersions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists DatasetVersions in a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDatasetVersions<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDatasetVersions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestoreDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Restores a dataset version.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func restoreDatasetVersion<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.restoreDatasetVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDataItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists DataItems in a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListDataItemsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDataItems<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDataItems(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchDataItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Searches DataItems in a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_SearchDataItemsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func searchDataItems<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.searchDataItems(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSavedQueries" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists SavedQueries in a Dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listSavedQueries<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listSavedQueries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSavedQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a SavedQuery.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSavedQuery<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteSavedQuery(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAnnotationSpec" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets an AnnotationSpec.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAnnotationSpec<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AnnotationSpec>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAnnotationSpec(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_AnnotationSpec>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAnnotations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Annotations belongs to a dataitem
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListAnnotationsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAnnotations<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAnnotations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_DatasetService.ClientProtocol {
    /// Call the "CreateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDataset<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDataset<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDataset<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasets" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Datasets in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDatasets<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListDatasetsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDatasets(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDataset<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ImportData" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Imports data into a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func importData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ImportDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.importData(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ExportData" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Exports data from a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func exportData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ExportDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.exportData(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a version from a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDatasetVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateDatasetVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDatasetVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a DatasetVersion.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDatasetVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateDatasetVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDatasetVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Dataset version.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDatasetVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteDatasetVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteDatasetVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Dataset version.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDatasetVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_DatasetVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetDatasetVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDatasetVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasetVersions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists DatasetVersions in a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDatasetVersions<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDatasetVersionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDatasetVersionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDatasetVersions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RestoreDatasetVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Restores a dataset version.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func restoreDatasetVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RestoreDatasetVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.restoreDatasetVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDataItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists DataItems in a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDataItems<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListDataItemsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListDataItemsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListDataItemsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDataItems(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SearchDataItems" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Searches DataItems in a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func searchDataItems<Result>(
        _ message: Google_Cloud_Aiplatform_V1_SearchDataItemsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchDataItemsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchDataItemsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.searchDataItems(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSavedQueries" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists SavedQueries in a Dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listSavedQueries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSavedQueriesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSavedQueriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSavedQueries(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSavedQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a SavedQuery.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSavedQuery<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSavedQueryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSavedQuery(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAnnotationSpec" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets an AnnotationSpec.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAnnotationSpec<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AnnotationSpec>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetAnnotationSpecRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAnnotationSpec(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAnnotations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Annotations belongs to a dataitem
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAnnotations<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListAnnotationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListAnnotationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListAnnotationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAnnotations(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}