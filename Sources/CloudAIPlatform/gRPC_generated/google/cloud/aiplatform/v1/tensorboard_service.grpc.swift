// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/tensorboard_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_TensorboardService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_TensorboardService
    public enum Method {
        public enum CreateTensorboard {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTensorboardRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "CreateTensorboard"
            )
        }
        public enum GetTensorboard {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTensorboardRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Tensorboard
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "GetTensorboard"
            )
        }
        public enum UpdateTensorboard {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "UpdateTensorboard"
            )
        }
        public enum ListTensorboards {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTensorboardsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTensorboardsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ListTensorboards"
            )
        }
        public enum DeleteTensorboard {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "DeleteTensorboard"
            )
        }
        public enum ReadTensorboardUsage {
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ReadTensorboardUsage"
            )
        }
        public enum ReadTensorboardSize {
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ReadTensorboardSize"
            )
        }
        public enum CreateTensorboardExperiment {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardExperiment
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "CreateTensorboardExperiment"
            )
        }
        public enum GetTensorboardExperiment {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardExperiment
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "GetTensorboardExperiment"
            )
        }
        public enum UpdateTensorboardExperiment {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardExperiment
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "UpdateTensorboardExperiment"
            )
        }
        public enum ListTensorboardExperiments {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ListTensorboardExperiments"
            )
        }
        public enum DeleteTensorboardExperiment {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "DeleteTensorboardExperiment"
            )
        }
        public enum CreateTensorboardRun {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardRun
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "CreateTensorboardRun"
            )
        }
        public enum BatchCreateTensorboardRuns {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "BatchCreateTensorboardRuns"
            )
        }
        public enum GetTensorboardRun {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardRun
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "GetTensorboardRun"
            )
        }
        public enum UpdateTensorboardRun {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardRun
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "UpdateTensorboardRun"
            )
        }
        public enum ListTensorboardRuns {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ListTensorboardRuns"
            )
        }
        public enum DeleteTensorboardRun {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "DeleteTensorboardRun"
            )
        }
        public enum BatchCreateTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "BatchCreateTensorboardTimeSeries"
            )
        }
        public enum CreateTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardTimeSeries
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "CreateTensorboardTimeSeries"
            )
        }
        public enum GetTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardTimeSeries
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "GetTensorboardTimeSeries"
            )
        }
        public enum UpdateTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_TensorboardTimeSeries
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "UpdateTensorboardTimeSeries"
            )
        }
        public enum ListTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ListTensorboardTimeSeries"
            )
        }
        public enum DeleteTensorboardTimeSeries {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "DeleteTensorboardTimeSeries"
            )
        }
        public enum BatchReadTensorboardTimeSeriesData {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "BatchReadTensorboardTimeSeriesData"
            )
        }
        public enum ReadTensorboardTimeSeriesData {
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ReadTensorboardTimeSeriesData"
            )
        }
        public enum ReadTensorboardBlobData {
            public typealias Input = Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ReadTensorboardBlobData"
            )
        }
        public enum WriteTensorboardExperimentData {
            public typealias Input = Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "WriteTensorboardExperimentData"
            )
        }
        public enum WriteTensorboardRunData {
            public typealias Input = Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "WriteTensorboardRunData"
            )
        }
        public enum ExportTensorboardTimeSeriesData {
            public typealias Input = Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_TensorboardService.descriptor.fullyQualifiedService,
                method: "ExportTensorboardTimeSeriesData"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateTensorboard.descriptor,
            GetTensorboard.descriptor,
            UpdateTensorboard.descriptor,
            ListTensorboards.descriptor,
            DeleteTensorboard.descriptor,
            ReadTensorboardUsage.descriptor,
            ReadTensorboardSize.descriptor,
            CreateTensorboardExperiment.descriptor,
            GetTensorboardExperiment.descriptor,
            UpdateTensorboardExperiment.descriptor,
            ListTensorboardExperiments.descriptor,
            DeleteTensorboardExperiment.descriptor,
            CreateTensorboardRun.descriptor,
            BatchCreateTensorboardRuns.descriptor,
            GetTensorboardRun.descriptor,
            UpdateTensorboardRun.descriptor,
            ListTensorboardRuns.descriptor,
            DeleteTensorboardRun.descriptor,
            BatchCreateTensorboardTimeSeries.descriptor,
            CreateTensorboardTimeSeries.descriptor,
            GetTensorboardTimeSeries.descriptor,
            UpdateTensorboardTimeSeries.descriptor,
            ListTensorboardTimeSeries.descriptor,
            DeleteTensorboardTimeSeries.descriptor,
            BatchReadTensorboardTimeSeriesData.descriptor,
            ReadTensorboardTimeSeriesData.descriptor,
            ReadTensorboardBlobData.descriptor,
            WriteTensorboardExperimentData.descriptor,
            WriteTensorboardRunData.descriptor,
            ExportTensorboardTimeSeriesData.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_TensorboardService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_TensorboardService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_TensorboardService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "TensorboardService"
    )
}

/// TensorboardService
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_TensorboardService_ClientProtocol: Sendable {
    /// Creates a Tensorboard.
    func createTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a Tensorboard.
    func getTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Tensorboard>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Tensorboard>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a Tensorboard.
    func updateTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Tensorboards in a Location.
    func listTensorboards<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Tensorboard.
    func deleteTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Returns a list of monthly active users for a given TensorBoard instance.
    func readTensorboardUsage<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Returns the storage size for a given TensorBoard instance.
    func readTensorboardSize<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a TensorboardExperiment.
    func createTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a TensorboardExperiment.
    func getTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a TensorboardExperiment.
    func updateTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists TensorboardExperiments in a Location.
    func listTensorboardExperiments<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a TensorboardExperiment.
    func deleteTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a TensorboardRun.
    func createTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Batch create TensorboardRuns.
    func batchCreateTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a TensorboardRun.
    func getTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a TensorboardRun.
    func updateTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists TensorboardRuns in a Location.
    func listTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a TensorboardRun.
    func deleteTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
    func batchCreateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a TensorboardTimeSeries.
    func createTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a TensorboardTimeSeries.
    func getTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a TensorboardTimeSeries.
    func updateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists TensorboardTimeSeries in a Location.
    func listTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a TensorboardTimeSeries.
    func deleteTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
    /// 1000 for scalars, 100 for tensors and blob references. If the number of
    /// data points stored is less than the limit, all data is returned.
    /// Otherwise, the number limit of data points is randomly selected from
    /// this time series and returned.
    func batchReadTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Reads a TensorboardTimeSeries' data. By default, if the number of data
    /// points stored is less than 1000, all data is returned. Otherwise, 1000
    /// data points is randomly selected from this time series and returned.
    /// This value can be changed by changing max_data_points, which can't be
    /// greater than 10k.
    func readTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets bytes of TensorboardBlobs.
    /// This is to allow reading blob data stored in consumer project's Cloud
    /// Storage bucket without users having to obtain Cloud Storage access
    /// permission.
    func readTensorboardBlobData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Write time series data points of multiple TensorboardTimeSeries in multiple
    /// TensorboardRun's. If any data fail to be ingested, an error is returned.
    func writeTensorboardExperimentData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Write time series data points into multiple TensorboardTimeSeries under
    /// a TensorboardRun. If any data fail to be ingested, an error is returned.
    func writeTensorboardRunData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
    /// responses.
    func exportTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_TensorboardService.ClientProtocol {
    public func createTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTensorboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Tensorboard>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTensorboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Tensorboard>(),
            options: options,
            body
        )
    }
    
    public func updateTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateTensorboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func listTensorboards<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTensorboards(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTensorboard(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func readTensorboardUsage<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.readTensorboardUsage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>(),
            options: options,
            body
        )
    }
    
    public func readTensorboardSize<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.readTensorboardSize(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>(),
            options: options,
            body
        )
    }
    
    public func createTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTensorboardExperiment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>(),
            options: options,
            body
        )
    }
    
    public func getTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTensorboardExperiment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>(),
            options: options,
            body
        )
    }
    
    public func updateTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateTensorboardExperiment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>(),
            options: options,
            body
        )
    }
    
    public func listTensorboardExperiments<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTensorboardExperiments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTensorboardExperiment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func createTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTensorboardRun(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>(),
            options: options,
            body
        )
    }
    
    public func batchCreateTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchCreateTensorboardRuns(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>(),
            options: options,
            body
        )
    }
    
    public func getTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTensorboardRun(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>(),
            options: options,
            body
        )
    }
    
    public func updateTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateTensorboardRun(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>(),
            options: options,
            body
        )
    }
    
    public func listTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTensorboardRuns(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTensorboardRun(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func batchCreateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchCreateTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>(),
            options: options,
            body
        )
    }
    
    public func createTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>(),
            options: options,
            body
        )
    }
    
    public func getTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>(),
            options: options,
            body
        )
    }
    
    public func updateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>(),
            options: options,
            body
        )
    }
    
    public func listTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTensorboardTimeSeries(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func batchReadTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchReadTensorboardTimeSeriesData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>(),
            options: options,
            body
        )
    }
    
    public func readTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.readTensorboardTimeSeriesData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>(),
            options: options,
            body
        )
    }
    
    public func readTensorboardBlobData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.readTensorboardBlobData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>(),
            options: options,
            body
        )
    }
    
    public func writeTensorboardExperimentData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.writeTensorboardExperimentData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>(),
            options: options,
            body
        )
    }
    
    public func writeTensorboardRunData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.writeTensorboardRunData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>(),
            options: options,
            body
        )
    }
    
    public func exportTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.exportTensorboardTimeSeriesData(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_TensorboardService.ClientProtocol {
    /// Creates a Tensorboard.
    public func createTensorboard<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTensorboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTensorboard(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a Tensorboard.
    public func getTensorboard<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTensorboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Tensorboard>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTensorboard(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a Tensorboard.
    public func updateTensorboard<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTensorboard(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Tensorboards in a Location.
    public func listTensorboards<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTensorboardsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTensorboards(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Tensorboard.
    public func deleteTensorboard<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTensorboard(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Returns a list of monthly active users for a given TensorBoard instance.
    public func readTensorboardUsage<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readTensorboardUsage(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Returns the storage size for a given TensorBoard instance.
    public func readTensorboardSize<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readTensorboardSize(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a TensorboardExperiment.
    public func createTensorboardExperiment<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTensorboardExperiment(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a TensorboardExperiment.
    public func getTensorboardExperiment<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTensorboardExperiment(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a TensorboardExperiment.
    public func updateTensorboardExperiment<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTensorboardExperiment(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists TensorboardExperiments in a Location.
    public func listTensorboardExperiments<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTensorboardExperiments(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a TensorboardExperiment.
    public func deleteTensorboardExperiment<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTensorboardExperiment(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a TensorboardRun.
    public func createTensorboardRun<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTensorboardRun(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Batch create TensorboardRuns.
    public func batchCreateTensorboardRuns<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchCreateTensorboardRuns(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a TensorboardRun.
    public func getTensorboardRun<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTensorboardRun(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a TensorboardRun.
    public func updateTensorboardRun<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTensorboardRun(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists TensorboardRuns in a Location.
    public func listTensorboardRuns<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTensorboardRuns(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a TensorboardRun.
    public func deleteTensorboardRun<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTensorboardRun(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
    public func batchCreateTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchCreateTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a TensorboardTimeSeries.
    public func createTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a TensorboardTimeSeries.
    public func getTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a TensorboardTimeSeries.
    public func updateTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists TensorboardTimeSeries in a Location.
    public func listTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a TensorboardTimeSeries.
    public func deleteTensorboardTimeSeries<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTensorboardTimeSeries(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
    /// 1000 for scalars, 100 for tensors and blob references. If the number of
    /// data points stored is less than the limit, all data is returned.
    /// Otherwise, the number limit of data points is randomly selected from
    /// this time series and returned.
    public func batchReadTensorboardTimeSeriesData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchReadTensorboardTimeSeriesData(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Reads a TensorboardTimeSeries' data. By default, if the number of data
    /// points stored is less than 1000, all data is returned. Otherwise, 1000
    /// data points is randomly selected from this time series and returned.
    /// This value can be changed by changing max_data_points, which can't be
    /// greater than 10k.
    public func readTensorboardTimeSeriesData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readTensorboardTimeSeriesData(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets bytes of TensorboardBlobs.
    /// This is to allow reading blob data stored in consumer project's Cloud
    /// Storage bucket without users having to obtain Cloud Storage access
    /// permission.
    public func readTensorboardBlobData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readTensorboardBlobData(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Write time series data points of multiple TensorboardTimeSeries in multiple
    /// TensorboardRun's. If any data fail to be ingested, an error is returned.
    public func writeTensorboardExperimentData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.writeTensorboardExperimentData(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Write time series data points into multiple TensorboardTimeSeries under
    /// a TensorboardRun. If any data fail to be ingested, an error is returned.
    public func writeTensorboardRunData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.writeTensorboardRunData(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
    /// responses.
    public func exportTensorboardTimeSeriesData<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.exportTensorboardTimeSeriesData(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// TensorboardService
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_TensorboardService_Client: Google_Cloud_Aiplatform_V1_TensorboardService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a Tensorboard.
    public func createTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.CreateTensorboard.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a Tensorboard.
    public func getTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Tensorboard>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Tensorboard>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.GetTensorboard.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a Tensorboard.
    public func updateTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.UpdateTensorboard.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Tensorboards in a Location.
    public func listTensorboards<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ListTensorboards.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Tensorboard.
    public func deleteTensorboard<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.DeleteTensorboard.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Returns a list of monthly active users for a given TensorBoard instance.
    public func readTensorboardUsage<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardUsageResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ReadTensorboardUsage.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Returns the storage size for a given TensorBoard instance.
    public func readTensorboardSize<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardSizeResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ReadTensorboardSize.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a TensorboardExperiment.
    public func createTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.CreateTensorboardExperiment.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a TensorboardExperiment.
    public func getTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.GetTensorboardExperiment.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a TensorboardExperiment.
    public func updateTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardExperiment>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardExperiment>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.UpdateTensorboardExperiment.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists TensorboardExperiments in a Location.
    public func listTensorboardExperiments<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardExperimentsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ListTensorboardExperiments.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a TensorboardExperiment.
    public func deleteTensorboardExperiment<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardExperimentRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.DeleteTensorboardExperiment.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a TensorboardRun.
    public func createTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.CreateTensorboardRun.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Batch create TensorboardRuns.
    public func batchCreateTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardRunsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.BatchCreateTensorboardRuns.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a TensorboardRun.
    public func getTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.GetTensorboardRun.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a TensorboardRun.
    public func updateTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardRun>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardRun>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.UpdateTensorboardRun.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists TensorboardRuns in a Location.
    public func listTensorboardRuns<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardRunsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ListTensorboardRuns.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a TensorboardRun.
    public func deleteTensorboardRun<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardRunRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.DeleteTensorboardRun.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
    public func batchCreateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchCreateTensorboardTimeSeriesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.BatchCreateTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a TensorboardTimeSeries.
    public func createTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.CreateTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a TensorboardTimeSeries.
    public func getTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.GetTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a TensorboardTimeSeries.
    public func updateTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_TensorboardTimeSeries>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.UpdateTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists TensorboardTimeSeries in a Location.
    public func listTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListTensorboardTimeSeriesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ListTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a TensorboardTimeSeries.
    public func deleteTensorboardTimeSeries<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteTensorboardTimeSeriesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.DeleteTensorboardTimeSeries.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
    /// 1000 for scalars, 100 for tensors and blob references. If the number of
    /// data points stored is less than the limit, all data is returned.
    /// Otherwise, the number limit of data points is randomly selected from
    /// this time series and returned.
    public func batchReadTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchReadTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.BatchReadTensorboardTimeSeriesData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Reads a TensorboardTimeSeries' data. By default, if the number of data
    /// points stored is less than 1000, all data is returned. Otherwise, 1000
    /// data points is randomly selected from this time series and returned.
    /// This value can be changed by changing max_data_points, which can't be
    /// greater than 10k.
    public func readTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ReadTensorboardTimeSeriesData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets bytes of TensorboardBlobs.
    /// This is to allow reading blob data stored in consumer project's Cloud
    /// Storage bucket without users having to obtain Cloud Storage access
    /// permission.
    public func readTensorboardBlobData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Aiplatform_V1_ReadTensorboardBlobDataResponse>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.serverStreaming(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ReadTensorboardBlobData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Write time series data points of multiple TensorboardTimeSeries in multiple
    /// TensorboardRun's. If any data fail to be ingested, an error is returned.
    public func writeTensorboardExperimentData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardExperimentDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.WriteTensorboardExperimentData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Write time series data points into multiple TensorboardTimeSeries under
    /// a TensorboardRun. If any data fail to be ingested, an error is returned.
    public func writeTensorboardRunData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_WriteTensorboardRunDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.WriteTensorboardRunData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
    /// responses.
    public func exportTensorboardTimeSeriesData<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ExportTensorboardTimeSeriesDataResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_TensorboardService.Method.ExportTensorboardTimeSeriesData.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}