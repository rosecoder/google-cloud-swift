// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/tensorboard_time_series.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TensorboardTimeSeries maps to times series produced in training runs
public struct Google_Cloud_Aiplatform_V1_TensorboardTimeSeries: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the TensorboardTimeSeries.
  public var name: String = String()

  /// Required. User provided name of this TensorboardTimeSeries.
  /// This value should be unique among all TensorboardTimeSeries resources
  /// belonging to the same TensorboardRun resource (parent resource).
  public var displayName: String = String()

  /// Description of this TensorboardTimeSeries.
  public var description_p: String = String()

  /// Required. Immutable. Type of TensorboardTimeSeries value.
  public var valueType: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.ValueType = .unspecified

  /// Output only. Timestamp when this TensorboardTimeSeries was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this TensorboardTimeSeries was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Used to perform a consistent read-modify-write updates. If not set, a blind
  /// "overwrite" update happens.
  public var etag: String = String()

  /// Immutable. Name of the plugin this time series pertain to. Such as Scalar,
  /// Tensor, Blob
  public var pluginName: String = String()

  /// Data of the current plugin, with the size limited to 65KB.
  public var pluginData: Data = Data()

  /// Output only. Scalar, Tensor, or Blob metadata for this
  /// TensorboardTimeSeries.
  public var metadata: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata {
    get {return _metadata ?? Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// An enum representing the value type of a TensorboardTimeSeries.
  public enum ValueType: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// The value type is unspecified.
    case unspecified // = 0

    /// Used for TensorboardTimeSeries that is a list of scalars.
    /// E.g. accuracy of a model over epochs/time.
    case scalar // = 1

    /// Used for TensorboardTimeSeries that is a list of tensors.
    /// E.g. histograms of weights of layer in a model over epoch/time.
    case tensor // = 2

    /// Used for TensorboardTimeSeries that is a list of blob sequences.
    /// E.g. set of sample images with labels over epochs/time.
    case blobSequence // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .scalar
      case 2: self = .tensor
      case 3: self = .blobSequence
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .scalar: return 1
      case .tensor: return 2
      case .blobSequence: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.ValueType] = [
      .unspecified,
      .scalar,
      .tensor,
      .blobSequence,
    ]

  }

  /// Describes metadata for a TensorboardTimeSeries.
  public struct Metadata: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. Max step index of all data points within a
    /// TensorboardTimeSeries.
    public var maxStep: Int64 = 0

    /// Output only. Max wall clock timestamp of all data points within a
    /// TensorboardTimeSeries.
    public var maxWallTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _maxWallTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_maxWallTime = newValue}
    }
    /// Returns true if `maxWallTime` has been explicitly set.
    public var hasMaxWallTime: Bool {return self._maxWallTime != nil}
    /// Clears the value of `maxWallTime`. Subsequent reads from it will return its default value.
    public mutating func clearMaxWallTime() {self._maxWallTime = nil}

    /// Output only. The largest blob sequence length (number of blobs) of all
    /// data points in this time series, if its ValueType is BLOB_SEQUENCE.
    public var maxBlobSequenceLength: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _maxWallTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _metadata: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_TensorboardTimeSeries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TensorboardTimeSeries"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "description"),
    4: .standard(proto: "value_type"),
    5: .standard(proto: "create_time"),
    6: .standard(proto: "update_time"),
    7: .same(proto: "etag"),
    8: .standard(proto: "plugin_name"),
    9: .standard(proto: "plugin_data"),
    10: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.valueType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.pluginName) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.pluginData) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if self.valueType != .unspecified {
      try visitor.visitSingularEnumField(value: self.valueType, fieldNumber: 4)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 7)
    }
    if !self.pluginName.isEmpty {
      try visitor.visitSingularStringField(value: self.pluginName, fieldNumber: 8)
    }
    if !self.pluginData.isEmpty {
      try visitor.visitSingularBytesField(value: self.pluginData, fieldNumber: 9)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries, rhs: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.valueType != rhs.valueType {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.pluginName != rhs.pluginName {return false}
    if lhs.pluginData != rhs.pluginData {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.ValueType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALUE_TYPE_UNSPECIFIED"),
    1: .same(proto: "SCALAR"),
    2: .same(proto: "TENSOR"),
    3: .same(proto: "BLOB_SEQUENCE"),
  ]
}

extension Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.protoMessageName + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_step"),
    2: .standard(proto: "max_wall_time"),
    3: .standard(proto: "max_blob_sequence_length"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.maxStep) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._maxWallTime) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.maxBlobSequenceLength) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.maxStep != 0 {
      try visitor.visitSingularInt64Field(value: self.maxStep, fieldNumber: 1)
    }
    try { if let v = self._maxWallTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.maxBlobSequenceLength != 0 {
      try visitor.visitSingularInt64Field(value: self.maxBlobSequenceLength, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata, rhs: Google_Cloud_Aiplatform_V1_TensorboardTimeSeries.Metadata) -> Bool {
    if lhs.maxStep != rhs.maxStep {return false}
    if lhs._maxWallTime != rhs._maxWallTime {return false}
    if lhs.maxBlobSequenceLength != rhs.maxBlobSequenceLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
