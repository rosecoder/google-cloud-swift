// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/feature_online_store.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Vertex AI Feature Online Store provides a centralized repository for serving
/// ML features and embedding indexes at low latency. The Feature Online Store is
/// a top-level container.
public struct Google_Cloud_Aiplatform_V1_FeatureOnlineStore: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var storageType: OneOf_StorageType? {
    get {return _storage._storageType}
    set {_uniqueStorage()._storageType = newValue}
  }

  /// Contains settings for the Cloud Bigtable instance that will be created
  /// to serve featureValues for all FeatureViews under this
  /// FeatureOnlineStore.
  public var bigtable: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable {
    get {
      if case .bigtable(let v)? = _storage._storageType {return v}
      return Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable()
    }
    set {_uniqueStorage()._storageType = .bigtable(newValue)}
  }

  /// Contains settings for the Optimized store that will be created
  /// to serve featureValues for all FeatureViews under this
  /// FeatureOnlineStore. When choose Optimized storage type, need to set
  /// [PrivateServiceConnectConfig.enable_private_service_connect][google.cloud.aiplatform.v1.PrivateServiceConnectConfig.enable_private_service_connect]
  /// to use private endpoint. Otherwise will use public endpoint by default.
  public var optimized: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized {
    get {
      if case .optimized(let v)? = _storage._storageType {return v}
      return Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized()
    }
    set {_uniqueStorage()._storageType = .optimized(newValue)}
  }

  /// Identifier. Name of the FeatureOnlineStore. Format:
  /// `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}`
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Output only. Timestamp when this FeatureOnlineStore was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return _storage._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {_uniqueStorage()._createTime = nil}

  /// Output only. Timestamp when this FeatureOnlineStore was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return _storage._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {_uniqueStorage()._updateTime = nil}

  /// Optional. Used to perform consistent read-modify-write updates. If not set,
  /// a blind "overwrite" update happens.
  public var etag: String {
    get {return _storage._etag}
    set {_uniqueStorage()._etag = newValue}
  }

  /// Optional. The labels with user-defined metadata to organize your
  /// FeatureOnlineStore.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  /// No more than 64 user labels can be associated with one
  /// FeatureOnlineStore(System labels are excluded)." System reserved label keys
  /// are prefixed with "aiplatform.googleapis.com/" and are immutable.
  public var labels: Dictionary<String,String> {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  /// Output only. State of the featureOnlineStore.
  public var state: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.State {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Optional. The dedicated serving endpoint for this FeatureOnlineStore, which
  /// is different from common Vertex service endpoint.
  public var dedicatedServingEndpoint: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint {
    get {return _storage._dedicatedServingEndpoint ?? Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint()}
    set {_uniqueStorage()._dedicatedServingEndpoint = newValue}
  }
  /// Returns true if `dedicatedServingEndpoint` has been explicitly set.
  public var hasDedicatedServingEndpoint: Bool {return _storage._dedicatedServingEndpoint != nil}
  /// Clears the value of `dedicatedServingEndpoint`. Subsequent reads from it will return its default value.
  public mutating func clearDedicatedServingEndpoint() {_uniqueStorage()._dedicatedServingEndpoint = nil}

  /// Optional. Customer-managed encryption key spec for data storage. If set,
  /// online store will be secured by this key.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _storage._encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_uniqueStorage()._encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return _storage._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {_uniqueStorage()._encryptionSpec = nil}

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool {
    get {return _storage._satisfiesPzs}
    set {_uniqueStorage()._satisfiesPzs = newValue}
  }

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool {
    get {return _storage._satisfiesPzi}
    set {_uniqueStorage()._satisfiesPzi = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StorageType: Equatable, Sendable {
    /// Contains settings for the Cloud Bigtable instance that will be created
    /// to serve featureValues for all FeatureViews under this
    /// FeatureOnlineStore.
    case bigtable(Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable)
    /// Contains settings for the Optimized store that will be created
    /// to serve featureValues for all FeatureViews under this
    /// FeatureOnlineStore. When choose Optimized storage type, need to set
    /// [PrivateServiceConnectConfig.enable_private_service_connect][google.cloud.aiplatform.v1.PrivateServiceConnectConfig.enable_private_service_connect]
    /// to use private endpoint. Otherwise will use public endpoint by default.
    case optimized(Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized)

  }

  /// Possible states a featureOnlineStore can have.
  public enum State: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Default value. This value is unused.
    case unspecified // = 0

    /// State when the featureOnlineStore configuration is not being updated and
    /// the fields reflect the current configuration of the featureOnlineStore.
    /// The featureOnlineStore is usable in this state.
    case stable // = 1

    /// The state of the featureOnlineStore configuration when it is being
    /// updated. During an update, the fields reflect either the original
    /// configuration or the updated configuration of the featureOnlineStore. The
    /// featureOnlineStore is still usable in this state.
    case updating // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .stable
      case 2: self = .updating
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .stable: return 1
      case .updating: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_FeatureOnlineStore.State] = [
      .unspecified,
      .stable,
      .updating,
    ]

  }

  public struct Bigtable: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. Autoscaling config applied to Bigtable Instance.
    public var autoScaling: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling {
      get {return _autoScaling ?? Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling()}
      set {_autoScaling = newValue}
    }
    /// Returns true if `autoScaling` has been explicitly set.
    public var hasAutoScaling: Bool {return self._autoScaling != nil}
    /// Clears the value of `autoScaling`. Subsequent reads from it will return its default value.
    public mutating func clearAutoScaling() {self._autoScaling = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct AutoScaling: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The minimum number of nodes to scale down to. Must be greater
      /// than or equal to 1.
      public var minNodeCount: Int32 = 0

      /// Required. The maximum number of nodes to scale up to. Must be greater
      /// than or equal to min_node_count, and less than or equal to 10 times of
      /// 'min_node_count'.
      public var maxNodeCount: Int32 = 0

      /// Optional. A percentage of the cluster's CPU capacity. Can be from 10%
      /// to 80%. When a cluster's CPU utilization exceeds the target that you
      /// have set, Bigtable immediately adds nodes to the cluster. When CPU
      /// utilization is substantially lower than the target, Bigtable removes
      /// nodes. If not set will default to 50%.
      public var cpuUtilizationTarget: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _autoScaling: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling? = nil
  }

  /// Optimized storage type
  public struct Optimized: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// The dedicated serving endpoint for this FeatureOnlineStore. Only need to
  /// set when you choose Optimized storage type. Public endpoint is provisioned
  /// by default.
  public struct DedicatedServingEndpoint: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Output only. This field will be populated with the domain name to use for
    /// this FeatureOnlineStore
    public var publicEndpointDomainName: String = String()

    /// Optional. Private service connect config. The private service connection
    /// is available only for Optimized storage type, not for embedding
    /// management now. If
    /// [PrivateServiceConnectConfig.enable_private_service_connect][google.cloud.aiplatform.v1.PrivateServiceConnectConfig.enable_private_service_connect]
    /// set to true, customers will use private service connection to send
    /// request. Otherwise, the connection will set to public endpoint.
    public var privateServiceConnectConfig: Google_Cloud_Aiplatform_V1_PrivateServiceConnectConfig {
      get {return _privateServiceConnectConfig ?? Google_Cloud_Aiplatform_V1_PrivateServiceConnectConfig()}
      set {_privateServiceConnectConfig = newValue}
    }
    /// Returns true if `privateServiceConnectConfig` has been explicitly set.
    public var hasPrivateServiceConnectConfig: Bool {return self._privateServiceConnectConfig != nil}
    /// Clears the value of `privateServiceConnectConfig`. Subsequent reads from it will return its default value.
    public mutating func clearPrivateServiceConnectConfig() {self._privateServiceConnectConfig = nil}

    /// Output only. The name of the service attachment resource. Populated if
    /// private service connect is enabled and after FeatureViewSync is created.
    public var serviceAttachment: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _privateServiceConnectConfig: Google_Cloud_Aiplatform_V1_PrivateServiceConnectConfig? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeatureOnlineStore"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .same(proto: "bigtable"),
    12: .same(proto: "optimized"),
    1: .same(proto: "name"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .same(proto: "etag"),
    6: .same(proto: "labels"),
    7: .same(proto: "state"),
    10: .standard(proto: "dedicated_serving_endpoint"),
    13: .standard(proto: "encryption_spec"),
    15: .standard(proto: "satisfies_pzs"),
    16: .standard(proto: "satisfies_pzi"),
  ]

  fileprivate class _StorageClass {
    var _storageType: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.OneOf_StorageType?
    var _name: String = String()
    var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _etag: String = String()
    var _labels: Dictionary<String,String> = [:]
    var _state: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.State = .unspecified
    var _dedicatedServingEndpoint: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint? = nil
    var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil
    var _satisfiesPzs: Bool = false
    var _satisfiesPzi: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _storageType = source._storageType
      _name = source._name
      _createTime = source._createTime
      _updateTime = source._updateTime
      _etag = source._etag
      _labels = source._labels
      _state = source._state
      _dedicatedServingEndpoint = source._dedicatedServingEndpoint
      _encryptionSpec = source._encryptionSpec
      _satisfiesPzs = source._satisfiesPzs
      _satisfiesPzi = source._satisfiesPzi
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._createTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._updateTime) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._etag) }()
        case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._labels) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 8: try {
          var v: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable?
          var hadOneofValue = false
          if let current = _storage._storageType {
            hadOneofValue = true
            if case .bigtable(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._storageType = .bigtable(v)
          }
        }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dedicatedServingEndpoint) }()
        case 12: try {
          var v: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized?
          var hadOneofValue = false
          if let current = _storage._storageType {
            hadOneofValue = true
            if case .optimized(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._storageType = .optimized(v)
          }
        }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._encryptionSpec) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzs) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._satisfiesPzi) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      try { if let v = _storage._createTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._updateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._etag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._etag, fieldNumber: 5)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._labels, fieldNumber: 6)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 7)
      }
      try { if case .bigtable(let v)? = _storage._storageType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dedicatedServingEndpoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if case .optimized(let v)? = _storage._storageType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._encryptionSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if _storage._satisfiesPzs != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzs, fieldNumber: 15)
      }
      if _storage._satisfiesPzi != false {
        try visitor.visitSingularBoolField(value: _storage._satisfiesPzi, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore, rhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._storageType != rhs_storage._storageType {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._etag != rhs_storage._etag {return false}
        if _storage._labels != rhs_storage._labels {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._dedicatedServingEndpoint != rhs_storage._dedicatedServingEndpoint {return false}
        if _storage._encryptionSpec != rhs_storage._encryptionSpec {return false}
        if _storage._satisfiesPzs != rhs_storage._satisfiesPzs {return false}
        if _storage._satisfiesPzi != rhs_storage._satisfiesPzi {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "STABLE"),
    2: .same(proto: "UPDATING"),
  ]
}

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureOnlineStore.protoMessageName + ".Bigtable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auto_scaling"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._autoScaling) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._autoScaling {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable, rhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable) -> Bool {
    if lhs._autoScaling != rhs._autoScaling {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.protoMessageName + ".AutoScaling"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_node_count"),
    2: .standard(proto: "max_node_count"),
    3: .standard(proto: "cpu_utilization_target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minNodeCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.maxNodeCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.cpuUtilizationTarget) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.minNodeCount, fieldNumber: 1)
    }
    if self.maxNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.maxNodeCount, fieldNumber: 2)
    }
    if self.cpuUtilizationTarget != 0 {
      try visitor.visitSingularInt32Field(value: self.cpuUtilizationTarget, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling, rhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Bigtable.AutoScaling) -> Bool {
    if lhs.minNodeCount != rhs.minNodeCount {return false}
    if lhs.maxNodeCount != rhs.maxNodeCount {return false}
    if lhs.cpuUtilizationTarget != rhs.cpuUtilizationTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureOnlineStore.protoMessageName + ".Optimized"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized, rhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.Optimized) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureOnlineStore.protoMessageName + ".DedicatedServingEndpoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "public_endpoint_domain_name"),
    3: .standard(proto: "private_service_connect_config"),
    4: .standard(proto: "service_attachment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.publicEndpointDomainName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._privateServiceConnectConfig) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serviceAttachment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.publicEndpointDomainName.isEmpty {
      try visitor.visitSingularStringField(value: self.publicEndpointDomainName, fieldNumber: 2)
    }
    try { if let v = self._privateServiceConnectConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.serviceAttachment.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceAttachment, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint, rhs: Google_Cloud_Aiplatform_V1_FeatureOnlineStore.DedicatedServingEndpoint) -> Bool {
    if lhs.publicEndpointDomainName != rhs.publicEndpointDomainName {return false}
    if lhs._privateServiceConnectConfig != rhs._privateServiceConnectConfig {return false}
    if lhs.serviceAttachment != rhs.serviceAttachment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
