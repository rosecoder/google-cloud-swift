// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/index_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.aiplatform.v1.IndexService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.IndexService" service.
public enum Google_Cloud_Aiplatform_V1_IndexService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.IndexService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateIndex" metadata.
        public enum CreateIndex {
            /// Request type for "CreateIndex".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateIndexRequest
            /// Response type for "CreateIndex".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateIndex".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "CreateIndex"
            )
        }
        /// Namespace for "GetIndex" metadata.
        public enum GetIndex {
            /// Request type for "GetIndex".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetIndexRequest
            /// Response type for "GetIndex".
            public typealias Output = Google_Cloud_Aiplatform_V1_Index
            /// Descriptor for "GetIndex".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "GetIndex"
            )
        }
        /// Namespace for "ListIndexes" metadata.
        public enum ListIndexes {
            /// Request type for "ListIndexes".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListIndexesRequest
            /// Response type for "ListIndexes".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListIndexesResponse
            /// Descriptor for "ListIndexes".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "ListIndexes"
            )
        }
        /// Namespace for "UpdateIndex" metadata.
        public enum UpdateIndex {
            /// Request type for "UpdateIndex".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateIndexRequest
            /// Response type for "UpdateIndex".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "UpdateIndex".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "UpdateIndex"
            )
        }
        /// Namespace for "DeleteIndex" metadata.
        public enum DeleteIndex {
            /// Request type for "DeleteIndex".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteIndexRequest
            /// Response type for "DeleteIndex".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteIndex".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "DeleteIndex"
            )
        }
        /// Namespace for "UpsertDatapoints" metadata.
        public enum UpsertDatapoints {
            /// Request type for "UpsertDatapoints".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest
            /// Response type for "UpsertDatapoints".
            public typealias Output = Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse
            /// Descriptor for "UpsertDatapoints".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "UpsertDatapoints"
            )
        }
        /// Namespace for "RemoveDatapoints" metadata.
        public enum RemoveDatapoints {
            /// Request type for "RemoveDatapoints".
            public typealias Input = Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest
            /// Response type for "RemoveDatapoints".
            public typealias Output = Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse
            /// Descriptor for "RemoveDatapoints".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService"),
                method: "RemoveDatapoints"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.IndexService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateIndex.descriptor,
            GetIndex.descriptor,
            ListIndexes.descriptor,
            UpdateIndex.descriptor,
            DeleteIndex.descriptor,
            UpsertDatapoints.descriptor,
            RemoveDatapoints.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.IndexService" service.
    public static let google_cloud_aiplatform_v1_IndexService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.IndexService")
}

// MARK: google.cloud.aiplatform.v1.IndexService (client)

extension Google_Cloud_Aiplatform_V1_IndexService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.IndexService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for creating and managing Vertex AI's Index resources.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Index` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Index>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Index>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListIndexes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Indexes in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListIndexesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListIndexesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListIndexesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listIndexes<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListIndexesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListIndexesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListIndexesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListIndexesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Index.
        /// > An Index can only be deleted when all its
        /// > [DeployedIndexes][google.cloud.aiplatform.v1.Index.deployed_indexes] had
        /// > been undeployed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpsertDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add/update Datapoints into an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func upsertDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove Datapoints from an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.IndexService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for creating and managing Vertex AI's Index resources.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.CreateIndex.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Index` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Index>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Index>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.GetIndex.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListIndexes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Indexes in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListIndexesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListIndexesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListIndexesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listIndexes<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListIndexesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListIndexesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListIndexesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListIndexesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.ListIndexes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.UpdateIndex.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteIndex" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Index.
        /// > An Index can only be deleted when all its
        /// > [DeployedIndexes][google.cloud.aiplatform.v1.Index.deployed_indexes] had
        /// > been undeployed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteIndexRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteIndexRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteIndex<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.DeleteIndex.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpsertDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add/update Datapoints into an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func upsertDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.UpsertDatapoints.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveDatapoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove Datapoints from an Index.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func removeDatapoints<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_IndexService.Method.RemoveDatapoints.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_IndexService.ClientProtocol {
    /// Call the "CreateIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Index.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateIndexRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createIndex<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateIndexRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createIndex(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateIndexRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets an Index.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetIndexRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getIndex<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetIndexRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Index>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getIndex(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetIndexRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Index>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListIndexes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Indexes in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListIndexesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listIndexes<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListIndexesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListIndexesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listIndexes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListIndexesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListIndexesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates an Index.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateIndexRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateIndex<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateIndex(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Index.
    /// > An Index can only be deleted when all its
    /// > [DeployedIndexes][google.cloud.aiplatform.v1.Index.deployed_indexes] had
    /// > been undeployed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteIndexRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteIndex<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteIndex(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add/update Datapoints into an Index.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func upsertDatapoints<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.upsertDatapoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove Datapoints from an Index.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeDatapoints<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeDatapoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_IndexService.ClientProtocol {
    /// Call the "CreateIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Index.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createIndex<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateIndexRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateIndexRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createIndex(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets an Index.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getIndex<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetIndexRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Index>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetIndexRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getIndex(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListIndexes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Indexes in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listIndexes<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListIndexesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListIndexesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListIndexesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listIndexes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates an Index.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateIndex<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateIndexRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateIndexRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateIndex(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteIndex" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Index.
    /// > An Index can only be deleted when all its
    /// > [DeployedIndexes][google.cloud.aiplatform.v1.Index.deployed_indexes] had
    /// > been undeployed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteIndex<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteIndexRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteIndexRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteIndex(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpsertDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add/update Datapoints into an Index.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func upsertDatapoints<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_UpsertDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpsertDatapointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.upsertDatapoints(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveDatapoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove Datapoints from an Index.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeDatapoints<Result>(
        _ message: Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveDatapointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveDatapointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeDatapoints(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}