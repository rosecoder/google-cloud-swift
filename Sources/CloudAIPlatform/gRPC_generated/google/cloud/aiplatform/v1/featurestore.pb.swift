// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/featurestore.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Vertex AI Feature Store provides a centralized repository for organizing,
/// storing, and serving ML features. The Featurestore is a top-level container
/// for your features and their values.
public struct Google_Cloud_Aiplatform_V1_Featurestore: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. Name of the Featurestore. Format:
  /// `projects/{project}/locations/{location}/featurestores/{featurestore}`
  public var name: String = String()

  /// Output only. Timestamp when this Featurestore was created.
  public var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  public var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreateTime() {self._createTime = nil}

  /// Output only. Timestamp when this Featurestore was last updated.
  public var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  public var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  public mutating func clearUpdateTime() {self._updateTime = nil}

  /// Optional. Used to perform consistent read-modify-write updates. If not set,
  /// a blind "overwrite" update happens.
  public var etag: String = String()

  /// Optional. The labels with user-defined metadata to organize your
  /// Featurestore.
  ///
  /// Label keys and values can be no longer than 64 characters
  /// (Unicode codepoints), can only contain lowercase letters, numeric
  /// characters, underscores and dashes. International characters are allowed.
  ///
  /// See https://goo.gl/xmQnxf for more information on and examples of labels.
  /// No more than 64 user labels can be associated with one Featurestore(System
  /// labels are excluded)."
  /// System reserved label keys are prefixed with "aiplatform.googleapis.com/"
  /// and are immutable.
  public var labels: Dictionary<String,String> = [:]

  /// Optional. Config for online storage resources. The field should not
  /// co-exist with the field of `OnlineStoreReplicationConfig`. If both of it
  /// and OnlineStoreReplicationConfig are unset, the feature store will not have
  /// an online store and cannot be used for online serving.
  public var onlineServingConfig: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig {
    get {return _onlineServingConfig ?? Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig()}
    set {_onlineServingConfig = newValue}
  }
  /// Returns true if `onlineServingConfig` has been explicitly set.
  public var hasOnlineServingConfig: Bool {return self._onlineServingConfig != nil}
  /// Clears the value of `onlineServingConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOnlineServingConfig() {self._onlineServingConfig = nil}

  /// Output only. State of the featurestore.
  public var state: Google_Cloud_Aiplatform_V1_Featurestore.State = .unspecified

  /// Optional. TTL in days for feature values that will be stored in online
  /// serving storage. The Feature Store online storage periodically removes
  /// obsolete feature values older than `online_storage_ttl_days` since the
  /// feature generation time. Note that `online_storage_ttl_days` should be less
  /// than or equal to `offline_storage_ttl_days` for each EntityType under a
  /// featurestore. If not set, default to 4000 days
  public var onlineStorageTtlDays: Int32 = 0

  /// Optional. Customer-managed encryption key spec for data storage. If set,
  /// both of the online and offline data storage will be secured by this key.
  public var encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec {
    get {return _encryptionSpec ?? Google_Cloud_Aiplatform_V1_EncryptionSpec()}
    set {_encryptionSpec = newValue}
  }
  /// Returns true if `encryptionSpec` has been explicitly set.
  public var hasEncryptionSpec: Bool {return self._encryptionSpec != nil}
  /// Clears the value of `encryptionSpec`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionSpec() {self._encryptionSpec = nil}

  /// Output only. Reserved for future use.
  public var satisfiesPzs: Bool = false

  /// Output only. Reserved for future use.
  public var satisfiesPzi: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible states a featurestore can have.
  public enum State: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Default value. This value is unused.
    case unspecified // = 0

    /// State when the featurestore configuration is not being updated and the
    /// fields reflect the current configuration of the featurestore. The
    /// featurestore is usable in this state.
    case stable // = 1

    /// The state of the featurestore configuration when it is being updated.
    /// During an update, the fields reflect either the original configuration
    /// or the updated configuration of the featurestore. For example,
    /// `online_serving_config.fixed_node_count` can take minutes to update.
    /// While the update is in progress, the featurestore is in the UPDATING
    /// state, and the value of `fixed_node_count` can be the original value or
    /// the updated value, depending on the progress of the operation. Until the
    /// update completes, the actual number of nodes can still be the original
    /// value of `fixed_node_count`. The featurestore is still usable in this
    /// state.
    case updating // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .stable
      case 2: self = .updating
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .stable: return 1
      case .updating: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Google_Cloud_Aiplatform_V1_Featurestore.State] = [
      .unspecified,
      .stable,
      .updating,
    ]

  }

  /// OnlineServingConfig specifies the details for provisioning online serving
  /// resources.
  public struct OnlineServingConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The number of nodes for the online store. The number of nodes doesn't
    /// scale automatically, but you can manually update the number of
    /// nodes. If set to 0, the featurestore will not have an
    /// online store and cannot be used for online serving.
    public var fixedNodeCount: Int32 = 0

    /// Online serving scaling configuration.
    /// Only one of `fixed_node_count` and `scaling` can be set. Setting one will
    /// reset the other.
    public var scaling: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling {
      get {return _scaling ?? Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling()}
      set {_scaling = newValue}
    }
    /// Returns true if `scaling` has been explicitly set.
    public var hasScaling: Bool {return self._scaling != nil}
    /// Clears the value of `scaling`. Subsequent reads from it will return its default value.
    public mutating func clearScaling() {self._scaling = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Online serving scaling configuration. If min_node_count and
    /// max_node_count are set to the same value, the cluster will be configured
    /// with the fixed number of node (no auto-scaling).
    public struct Scaling: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Required. The minimum number of nodes to scale down to. Must be greater
      /// than or equal to 1.
      public var minNodeCount: Int32 = 0

      /// The maximum number of nodes to scale up to. Must be greater than
      /// min_node_count, and less than or equal to 10 times of 'min_node_count'.
      public var maxNodeCount: Int32 = 0

      /// Optional. The cpu utilization that the Autoscaler should be trying to
      /// achieve. This number is on a scale from 0 (no utilization) to 100
      /// (total utilization), and is limited between 10 and 80. When a cluster's
      /// CPU utilization exceeds the target that you have set, Bigtable
      /// immediately adds nodes to the cluster. When CPU utilization is
      /// substantially lower than the target, Bigtable removes nodes. If not set
      /// or set to 0, default to 50.
      public var cpuUtilizationTarget: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _scaling: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling? = nil
  }

  public init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _onlineServingConfig: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig? = nil
  fileprivate var _encryptionSpec: Google_Cloud_Aiplatform_V1_EncryptionSpec? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_Featurestore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Featurestore"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "create_time"),
    4: .standard(proto: "update_time"),
    5: .same(proto: "etag"),
    6: .same(proto: "labels"),
    7: .standard(proto: "online_serving_config"),
    8: .same(proto: "state"),
    13: .standard(proto: "online_storage_ttl_days"),
    10: .standard(proto: "encryption_spec"),
    14: .standard(proto: "satisfies_pzs"),
    15: .standard(proto: "satisfies_pzi"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._onlineServingConfig) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._encryptionSpec) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.onlineStorageTtlDays) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.satisfiesPzs) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self.satisfiesPzi) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 5)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 6)
    }
    try { if let v = self._onlineServingConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 8)
    }
    try { if let v = self._encryptionSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if self.onlineStorageTtlDays != 0 {
      try visitor.visitSingularInt32Field(value: self.onlineStorageTtlDays, fieldNumber: 13)
    }
    if self.satisfiesPzs != false {
      try visitor.visitSingularBoolField(value: self.satisfiesPzs, fieldNumber: 14)
    }
    if self.satisfiesPzi != false {
      try visitor.visitSingularBoolField(value: self.satisfiesPzi, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Featurestore, rhs: Google_Cloud_Aiplatform_V1_Featurestore) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._onlineServingConfig != rhs._onlineServingConfig {return false}
    if lhs.state != rhs.state {return false}
    if lhs.onlineStorageTtlDays != rhs.onlineStorageTtlDays {return false}
    if lhs._encryptionSpec != rhs._encryptionSpec {return false}
    if lhs.satisfiesPzs != rhs.satisfiesPzs {return false}
    if lhs.satisfiesPzi != rhs.satisfiesPzi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Featurestore.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNSPECIFIED"),
    1: .same(proto: "STABLE"),
    2: .same(proto: "UPDATING"),
  ]
}

extension Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_Featurestore.protoMessageName + ".OnlineServingConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "fixed_node_count"),
    4: .same(proto: "scaling"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.fixedNodeCount) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._scaling) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.fixedNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.fixedNodeCount, fieldNumber: 2)
    }
    try { if let v = self._scaling {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig, rhs: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig) -> Bool {
    if lhs.fixedNodeCount != rhs.fixedNodeCount {return false}
    if lhs._scaling != rhs._scaling {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.protoMessageName + ".Scaling"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_node_count"),
    2: .standard(proto: "max_node_count"),
    3: .standard(proto: "cpu_utilization_target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minNodeCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.maxNodeCount) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.cpuUtilizationTarget) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.minNodeCount, fieldNumber: 1)
    }
    if self.maxNodeCount != 0 {
      try visitor.visitSingularInt32Field(value: self.maxNodeCount, fieldNumber: 2)
    }
    if self.cpuUtilizationTarget != 0 {
      try visitor.visitSingularInt32Field(value: self.cpuUtilizationTarget, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling, rhs: Google_Cloud_Aiplatform_V1_Featurestore.OnlineServingConfig.Scaling) -> Bool {
    if lhs.minNodeCount != rhs.minNodeCount {return false}
    if lhs.maxNodeCount != rhs.maxNodeCount {return false}
    if lhs.cpuUtilizationTarget != rhs.cpuUtilizationTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
