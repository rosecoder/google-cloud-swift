// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/metadata_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - google.cloud.aiplatform.v1.MetadataService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.MetadataService" service.
public enum Google_Cloud_Aiplatform_V1_MetadataService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.MetadataService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateMetadataStore" metadata.
        public enum CreateMetadataStore {
            /// Request type for "CreateMetadataStore".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest
            /// Response type for "CreateMetadataStore".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "CreateMetadataStore".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "CreateMetadataStore"
            )
        }
        /// Namespace for "GetMetadataStore" metadata.
        public enum GetMetadataStore {
            /// Request type for "GetMetadataStore".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest
            /// Response type for "GetMetadataStore".
            public typealias Output = Google_Cloud_Aiplatform_V1_MetadataStore
            /// Descriptor for "GetMetadataStore".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "GetMetadataStore"
            )
        }
        /// Namespace for "ListMetadataStores" metadata.
        public enum ListMetadataStores {
            /// Request type for "ListMetadataStores".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest
            /// Response type for "ListMetadataStores".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse
            /// Descriptor for "ListMetadataStores".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "ListMetadataStores"
            )
        }
        /// Namespace for "DeleteMetadataStore" metadata.
        public enum DeleteMetadataStore {
            /// Request type for "DeleteMetadataStore".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest
            /// Response type for "DeleteMetadataStore".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteMetadataStore".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "DeleteMetadataStore"
            )
        }
        /// Namespace for "CreateArtifact" metadata.
        public enum CreateArtifact {
            /// Request type for "CreateArtifact".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateArtifactRequest
            /// Response type for "CreateArtifact".
            public typealias Output = Google_Cloud_Aiplatform_V1_Artifact
            /// Descriptor for "CreateArtifact".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "CreateArtifact"
            )
        }
        /// Namespace for "GetArtifact" metadata.
        public enum GetArtifact {
            /// Request type for "GetArtifact".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetArtifactRequest
            /// Response type for "GetArtifact".
            public typealias Output = Google_Cloud_Aiplatform_V1_Artifact
            /// Descriptor for "GetArtifact".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "GetArtifact"
            )
        }
        /// Namespace for "ListArtifacts" metadata.
        public enum ListArtifacts {
            /// Request type for "ListArtifacts".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListArtifactsRequest
            /// Response type for "ListArtifacts".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListArtifactsResponse
            /// Descriptor for "ListArtifacts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "ListArtifacts"
            )
        }
        /// Namespace for "UpdateArtifact" metadata.
        public enum UpdateArtifact {
            /// Request type for "UpdateArtifact".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateArtifactRequest
            /// Response type for "UpdateArtifact".
            public typealias Output = Google_Cloud_Aiplatform_V1_Artifact
            /// Descriptor for "UpdateArtifact".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "UpdateArtifact"
            )
        }
        /// Namespace for "DeleteArtifact" metadata.
        public enum DeleteArtifact {
            /// Request type for "DeleteArtifact".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteArtifactRequest
            /// Response type for "DeleteArtifact".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteArtifact".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "DeleteArtifact"
            )
        }
        /// Namespace for "PurgeArtifacts" metadata.
        public enum PurgeArtifacts {
            /// Request type for "PurgeArtifacts".
            public typealias Input = Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest
            /// Response type for "PurgeArtifacts".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "PurgeArtifacts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "PurgeArtifacts"
            )
        }
        /// Namespace for "CreateContext" metadata.
        public enum CreateContext {
            /// Request type for "CreateContext".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateContextRequest
            /// Response type for "CreateContext".
            public typealias Output = Google_Cloud_Aiplatform_V1_Context
            /// Descriptor for "CreateContext".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "CreateContext"
            )
        }
        /// Namespace for "GetContext" metadata.
        public enum GetContext {
            /// Request type for "GetContext".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetContextRequest
            /// Response type for "GetContext".
            public typealias Output = Google_Cloud_Aiplatform_V1_Context
            /// Descriptor for "GetContext".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "GetContext"
            )
        }
        /// Namespace for "ListContexts" metadata.
        public enum ListContexts {
            /// Request type for "ListContexts".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListContextsRequest
            /// Response type for "ListContexts".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListContextsResponse
            /// Descriptor for "ListContexts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "ListContexts"
            )
        }
        /// Namespace for "UpdateContext" metadata.
        public enum UpdateContext {
            /// Request type for "UpdateContext".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateContextRequest
            /// Response type for "UpdateContext".
            public typealias Output = Google_Cloud_Aiplatform_V1_Context
            /// Descriptor for "UpdateContext".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "UpdateContext"
            )
        }
        /// Namespace for "DeleteContext" metadata.
        public enum DeleteContext {
            /// Request type for "DeleteContext".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteContextRequest
            /// Response type for "DeleteContext".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteContext".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "DeleteContext"
            )
        }
        /// Namespace for "PurgeContexts" metadata.
        public enum PurgeContexts {
            /// Request type for "PurgeContexts".
            public typealias Input = Google_Cloud_Aiplatform_V1_PurgeContextsRequest
            /// Response type for "PurgeContexts".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "PurgeContexts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "PurgeContexts"
            )
        }
        /// Namespace for "AddContextArtifactsAndExecutions" metadata.
        public enum AddContextArtifactsAndExecutions {
            /// Request type for "AddContextArtifactsAndExecutions".
            public typealias Input = Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest
            /// Response type for "AddContextArtifactsAndExecutions".
            public typealias Output = Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse
            /// Descriptor for "AddContextArtifactsAndExecutions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "AddContextArtifactsAndExecutions"
            )
        }
        /// Namespace for "AddContextChildren" metadata.
        public enum AddContextChildren {
            /// Request type for "AddContextChildren".
            public typealias Input = Google_Cloud_Aiplatform_V1_AddContextChildrenRequest
            /// Response type for "AddContextChildren".
            public typealias Output = Google_Cloud_Aiplatform_V1_AddContextChildrenResponse
            /// Descriptor for "AddContextChildren".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "AddContextChildren"
            )
        }
        /// Namespace for "RemoveContextChildren" metadata.
        public enum RemoveContextChildren {
            /// Request type for "RemoveContextChildren".
            public typealias Input = Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest
            /// Response type for "RemoveContextChildren".
            public typealias Output = Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse
            /// Descriptor for "RemoveContextChildren".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "RemoveContextChildren"
            )
        }
        /// Namespace for "QueryContextLineageSubgraph" metadata.
        public enum QueryContextLineageSubgraph {
            /// Request type for "QueryContextLineageSubgraph".
            public typealias Input = Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest
            /// Response type for "QueryContextLineageSubgraph".
            public typealias Output = Google_Cloud_Aiplatform_V1_LineageSubgraph
            /// Descriptor for "QueryContextLineageSubgraph".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "QueryContextLineageSubgraph"
            )
        }
        /// Namespace for "CreateExecution" metadata.
        public enum CreateExecution {
            /// Request type for "CreateExecution".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateExecutionRequest
            /// Response type for "CreateExecution".
            public typealias Output = Google_Cloud_Aiplatform_V1_Execution
            /// Descriptor for "CreateExecution".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "CreateExecution"
            )
        }
        /// Namespace for "GetExecution" metadata.
        public enum GetExecution {
            /// Request type for "GetExecution".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetExecutionRequest
            /// Response type for "GetExecution".
            public typealias Output = Google_Cloud_Aiplatform_V1_Execution
            /// Descriptor for "GetExecution".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "GetExecution"
            )
        }
        /// Namespace for "ListExecutions" metadata.
        public enum ListExecutions {
            /// Request type for "ListExecutions".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListExecutionsRequest
            /// Response type for "ListExecutions".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListExecutionsResponse
            /// Descriptor for "ListExecutions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "ListExecutions"
            )
        }
        /// Namespace for "UpdateExecution" metadata.
        public enum UpdateExecution {
            /// Request type for "UpdateExecution".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateExecutionRequest
            /// Response type for "UpdateExecution".
            public typealias Output = Google_Cloud_Aiplatform_V1_Execution
            /// Descriptor for "UpdateExecution".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "UpdateExecution"
            )
        }
        /// Namespace for "DeleteExecution" metadata.
        public enum DeleteExecution {
            /// Request type for "DeleteExecution".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteExecutionRequest
            /// Response type for "DeleteExecution".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteExecution".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "DeleteExecution"
            )
        }
        /// Namespace for "PurgeExecutions" metadata.
        public enum PurgeExecutions {
            /// Request type for "PurgeExecutions".
            public typealias Input = Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest
            /// Response type for "PurgeExecutions".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "PurgeExecutions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "PurgeExecutions"
            )
        }
        /// Namespace for "AddExecutionEvents" metadata.
        public enum AddExecutionEvents {
            /// Request type for "AddExecutionEvents".
            public typealias Input = Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest
            /// Response type for "AddExecutionEvents".
            public typealias Output = Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse
            /// Descriptor for "AddExecutionEvents".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "AddExecutionEvents"
            )
        }
        /// Namespace for "QueryExecutionInputsAndOutputs" metadata.
        public enum QueryExecutionInputsAndOutputs {
            /// Request type for "QueryExecutionInputsAndOutputs".
            public typealias Input = Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest
            /// Response type for "QueryExecutionInputsAndOutputs".
            public typealias Output = Google_Cloud_Aiplatform_V1_LineageSubgraph
            /// Descriptor for "QueryExecutionInputsAndOutputs".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "QueryExecutionInputsAndOutputs"
            )
        }
        /// Namespace for "CreateMetadataSchema" metadata.
        public enum CreateMetadataSchema {
            /// Request type for "CreateMetadataSchema".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest
            /// Response type for "CreateMetadataSchema".
            public typealias Output = Google_Cloud_Aiplatform_V1_MetadataSchema
            /// Descriptor for "CreateMetadataSchema".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "CreateMetadataSchema"
            )
        }
        /// Namespace for "GetMetadataSchema" metadata.
        public enum GetMetadataSchema {
            /// Request type for "GetMetadataSchema".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest
            /// Response type for "GetMetadataSchema".
            public typealias Output = Google_Cloud_Aiplatform_V1_MetadataSchema
            /// Descriptor for "GetMetadataSchema".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "GetMetadataSchema"
            )
        }
        /// Namespace for "ListMetadataSchemas" metadata.
        public enum ListMetadataSchemas {
            /// Request type for "ListMetadataSchemas".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest
            /// Response type for "ListMetadataSchemas".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse
            /// Descriptor for "ListMetadataSchemas".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "ListMetadataSchemas"
            )
        }
        /// Namespace for "QueryArtifactLineageSubgraph" metadata.
        public enum QueryArtifactLineageSubgraph {
            /// Request type for "QueryArtifactLineageSubgraph".
            public typealias Input = Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest
            /// Response type for "QueryArtifactLineageSubgraph".
            public typealias Output = Google_Cloud_Aiplatform_V1_LineageSubgraph
            /// Descriptor for "QueryArtifactLineageSubgraph".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService"),
                method: "QueryArtifactLineageSubgraph"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.MetadataService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateMetadataStore.descriptor,
            GetMetadataStore.descriptor,
            ListMetadataStores.descriptor,
            DeleteMetadataStore.descriptor,
            CreateArtifact.descriptor,
            GetArtifact.descriptor,
            ListArtifacts.descriptor,
            UpdateArtifact.descriptor,
            DeleteArtifact.descriptor,
            PurgeArtifacts.descriptor,
            CreateContext.descriptor,
            GetContext.descriptor,
            ListContexts.descriptor,
            UpdateContext.descriptor,
            DeleteContext.descriptor,
            PurgeContexts.descriptor,
            AddContextArtifactsAndExecutions.descriptor,
            AddContextChildren.descriptor,
            RemoveContextChildren.descriptor,
            QueryContextLineageSubgraph.descriptor,
            CreateExecution.descriptor,
            GetExecution.descriptor,
            ListExecutions.descriptor,
            UpdateExecution.descriptor,
            DeleteExecution.descriptor,
            PurgeExecutions.descriptor,
            AddExecutionEvents.descriptor,
            QueryExecutionInputsAndOutputs.descriptor,
            CreateMetadataSchema.descriptor,
            GetMetadataSchema.descriptor,
            ListMetadataSchemas.descriptor,
            QueryArtifactLineageSubgraph.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.MetadataService" service.
    public static let google_cloud_aiplatform_v1_MetadataService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.MetadataService")
}

// MARK: google.cloud.aiplatform.v1.MetadataService (client)

extension Google_Cloud_Aiplatform_V1_MetadataService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.MetadataService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for reading and writing metadata entries.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Initializes a MetadataStore, including allocation of resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataStore` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataStore>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataStore>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListMetadataStores" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists MetadataStores for a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listMetadataStores<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single MetadataStore and all its child resources (Artifacts,
        /// > Executions, and Contexts).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Artifact associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListArtifacts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Artifacts in the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListArtifactsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListArtifactsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListArtifactsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listArtifacts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PurgeArtifacts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Artifacts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func purgeArtifacts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Context associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListContexts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Contexts on the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListContextsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListContextsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListContextsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listContexts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListContextsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListContextsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListContextsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListContextsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a stored Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PurgeContexts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Contexts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeContextsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeContextsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func purgeContexts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddContextArtifactsAndExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a set of Artifacts and Executions to a Context. If any of the
        /// > Artifacts or Executions have already been added to a Context, they are
        /// > simply skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addContextArtifactsAndExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddContextChildren" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a set of Contexts as children to a parent Context. If any of the
        /// > child Contexts have already been added to the parent Context, they are
        /// > simply skipped. If this call would create a cycle or cause any Context to
        /// > have more than 10 parents, the request will fail with an INVALID_ARGUMENT
        /// > error.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextChildrenRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddContextChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddContextChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addContextChildren<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveContextChildren" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove a set of children contexts from a parent Context. If any of the
        /// > child Contexts were NOT added to the parent Context, they are
        /// > simply skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeContextChildren<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "QueryContextLineageSubgraph" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves Artifacts and Executions within the specified Context, connected
        /// > by Event edges and returned as a LineageSubgraph.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func queryContextLineageSubgraph<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Execution associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Executions in the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PurgeExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Executions.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func purgeExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddExecutionEvents" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds Events to the specified Execution. An Event indicates whether an
        /// > Artifact was used as an input or output for an Execution. If an Event
        /// > already exists between the Execution and the Artifact, the Event is
        /// > skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addExecutionEvents<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "QueryExecutionInputsAndOutputs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Obtains the set of input and output Artifacts for this Execution, in the
        /// > form of LineageSubgraph that also contains the Execution and connecting
        /// > Events.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func queryExecutionInputsAndOutputs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateMetadataSchema" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a MetadataSchema.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataSchema` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createMetadataSchema<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetMetadataSchema" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific MetadataSchema.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataSchema` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getMetadataSchema<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListMetadataSchemas" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists MetadataSchemas.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listMetadataSchemas<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "QueryArtifactLineageSubgraph" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves lineage of an Artifact represented through Artifacts and
        /// > Executions connected by Event edges and returned as a LineageSubgraph.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func queryArtifactLineageSubgraph<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.MetadataService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for reading and writing metadata entries.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Initializes a MetadataStore, including allocation of resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.CreateMetadataStore.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataStore` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataStore>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataStore>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.GetMetadataStore.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListMetadataStores" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists MetadataStores for a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listMetadataStores<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.ListMetadataStores.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteMetadataStore" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a single MetadataStore and all its child resources (Artifacts,
        /// > Executions, and Contexts).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteMetadataStore<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.DeleteMetadataStore.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Artifact associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.CreateArtifact.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.GetArtifact.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListArtifacts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Artifacts in the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListArtifactsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListArtifactsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListArtifactsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listArtifacts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.ListArtifacts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Artifact` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Artifact>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.UpdateArtifact.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteArtifact" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Artifact.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteArtifactRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteArtifactRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteArtifact<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.DeleteArtifact.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PurgeArtifacts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Artifacts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func purgeArtifacts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.PurgeArtifacts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Context associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.CreateContext.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.GetContext.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListContexts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Contexts on the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListContextsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListContextsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListContextsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listContexts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListContextsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListContextsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListContextsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListContextsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.ListContexts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Context` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Context>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.UpdateContext.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteContext" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a stored Context.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteContextRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteContextRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteContext<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteContextRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteContextRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.DeleteContext.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PurgeContexts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Contexts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeContextsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeContextsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func purgeContexts<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.PurgeContexts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddContextArtifactsAndExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a set of Artifacts and Executions to a Context. If any of the
        /// > Artifacts or Executions have already been added to a Context, they are
        /// > simply skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addContextArtifactsAndExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.AddContextArtifactsAndExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddContextChildren" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds a set of Contexts as children to a parent Context. If any of the
        /// > child Contexts have already been added to the parent Context, they are
        /// > simply skipped. If this call would create a cycle or cause any Context to
        /// > have more than 10 parents, the request will fail with an INVALID_ARGUMENT
        /// > error.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextChildrenRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddContextChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddContextChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addContextChildren<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.AddContextChildren.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveContextChildren" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove a set of children contexts from a parent Context. If any of the
        /// > child Contexts were NOT added to the parent Context, they are
        /// > simply skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func removeContextChildren<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.RemoveContextChildren.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "QueryContextLineageSubgraph" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves Artifacts and Executions within the specified Context, connected
        /// > by Event edges and returned as a LineageSubgraph.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func queryContextLineageSubgraph<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.QueryContextLineageSubgraph.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates an Execution associated with a MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.CreateExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.GetExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Executions in the MetadataStore.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.ListExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates a stored Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Execution` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Execution>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.UpdateExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes an Execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteExecutionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteExecution<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.DeleteExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PurgeExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Purges Executions.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func purgeExecutions<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.PurgeExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddExecutionEvents" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Adds Events to the specified Execution. An Event indicates whether an
        /// > Artifact was used as an input or output for an Execution. If an Event
        /// > already exists between the Execution and the Artifact, the Event is
        /// > skipped.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addExecutionEvents<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.AddExecutionEvents.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "QueryExecutionInputsAndOutputs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Obtains the set of input and output Artifacts for this Execution, in the
        /// > form of LineageSubgraph that also contains the Execution and connecting
        /// > Events.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func queryExecutionInputsAndOutputs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.QueryExecutionInputsAndOutputs.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateMetadataSchema" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a MetadataSchema.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataSchema` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createMetadataSchema<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.CreateMetadataSchema.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetMetadataSchema" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves a specific MetadataSchema.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_MetadataSchema` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getMetadataSchema<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.GetMetadataSchema.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListMetadataSchemas" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists MetadataSchemas.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listMetadataSchemas<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.ListMetadataSchemas.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "QueryArtifactLineageSubgraph" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieves lineage of an Artifact represented through Artifacts and
        /// > Executions connected by Event edges and returned as a LineageSubgraph.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_LineageSubgraph` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func queryArtifactLineageSubgraph<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_MetadataService.Method.QueryArtifactLineageSubgraph.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_MetadataService.ClientProtocol {
    /// Call the "CreateMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Initializes a MetadataStore, including allocation of resources.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createMetadataStore<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createMetadataStore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getMetadataStore<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataStore>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getMetadataStore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_MetadataStore>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMetadataStores" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists MetadataStores for a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMetadataStores<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listMetadataStores(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single MetadataStore and all its child resources (Artifacts,
    /// > Executions, and Contexts).
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteMetadataStore<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteMetadataStore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Artifact associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateArtifactRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createArtifact<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createArtifact(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Artifact>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Artifact.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetArtifactRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getArtifact<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetArtifactRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getArtifact(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetArtifactRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Artifact>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListArtifacts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Artifacts in the MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListArtifactsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listArtifacts<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listArtifacts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Artifact.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateArtifactRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateArtifact<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateArtifact(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Artifact>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Artifact.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteArtifactRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteArtifact<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteArtifact(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeArtifacts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Artifacts.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeArtifacts<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.purgeArtifacts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Context associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateContextRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createContext<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateContextRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createContext(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateContextRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Context>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Context.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetContextRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getContext<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetContextRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getContext(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetContextRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Context>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListContexts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Contexts on the MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListContextsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listContexts<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListContextsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListContextsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listContexts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListContextsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListContextsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Context.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateContextRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateContext<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateContextRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateContext(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateContextRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Context>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a stored Context.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteContextRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteContext<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteContextRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteContext(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteContextRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeContexts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Contexts.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeContextsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeContexts<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.purgeContexts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddContextArtifactsAndExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a set of Artifacts and Executions to a Context. If any of the
    /// > Artifacts or Executions have already been added to a Context, they are
    /// > simply skipped.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addContextArtifactsAndExecutions<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addContextArtifactsAndExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddContextChildren" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a set of Contexts as children to a parent Context. If any of the
    /// > child Contexts have already been added to the parent Context, they are
    /// > simply skipped. If this call would create a cycle or cause any Context to
    /// > have more than 10 parents, the request will fail with an INVALID_ARGUMENT
    /// > error.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddContextChildrenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addContextChildren<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addContextChildren(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveContextChildren" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove a set of children contexts from a parent Context. If any of the
    /// > child Contexts were NOT added to the parent Context, they are
    /// > simply skipped.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeContextChildren<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeContextChildren(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryContextLineageSubgraph" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves Artifacts and Executions within the specified Context, connected
    /// > by Event edges and returned as a LineageSubgraph.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryContextLineageSubgraph<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.queryContextLineageSubgraph(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Execution associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createExecution<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Execution>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getExecution<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Execution>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Executions in the MetadataStore.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listExecutions<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateExecution<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Execution>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteExecution<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Executions.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeExecutions<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.purgeExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddExecutionEvents" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds Events to the specified Execution. An Event indicates whether an
    /// > Artifact was used as an input or output for an Execution. If an Event
    /// > already exists between the Execution and the Artifact, the Event is
    /// > skipped.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addExecutionEvents<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addExecutionEvents(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryExecutionInputsAndOutputs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Obtains the set of input and output Artifacts for this Execution, in the
    /// > form of LineageSubgraph that also contains the Execution and connecting
    /// > Events.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryExecutionInputsAndOutputs<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.queryExecutionInputsAndOutputs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateMetadataSchema" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a MetadataSchema.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createMetadataSchema<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createMetadataSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetMetadataSchema" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific MetadataSchema.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getMetadataSchema<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getMetadataSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_MetadataSchema>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMetadataSchemas" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists MetadataSchemas.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMetadataSchemas<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listMetadataSchemas(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryArtifactLineageSubgraph" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves lineage of an Artifact represented through Artifacts and
    /// > Executions connected by Event edges and returned as a LineageSubgraph.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryArtifactLineageSubgraph<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.queryArtifactLineageSubgraph(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_LineageSubgraph>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_MetadataService.ClientProtocol {
    /// Call the "CreateMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Initializes a MetadataStore, including allocation of resources.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createMetadataStore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataStoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createMetadataStore(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getMetadataStore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataStore>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataStoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getMetadataStore(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMetadataStores" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists MetadataStores for a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMetadataStores<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataStoresResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataStoresRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listMetadataStores(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteMetadataStore" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a single MetadataStore and all its child resources (Artifacts,
    /// > Executions, and Contexts).
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteMetadataStore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteMetadataStoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteMetadataStore(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Artifact associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createArtifact<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateArtifactRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateArtifactRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createArtifact(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Artifact.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getArtifact<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetArtifactRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetArtifactRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getArtifact(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListArtifacts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Artifacts in the MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listArtifacts<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListArtifactsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListArtifactsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListArtifactsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listArtifacts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Artifact.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateArtifact<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateArtifactRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Artifact>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateArtifactRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateArtifact(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteArtifact" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Artifact.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteArtifact<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteArtifactRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteArtifactRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteArtifact(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeArtifacts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Artifacts.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeArtifacts<Result>(
        _ message: Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeArtifactsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.purgeArtifacts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Context associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createContext<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateContextRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateContextRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createContext(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Context.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getContext<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetContextRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetContextRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getContext(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListContexts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Contexts on the MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listContexts<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListContextsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListContextsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListContextsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listContexts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Context.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateContext<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateContextRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Context>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateContextRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateContext(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteContext" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a stored Context.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteContext<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteContextRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteContextRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteContext(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeContexts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Contexts.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeContexts<Result>(
        _ message: Google_Cloud_Aiplatform_V1_PurgeContextsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeContextsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.purgeContexts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddContextArtifactsAndExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a set of Artifacts and Executions to a Context. If any of the
    /// > Artifacts or Executions have already been added to a Context, they are
    /// > simply skipped.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addContextArtifactsAndExecutions<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextArtifactsAndExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addContextArtifactsAndExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddContextChildren" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds a set of Contexts as children to a parent Context. If any of the
    /// > child Contexts have already been added to the parent Context, they are
    /// > simply skipped. If this call would create a cycle or cause any Context to
    /// > have more than 10 parents, the request will fail with an INVALID_ARGUMENT
    /// > error.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addContextChildren<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AddContextChildrenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddContextChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddContextChildrenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addContextChildren(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveContextChildren" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove a set of children contexts from a parent Context. If any of the
    /// > child Contexts were NOT added to the parent Context, they are
    /// > simply skipped.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeContextChildren<Result>(
        _ message: Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_RemoveContextChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_RemoveContextChildrenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeContextChildren(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryContextLineageSubgraph" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves Artifacts and Executions within the specified Context, connected
    /// > by Event edges and returned as a LineageSubgraph.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryContextLineageSubgraph<Result>(
        _ message: Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryContextLineageSubgraphRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.queryContextLineageSubgraph(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates an Execution associated with a MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createExecution<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific Execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getExecution<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Executions in the MetadataStore.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listExecutions<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates a stored Execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateExecution<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Execution>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes an Execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteExecution<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PurgeExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Purges Executions.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func purgeExecutions<Result>(
        _ message: Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PurgeExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.purgeExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddExecutionEvents" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Adds Events to the specified Execution. An Event indicates whether an
    /// > Artifact was used as an input or output for an Execution. If an Event
    /// > already exists between the Execution and the Artifact, the Event is
    /// > skipped.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addExecutionEvents<Result>(
        _ message: Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_AddExecutionEventsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_AddExecutionEventsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addExecutionEvents(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryExecutionInputsAndOutputs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Obtains the set of input and output Artifacts for this Execution, in the
    /// > form of LineageSubgraph that also contains the Execution and connecting
    /// > Events.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryExecutionInputsAndOutputs<Result>(
        _ message: Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryExecutionInputsAndOutputsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.queryExecutionInputsAndOutputs(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateMetadataSchema" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a MetadataSchema.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createMetadataSchema<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateMetadataSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createMetadataSchema(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetMetadataSchema" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves a specific MetadataSchema.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getMetadataSchema<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_MetadataSchema>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetMetadataSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getMetadataSchema(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMetadataSchemas" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists MetadataSchemas.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMetadataSchemas<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListMetadataSchemasResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListMetadataSchemasRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listMetadataSchemas(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryArtifactLineageSubgraph" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieves lineage of an Artifact represented through Artifacts and
    /// > Executions connected by Event edges and returned as a LineageSubgraph.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func queryArtifactLineageSubgraph<Result>(
        _ message: Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_LineageSubgraph>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_QueryArtifactLineageSubgraphRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.queryArtifactLineageSubgraph(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}