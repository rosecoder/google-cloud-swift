// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/specialist_pool_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_SpecialistPoolService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_SpecialistPoolService
    public enum Method {
        public enum CreateSpecialistPool {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_SpecialistPoolService.descriptor.fullyQualifiedService,
                method: "CreateSpecialistPool"
            )
        }
        public enum GetSpecialistPool {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_SpecialistPool
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_SpecialistPoolService.descriptor.fullyQualifiedService,
                method: "GetSpecialistPool"
            )
        }
        public enum ListSpecialistPools {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_SpecialistPoolService.descriptor.fullyQualifiedService,
                method: "ListSpecialistPools"
            )
        }
        public enum DeleteSpecialistPool {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_SpecialistPoolService.descriptor.fullyQualifiedService,
                method: "DeleteSpecialistPool"
            )
        }
        public enum UpdateSpecialistPool {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_SpecialistPoolService.descriptor.fullyQualifiedService,
                method: "UpdateSpecialistPool"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateSpecialistPool.descriptor,
            GetSpecialistPool.descriptor,
            ListSpecialistPools.descriptor,
            DeleteSpecialistPool.descriptor,
            UpdateSpecialistPool.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_SpecialistPoolService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_SpecialistPoolService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_SpecialistPoolService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "SpecialistPoolService"
    )
}

/// A service for creating and managing Customer SpecialistPools.
/// When customers start Data Labeling jobs, they can reuse/create Specialist
/// Pools to bring their own Specialists to label the data.
/// Customers can add/remove Managers for the Specialist Pool on Cloud console,
/// then Managers will get email notifications to manage Specialists and tasks on
/// CrowdCompute console.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_SpecialistPoolService_ClientProtocol: Sendable {
    /// Creates a SpecialistPool.
    func createSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a SpecialistPool.
    func getSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SpecialistPool>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SpecialistPool>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists SpecialistPools in a Location.
    func listSpecialistPools<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a SpecialistPool as well as all Specialists in the pool.
    func deleteSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a SpecialistPool.
    func updateSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_SpecialistPoolService.ClientProtocol {
    public func createSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSpecialistPool(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SpecialistPool>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getSpecialistPool(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_SpecialistPool>(),
            options: options,
            body
        )
    }
    
    public func listSpecialistPools<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSpecialistPools(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>(),
            options: options,
            body
        )
    }
    
    public func deleteSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSpecialistPool(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func updateSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateSpecialistPool(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_SpecialistPoolService.ClientProtocol {
    /// Creates a SpecialistPool.
    public func createSpecialistPool<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSpecialistPool(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a SpecialistPool.
    public func getSpecialistPool<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SpecialistPool>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSpecialistPool(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists SpecialistPools in a Location.
    public func listSpecialistPools<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSpecialistPools(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a SpecialistPool as well as all Specialists in the pool.
    public func deleteSpecialistPool<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSpecialistPool(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a SpecialistPool.
    public func updateSpecialistPool<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSpecialistPool(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// A service for creating and managing Customer SpecialistPools.
/// When customers start Data Labeling jobs, they can reuse/create Specialist
/// Pools to bring their own Specialists to label the data.
/// Customers can add/remove Managers for the Specialist Pool on Cloud console,
/// then Managers will get email notifications to manage Specialists and tasks on
/// CrowdCompute console.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_SpecialistPoolService_Client: Google_Cloud_Aiplatform_V1_SpecialistPoolService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a SpecialistPool.
    public func createSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_SpecialistPoolService.Method.CreateSpecialistPool.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a SpecialistPool.
    public func getSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SpecialistPool>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SpecialistPool>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_SpecialistPoolService.Method.GetSpecialistPool.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists SpecialistPools in a Location.
    public func listSpecialistPools<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSpecialistPoolsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_SpecialistPoolService.Method.ListSpecialistPools.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a SpecialistPool as well as all Specialists in the pool.
    public func deleteSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_SpecialistPoolService.Method.DeleteSpecialistPool.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a SpecialistPool.
    public func updateSpecialistPool<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateSpecialistPoolRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_SpecialistPoolService.Method.UpdateSpecialistPool.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}