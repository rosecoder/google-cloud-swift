// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/schedule_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.aiplatform.v1.ScheduleService

/// Namespace containing generated types for the "google.cloud.aiplatform.v1.ScheduleService" service.
public enum Google_Cloud_Aiplatform_V1_ScheduleService {
    /// Service descriptor for the "google.cloud.aiplatform.v1.ScheduleService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateSchedule" metadata.
        public enum CreateSchedule {
            /// Request type for "CreateSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateScheduleRequest
            /// Response type for "CreateSchedule".
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            /// Descriptor for "CreateSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "CreateSchedule"
            )
        }
        /// Namespace for "DeleteSchedule" metadata.
        public enum DeleteSchedule {
            /// Request type for "DeleteSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteScheduleRequest
            /// Response type for "DeleteSchedule".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "DeleteSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "DeleteSchedule"
            )
        }
        /// Namespace for "GetSchedule" metadata.
        public enum GetSchedule {
            /// Request type for "GetSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_GetScheduleRequest
            /// Response type for "GetSchedule".
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            /// Descriptor for "GetSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "GetSchedule"
            )
        }
        /// Namespace for "ListSchedules" metadata.
        public enum ListSchedules {
            /// Request type for "ListSchedules".
            public typealias Input = Google_Cloud_Aiplatform_V1_ListSchedulesRequest
            /// Response type for "ListSchedules".
            public typealias Output = Google_Cloud_Aiplatform_V1_ListSchedulesResponse
            /// Descriptor for "ListSchedules".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "ListSchedules"
            )
        }
        /// Namespace for "PauseSchedule" metadata.
        public enum PauseSchedule {
            /// Request type for "PauseSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_PauseScheduleRequest
            /// Response type for "PauseSchedule".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "PauseSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "PauseSchedule"
            )
        }
        /// Namespace for "ResumeSchedule" metadata.
        public enum ResumeSchedule {
            /// Request type for "ResumeSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_ResumeScheduleRequest
            /// Response type for "ResumeSchedule".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "ResumeSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "ResumeSchedule"
            )
        }
        /// Namespace for "UpdateSchedule" metadata.
        public enum UpdateSchedule {
            /// Request type for "UpdateSchedule".
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateScheduleRequest
            /// Response type for "UpdateSchedule".
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            /// Descriptor for "UpdateSchedule".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService"),
                method: "UpdateSchedule"
            )
        }
        /// Descriptors for all methods in the "google.cloud.aiplatform.v1.ScheduleService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateSchedule.descriptor,
            DeleteSchedule.descriptor,
            GetSchedule.descriptor,
            ListSchedules.descriptor,
            PauseSchedule.descriptor,
            ResumeSchedule.descriptor,
            UpdateSchedule.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.aiplatform.v1.ScheduleService" service.
    public static let google_cloud_aiplatform_v1_ScheduleService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.aiplatform.v1.ScheduleService")
}

// MARK: google.cloud.aiplatform.v1.ScheduleService (client)

extension Google_Cloud_Aiplatform_V1_ScheduleService {
    /// Generated client protocol for the "google.cloud.aiplatform.v1.ScheduleService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for creating and managing Vertex AI's Schedule resources to
    /// > periodically launch shceudled runs to make API calls.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListSchedules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Schedules in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSchedulesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListSchedulesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListSchedulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listSchedules<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PauseSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Pauses a Schedule. Will mark
        /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
        /// > the schedule is paused, no new runs will be created. Already created runs
        /// > will NOT be paused or canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PauseScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PauseScheduleRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pauseSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResumeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Resumes a paused Schedule to start scheduling new runs. Will mark
        /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
        /// > Only paused Schedule can be resumed.
        /// > 
        /// > When the Schedule is resumed, new runs will be scheduled starting from the
        /// > next execution time after the current time based on the time_specification
        /// > in the Schedule. If [Schedule.catchUp][] is set up true, all
        /// > missed runs will be scheduled for backfill first.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ResumeScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ResumeScheduleRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resumeSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates an active or paused Schedule.
        /// > 
        /// > When the Schedule is updated, new runs will be scheduled starting from the
        /// > updated next execution time after the update time based on the
        /// > time_specification in the updated Schedule. All unstarted runs before the
        /// > update time will be skipped while already created runs will NOT be paused
        /// > or canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.aiplatform.v1.ScheduleService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > A service for creating and managing Vertex AI's Schedule resources to
    /// > periodically launch shceudled runs to make API calls.
    public struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_CreateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.CreateSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_DeleteScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.DeleteSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a Schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_GetScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.GetSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListSchedules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists Schedules in a Location.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSchedulesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ListSchedulesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_ListSchedulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listSchedules<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.ListSchedules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PauseSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Pauses a Schedule. Will mark
        /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
        /// > the schedule is paused, no new runs will be created. Already created runs
        /// > will NOT be paused or canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PauseScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_PauseScheduleRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func pauseSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.PauseSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResumeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Resumes a paused Schedule to start scheduling new runs. Will mark
        /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
        /// > Only paused Schedule can be resumed.
        /// > 
        /// > When the Schedule is resumed, new runs will be scheduled starting from the
        /// > next execution time after the current time based on the time_specification
        /// > in the Schedule. If [Schedule.catchUp][] is set up true, all
        /// > missed runs will be scheduled for backfill first.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ResumeScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_ResumeScheduleRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func resumeSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.ResumeSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates an active or paused Schedule.
        /// > 
        /// > When the Schedule is updated, new runs will be scheduled starting from the
        /// > updated next execution time after the update time based on the
        /// > time_specification in the updated Schedule. All unstarted runs before the
        /// > update time will be skipped while already created runs will NOT be paused
        /// > or canceled.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateScheduleRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Aiplatform_V1_UpdateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Aiplatform_V1_Schedule` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateSchedule<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.UpdateSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_ScheduleService.ClientProtocol {
    /// Call the "CreateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_CreateScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_DeleteScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_GetScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSchedules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Schedules in a Location.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ListSchedulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listSchedules<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listSchedules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PauseSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Pauses a Schedule. Will mark
    /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// > the schedule is paused, no new runs will be created. Already created runs
    /// > will NOT be paused or canceled.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_PauseScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pauseSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pauseSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResumeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Resumes a paused Schedule to start scheduling new runs. Will mark
    /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// > Only paused Schedule can be resumed.
    /// > 
    /// > When the Schedule is resumed, new runs will be scheduled starting from the
    /// > next execution time after the current time based on the time_specification
    /// > in the Schedule. If [Schedule.catchUp][] is set up true, all
    /// > missed runs will be scheduled for backfill first.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_ResumeScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resumeSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resumeSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates an active or paused Schedule.
    /// > 
    /// > When the Schedule is updated, new runs will be scheduled starting from the
    /// > updated next execution time after the update time based on the
    /// > time_specification in the updated Schedule. All unstarted runs before the
    /// > update time will be skipped while already created runs will NOT be paused
    /// > or canceled.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Aiplatform_V1_UpdateScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateSchedule<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Aiplatform_V1_ScheduleService.ClientProtocol {
    /// Call the "CreateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a Schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a Schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a Schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSchedules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists Schedules in a Location.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listSchedules<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListSchedulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSchedules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PauseSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Pauses a Schedule. Will mark
    /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// > the schedule is paused, no new runs will be created. Already created runs
    /// > will NOT be paused or canceled.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pauseSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_PauseScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pauseSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResumeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Resumes a paused Schedule to start scheduling new runs. Will mark
    /// > [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// > Only paused Schedule can be resumed.
    /// > 
    /// > When the Schedule is resumed, new runs will be scheduled starting from the
    /// > next execution time after the current time based on the time_specification
    /// > in the Schedule. If [Schedule.catchUp][] is set up true, all
    /// > missed runs will be scheduled for backfill first.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resumeSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ResumeScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resumeSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates an active or paused Schedule.
    /// > 
    /// > When the Schedule is updated, new runs will be scheduled starting from the
    /// > updated next execution time after the update time based on the
    /// > time_specification in the updated Schedule. All unstarted runs before the
    /// > update time will be skipped while already created runs will NOT be paused
    /// > or canceled.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}
