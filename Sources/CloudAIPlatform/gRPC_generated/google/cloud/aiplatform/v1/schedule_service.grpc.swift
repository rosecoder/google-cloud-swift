// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/schedule_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

public enum Google_Cloud_Aiplatform_V1_ScheduleService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_ScheduleService
    public enum Method {
        public enum CreateSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateScheduleRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "CreateSchedule"
            )
        }
        public enum DeleteSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteScheduleRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "DeleteSchedule"
            )
        }
        public enum GetSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetScheduleRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "GetSchedule"
            )
        }
        public enum ListSchedules {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListSchedulesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListSchedulesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "ListSchedules"
            )
        }
        public enum PauseSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_PauseScheduleRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "PauseSchedule"
            )
        }
        public enum ResumeSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_ResumeScheduleRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "ResumeSchedule"
            )
        }
        public enum UpdateSchedule {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateScheduleRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Schedule
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ScheduleService.descriptor.fullyQualifiedService,
                method: "UpdateSchedule"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateSchedule.descriptor,
            DeleteSchedule.descriptor,
            GetSchedule.descriptor,
            ListSchedules.descriptor,
            PauseSchedule.descriptor,
            ResumeSchedule.descriptor,
            UpdateSchedule.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_ScheduleService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_ScheduleService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_ScheduleService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "ScheduleService"
    )
}

/// A service for creating and managing Vertex AI's Schedule resources to
/// periodically launch shceudled runs to make API calls.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_ScheduleService_ClientProtocol: Sendable {
    /// Creates a Schedule.
    func createSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Schedule.
    func deleteSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a Schedule.
    func getSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Schedules in a Location.
    func listSchedules<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Pauses a Schedule. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// the schedule is paused, no new runs will be created. Already created runs
    /// will NOT be paused or canceled.
    func pauseSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Resumes a paused Schedule to start scheduling new runs. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// Only paused Schedule can be resumed.
    ///
    /// When the Schedule is resumed, new runs will be scheduled starting from the
    /// next execution time after the current time based on the time_specification
    /// in the Schedule. If [Schedule.catchUp][] is set up true, all
    /// missed runs will be scheduled for backfill first.
    func resumeSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates an active or paused Schedule.
    ///
    /// When the Schedule is updated, new runs will be scheduled starting from the
    /// updated next execution time after the update time based on the
    /// time_specification in the updated Schedule. All unstarted runs before the
    /// update time will be skipped while already created runs will NOT be paused
    /// or canceled.
    func updateSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_ScheduleService.ClientProtocol {
    public func createSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            body
        )
    }
    
    public func deleteSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            body
        )
    }
    
    public func listSchedules<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSchedules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>(),
            options: options,
            body
        )
    }
    
    public func pauseSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.pauseSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func resumeSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.resumeSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func updateSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Schedule>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_ScheduleService.ClientProtocol {
    /// Creates a Schedule.
    public func createSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Schedule.
    public func deleteSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a Schedule.
    public func getSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Schedules in a Location.
    public func listSchedules<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListSchedulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSchedules(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Pauses a Schedule. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// the schedule is paused, no new runs will be created. Already created runs
    /// will NOT be paused or canceled.
    public func pauseSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_PauseScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pauseSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Resumes a paused Schedule to start scheduling new runs. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// Only paused Schedule can be resumed.
    ///
    /// When the Schedule is resumed, new runs will be scheduled starting from the
    /// next execution time after the current time based on the time_specification
    /// in the Schedule. If [Schedule.catchUp][] is set up true, all
    /// missed runs will be scheduled for backfill first.
    public func resumeSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ResumeScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resumeSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates an active or paused Schedule.
    ///
    /// When the Schedule is updated, new runs will be scheduled starting from the
    /// updated next execution time after the update time based on the
    /// time_specification in the updated Schedule. All unstarted runs before the
    /// update time will be skipped while already created runs will NOT be paused
    /// or canceled.
    public func updateSchedule<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSchedule(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// A service for creating and managing Vertex AI's Schedule resources to
/// periodically launch shceudled runs to make API calls.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_ScheduleService_Client: Google_Cloud_Aiplatform_V1_ScheduleService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a Schedule.
    public func createSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.CreateSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Schedule.
    public func deleteSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.DeleteSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a Schedule.
    public func getSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.GetSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Schedules in a Location.
    public func listSchedules<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListSchedulesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListSchedulesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.ListSchedules.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Pauses a Schedule. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
    /// the schedule is paused, no new runs will be created. Already created runs
    /// will NOT be paused or canceled.
    public func pauseSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_PauseScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.PauseSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Resumes a paused Schedule to start scheduling new runs. Will mark
    /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
    /// Only paused Schedule can be resumed.
    ///
    /// When the Schedule is resumed, new runs will be scheduled starting from the
    /// next execution time after the current time based on the time_specification
    /// in the Schedule. If [Schedule.catchUp][] is set up true, all
    /// missed runs will be scheduled for backfill first.
    public func resumeSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ResumeScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.ResumeSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates an active or paused Schedule.
    ///
    /// When the Schedule is updated, new runs will be scheduled starting from the
    /// updated next execution time after the update time based on the
    /// time_specification in the updated Schedule. All unstarted runs before the
    /// update time will be skipped while already created runs will NOT be paused
    /// or canceled.
    public func updateSchedule<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateScheduleRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Schedule>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Schedule>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ScheduleService.Method.UpdateSchedule.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
