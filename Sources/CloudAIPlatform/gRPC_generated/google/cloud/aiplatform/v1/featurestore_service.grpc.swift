// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/featurestore_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_FeaturestoreService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_FeaturestoreService
    public enum Method {
        public enum CreateFeaturestore {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "CreateFeaturestore"
            )
        }
        public enum GetFeaturestore {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Featurestore
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "GetFeaturestore"
            )
        }
        public enum ListFeaturestores {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "ListFeaturestores"
            )
        }
        public enum UpdateFeaturestore {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "UpdateFeaturestore"
            )
        }
        public enum DeleteFeaturestore {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "DeleteFeaturestore"
            )
        }
        public enum CreateEntityType {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "CreateEntityType"
            )
        }
        public enum GetEntityType {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetEntityTypeRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_EntityType
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "GetEntityType"
            )
        }
        public enum ListEntityTypes {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListEntityTypesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListEntityTypesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "ListEntityTypes"
            )
        }
        public enum UpdateEntityType {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_EntityType
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "UpdateEntityType"
            )
        }
        public enum DeleteEntityType {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "DeleteEntityType"
            )
        }
        public enum CreateFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_CreateFeatureRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "CreateFeature"
            )
        }
        public enum BatchCreateFeatures {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "BatchCreateFeatures"
            )
        }
        public enum GetFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetFeatureRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Feature
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "GetFeature"
            )
        }
        public enum ListFeatures {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListFeaturesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListFeaturesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "ListFeatures"
            )
        }
        public enum UpdateFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateFeatureRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Feature
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "UpdateFeature"
            )
        }
        public enum DeleteFeature {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "DeleteFeature"
            )
        }
        public enum ImportFeatureValues {
            public typealias Input = Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "ImportFeatureValues"
            )
        }
        public enum BatchReadFeatureValues {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "BatchReadFeatureValues"
            )
        }
        public enum ExportFeatureValues {
            public typealias Input = Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "ExportFeatureValues"
            )
        }
        public enum DeleteFeatureValues {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "DeleteFeatureValues"
            )
        }
        public enum SearchFeatures {
            public typealias Input = Google_Cloud_Aiplatform_V1_SearchFeaturesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_SearchFeaturesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_FeaturestoreService.descriptor.fullyQualifiedService,
                method: "SearchFeatures"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateFeaturestore.descriptor,
            GetFeaturestore.descriptor,
            ListFeaturestores.descriptor,
            UpdateFeaturestore.descriptor,
            DeleteFeaturestore.descriptor,
            CreateEntityType.descriptor,
            GetEntityType.descriptor,
            ListEntityTypes.descriptor,
            UpdateEntityType.descriptor,
            DeleteEntityType.descriptor,
            CreateFeature.descriptor,
            BatchCreateFeatures.descriptor,
            GetFeature.descriptor,
            ListFeatures.descriptor,
            UpdateFeature.descriptor,
            DeleteFeature.descriptor,
            ImportFeatureValues.descriptor,
            BatchReadFeatureValues.descriptor,
            ExportFeatureValues.descriptor,
            DeleteFeatureValues.descriptor,
            SearchFeatures.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_FeaturestoreService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_FeaturestoreService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_FeaturestoreService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "FeaturestoreService"
    )
}

/// The service that handles CRUD and List for resources for Featurestore.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_FeaturestoreService_ClientProtocol: Sendable {
    /// Creates a new Featurestore in a given project and location.
    func createFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets details of a single Featurestore.
    func getFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Featurestore>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Featurestore>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Featurestores in a given project and location.
    func listFeaturestores<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates the parameters of a single Featurestore.
    func updateFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a single Featurestore. The Featurestore must not contain any
    /// EntityTypes or `force` must be set to true for the request to succeed.
    func deleteFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a new EntityType in a given Featurestore.
    func createEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets details of a single EntityType.
    func getEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_EntityType>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists EntityTypes in a given Featurestore.
    func listEntityTypes<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates the parameters of a single EntityType.
    func updateEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_EntityType>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a single EntityType. The EntityType must not have any Features
    /// or `force` must be set to true for the request to succeed.
    func deleteEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a new Feature in a given EntityType.
    func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a batch of Features in a given EntityType.
    func batchCreateFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets details of a single Feature.
    func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Features in a given EntityType.
    func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates the parameters of a single Feature.
    func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a single Feature.
    func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Imports Feature values into the Featurestore from a source storage.
    ///
    /// The progress of the import is tracked by the returned operation. The
    /// imported features are guaranteed to be visible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If an import operation fails, the Feature values returned from
    /// reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same import request again and wait till
    /// the new operation returned is marked as successfully done.
    ///
    /// There are also scenarios where the caller can cause inconsistency.
    ///
    ///  - Source data for import contains multiple distinct Feature values for
    ///    the same entity ID and timestamp.
    ///  - Source is modified during an import. This includes adding, updating, or
    ///  removing source data and/or metadata. Examples of updating metadata
    ///  include but are not limited to changing storage location, storage class,
    ///  or retention policy.
    ///  - Online serving cluster is under-provisioned.
    func importFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Batch reads Feature values from a Featurestore.
    ///
    /// This API enables batch reading Feature values, where each read
    /// instance in the batch may read Feature values of entities from one or
    /// more EntityTypes. Point-in-time correctness is guaranteed for Feature
    /// values of each read instance as of each instance's read timestamp.
    func batchReadFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Exports Feature values from all the entities of a target EntityType.
    func exportFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Delete Feature values from Featurestore.
    ///
    /// The progress of the deletion is tracked by the returned operation. The
    /// deleted feature values are guaranteed to be invisible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If a delete feature values operation fails, the feature values
    /// returned from reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same delete request again and wait till
    /// the new operation returned is marked as successfully done.
    func deleteFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Searches Features matching a query in a given project.
    func searchFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_FeaturestoreService.ClientProtocol {
    public func createFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createFeaturestore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Featurestore>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getFeaturestore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Featurestore>(),
            options: options,
            body
        )
    }
    
    public func listFeaturestores<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listFeaturestores(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>(),
            options: options,
            body
        )
    }
    
    public func updateFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateFeaturestore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteFeaturestore(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func createEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createEntityType(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getEntityType(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_EntityType>(),
            options: options,
            body
        )
    }
    
    public func listEntityTypes<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listEntityTypes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>(),
            options: options,
            body
        )
    }
    
    public func updateEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateEntityType(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_EntityType>(),
            options: options,
            body
        )
    }
    
    public func deleteEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteEntityType(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func batchCreateFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchCreateFeatures(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Feature>(),
            options: options,
            body
        )
    }
    
    public func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listFeatures(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>(),
            options: options,
            body
        )
    }
    
    public func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Feature>(),
            options: options,
            body
        )
    }
    
    public func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteFeature(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func importFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.importFeatureValues(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func batchReadFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchReadFeatureValues(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func exportFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.exportFeatureValues(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteFeatureValues(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func searchFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.searchFeatures(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_FeaturestoreService.ClientProtocol {
    /// Creates a new Featurestore in a given project and location.
    public func createFeaturestore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeaturestore(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets details of a single Featurestore.
    public func getFeaturestore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Featurestore>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeaturestore(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Featurestores in a given project and location.
    public func listFeaturestores<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeaturestores(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates the parameters of a single Featurestore.
    public func updateFeaturestore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeaturestore(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a single Featurestore. The Featurestore must not contain any
    /// EntityTypes or `force` must be set to true for the request to succeed.
    public func deleteFeaturestore<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeaturestore(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a new EntityType in a given Featurestore.
    public func createEntityType<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createEntityType(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets details of a single EntityType.
    public func getEntityType<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetEntityTypeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getEntityType(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists EntityTypes in a given Featurestore.
    public func listEntityTypes<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListEntityTypesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listEntityTypes(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates the parameters of a single EntityType.
    public func updateEntityType<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateEntityType(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a single EntityType. The EntityType must not have any Features
    /// or `force` must be set to true for the request to succeed.
    public func deleteEntityType<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteEntityType(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a new Feature in a given EntityType.
    public func createFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CreateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a batch of Features in a given EntityType.
    public func batchCreateFeatures<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchCreateFeatures(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets details of a single Feature.
    public func getFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Features in a given EntityType.
    public func listFeatures<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListFeaturesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listFeatures(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates the parameters of a single Feature.
    public func updateFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a single Feature.
    public func deleteFeature<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeature(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Imports Feature values into the Featurestore from a source storage.
    ///
    /// The progress of the import is tracked by the returned operation. The
    /// imported features are guaranteed to be visible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If an import operation fails, the Feature values returned from
    /// reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same import request again and wait till
    /// the new operation returned is marked as successfully done.
    ///
    /// There are also scenarios where the caller can cause inconsistency.
    ///
    ///  - Source data for import contains multiple distinct Feature values for
    ///    the same entity ID and timestamp.
    ///  - Source is modified during an import. This includes adding, updating, or
    ///  removing source data and/or metadata. Examples of updating metadata
    ///  include but are not limited to changing storage location, storage class,
    ///  or retention policy.
    ///  - Online serving cluster is under-provisioned.
    public func importFeatureValues<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.importFeatureValues(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Batch reads Feature values from a Featurestore.
    ///
    /// This API enables batch reading Feature values, where each read
    /// instance in the batch may read Feature values of entities from one or
    /// more EntityTypes. Point-in-time correctness is guaranteed for Feature
    /// values of each read instance as of each instance's read timestamp.
    public func batchReadFeatureValues<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchReadFeatureValues(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Exports Feature values from all the entities of a target EntityType.
    public func exportFeatureValues<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.exportFeatureValues(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Delete Feature values from Featurestore.
    ///
    /// The progress of the deletion is tracked by the returned operation. The
    /// deleted feature values are guaranteed to be invisible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If a delete feature values operation fails, the feature values
    /// returned from reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same delete request again and wait till
    /// the new operation returned is marked as successfully done.
    public func deleteFeatureValues<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteFeatureValues(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Searches Features matching a query in a given project.
    public func searchFeatures<Result>(
        _ message: Google_Cloud_Aiplatform_V1_SearchFeaturesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.searchFeatures(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// The service that handles CRUD and List for resources for Featurestore.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_FeaturestoreService_Client: Google_Cloud_Aiplatform_V1_FeaturestoreService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a new Featurestore in a given project and location.
    public func createFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.CreateFeaturestore.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets details of a single Featurestore.
    public func getFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Featurestore>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Featurestore>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.GetFeaturestore.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Featurestores in a given project and location.
    public func listFeaturestores<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturestoresResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.ListFeaturestores.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates the parameters of a single Featurestore.
    public func updateFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.UpdateFeaturestore.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a single Featurestore. The Featurestore must not contain any
    /// EntityTypes or `force` must be set to true for the request to succeed.
    public func deleteFeaturestore<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeaturestoreRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.DeleteFeaturestore.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a new EntityType in a given Featurestore.
    public func createEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.CreateEntityType.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets details of a single EntityType.
    public func getEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_EntityType>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.GetEntityType.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists EntityTypes in a given Featurestore.
    public func listEntityTypes<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListEntityTypesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListEntityTypesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.ListEntityTypes.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates the parameters of a single EntityType.
    public func updateEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_EntityType>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_EntityType>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.UpdateEntityType.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a single EntityType. The EntityType must not have any Features
    /// or `force` must be set to true for the request to succeed.
    public func deleteEntityType<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteEntityTypeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.DeleteEntityType.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a new Feature in a given EntityType.
    public func createFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CreateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.CreateFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a batch of Features in a given EntityType.
    public func batchCreateFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchCreateFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.BatchCreateFeatures.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets details of a single Feature.
    public func getFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.GetFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Features in a given EntityType.
    public func listFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.ListFeatures.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates the parameters of a single Feature.
    public func updateFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Feature>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Feature>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.UpdateFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a single Feature.
    public func deleteFeature<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.DeleteFeature.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Imports Feature values into the Featurestore from a source storage.
    ///
    /// The progress of the import is tracked by the returned operation. The
    /// imported features are guaranteed to be visible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If an import operation fails, the Feature values returned from
    /// reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same import request again and wait till
    /// the new operation returned is marked as successfully done.
    ///
    /// There are also scenarios where the caller can cause inconsistency.
    ///
    ///  - Source data for import contains multiple distinct Feature values for
    ///    the same entity ID and timestamp.
    ///  - Source is modified during an import. This includes adding, updating, or
    ///  removing source data and/or metadata. Examples of updating metadata
    ///  include but are not limited to changing storage location, storage class,
    ///  or retention policy.
    ///  - Online serving cluster is under-provisioned.
    public func importFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.ImportFeatureValues.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Batch reads Feature values from a Featurestore.
    ///
    /// This API enables batch reading Feature values, where each read
    /// instance in the batch may read Feature values of entities from one or
    /// more EntityTypes. Point-in-time correctness is guaranteed for Feature
    /// values of each read instance as of each instance's read timestamp.
    public func batchReadFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchReadFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.BatchReadFeatureValues.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Exports Feature values from all the entities of a target EntityType.
    public func exportFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.ExportFeatureValues.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Delete Feature values from Featurestore.
    ///
    /// The progress of the deletion is tracked by the returned operation. The
    /// deleted feature values are guaranteed to be invisible to subsequent read
    /// operations after the operation is marked as successfully done.
    ///
    /// If a delete feature values operation fails, the feature values
    /// returned from reads and exports may be inconsistent. If consistency is
    /// required, the caller must retry the same delete request again and wait till
    /// the new operation returned is marked as successfully done.
    public func deleteFeatureValues<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteFeatureValuesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.DeleteFeatureValues.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Searches Features matching a query in a given project.
    public func searchFeatures<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_SearchFeaturesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_SearchFeaturesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_FeaturestoreService.Method.SearchFeatures.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}