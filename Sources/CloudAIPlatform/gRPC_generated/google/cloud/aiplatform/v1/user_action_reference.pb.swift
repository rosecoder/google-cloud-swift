// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/user_action_reference.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// References an API call. It contains more information about long running
/// operation and Jobs that are triggered by the API call.
public struct Google_Cloud_Aiplatform_V1_UserActionReference: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reference: Google_Cloud_Aiplatform_V1_UserActionReference.OneOf_Reference? = nil

  /// For API calls that return a long running operation.
  /// Resource name of the long running operation.
  /// Format:
  /// `projects/{project}/locations/{location}/operations/{operation}`
  public var operation: String {
    get {
      if case .operation(let v)? = reference {return v}
      return String()
    }
    set {reference = .operation(newValue)}
  }

  /// For API calls that start a LabelingJob.
  /// Resource name of the LabelingJob.
  /// Format:
  /// `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
  public var dataLabelingJob: String {
    get {
      if case .dataLabelingJob(let v)? = reference {return v}
      return String()
    }
    set {reference = .dataLabelingJob(newValue)}
  }

  /// The method name of the API RPC call. For example,
  /// "/google.cloud.aiplatform.{apiVersion}.DatasetService.CreateDataset"
  public var method: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Reference: Equatable, Sendable {
    /// For API calls that return a long running operation.
    /// Resource name of the long running operation.
    /// Format:
    /// `projects/{project}/locations/{location}/operations/{operation}`
    case operation(String)
    /// For API calls that start a LabelingJob.
    /// Resource name of the LabelingJob.
    /// Format:
    /// `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
    case dataLabelingJob(String)

  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_UserActionReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserActionReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .standard(proto: "data_labeling_job"),
    3: .same(proto: "method"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.reference != nil {try decoder.handleConflictingOneOf()}
          self.reference = .operation(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.reference != nil {try decoder.handleConflictingOneOf()}
          self.reference = .dataLabelingJob(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.method) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.reference {
    case .operation?: try {
      guard case .operation(let v)? = self.reference else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .dataLabelingJob?: try {
      guard case .dataLabelingJob(let v)? = self.reference else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.method.isEmpty {
      try visitor.visitSingularStringField(value: self.method, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_UserActionReference, rhs: Google_Cloud_Aiplatform_V1_UserActionReference) -> Bool {
    if lhs.reference != rhs.reference {return false}
    if lhs.method != rhs.method {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
