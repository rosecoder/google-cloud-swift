// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/model_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

public enum Google_Cloud_Aiplatform_V1_ModelService {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_cloud_aiplatform_v1_ModelService
    public enum Method {
        public enum UploadModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_UploadModelRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "UploadModel"
            )
        }
        public enum GetModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetModelRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Model
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "GetModel"
            )
        }
        public enum ListModels {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListModelsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListModelsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ListModels"
            )
        }
        public enum ListModelVersions {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListModelVersionsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListModelVersionsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ListModelVersions"
            )
        }
        public enum UpdateModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateModelRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Model
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "UpdateModel"
            )
        }
        public enum UpdateExplanationDataset {
            public typealias Input = Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "UpdateExplanationDataset"
            )
        }
        public enum DeleteModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteModelRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "DeleteModel"
            )
        }
        public enum DeleteModelVersion {
            public typealias Input = Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "DeleteModelVersion"
            )
        }
        public enum MergeVersionAliases {
            public typealias Input = Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_Model
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "MergeVersionAliases"
            )
        }
        public enum ExportModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_ExportModelRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ExportModel"
            )
        }
        public enum CopyModel {
            public typealias Input = Google_Cloud_Aiplatform_V1_CopyModelRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "CopyModel"
            )
        }
        public enum ImportModelEvaluation {
            public typealias Input = Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ModelEvaluation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ImportModelEvaluation"
            )
        }
        public enum BatchImportModelEvaluationSlices {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "BatchImportModelEvaluationSlices"
            )
        }
        public enum BatchImportEvaluatedAnnotations {
            public typealias Input = Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "BatchImportEvaluatedAnnotations"
            )
        }
        public enum GetModelEvaluation {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ModelEvaluation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "GetModelEvaluation"
            )
        }
        public enum ListModelEvaluations {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ListModelEvaluations"
            )
        }
        public enum GetModelEvaluationSlice {
            public typealias Input = Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ModelEvaluationSlice
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "GetModelEvaluationSlice"
            )
        }
        public enum ListModelEvaluationSlices {
            public typealias Input = Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest
            public typealias Output = Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Cloud_Aiplatform_V1_ModelService.descriptor.fullyQualifiedService,
                method: "ListModelEvaluationSlices"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            UploadModel.descriptor,
            GetModel.descriptor,
            ListModels.descriptor,
            ListModelVersions.descriptor,
            UpdateModel.descriptor,
            UpdateExplanationDataset.descriptor,
            DeleteModel.descriptor,
            DeleteModelVersion.descriptor,
            MergeVersionAliases.descriptor,
            ExportModel.descriptor,
            CopyModel.descriptor,
            ImportModelEvaluation.descriptor,
            BatchImportModelEvaluationSlices.descriptor,
            BatchImportEvaluatedAnnotations.descriptor,
            GetModelEvaluation.descriptor,
            ListModelEvaluations.descriptor,
            GetModelEvaluationSlice.descriptor,
            ListModelEvaluationSlices.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Cloud_Aiplatform_V1_ModelService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Cloud_Aiplatform_V1_ModelService_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_cloud_aiplatform_v1_ModelService = Self(
        package: "google.cloud.aiplatform.v1",
        service: "ModelService"
    )
}

/// A service for managing Vertex AI's machine learning Models.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Cloud_Aiplatform_V1_ModelService_ClientProtocol: Sendable {
    /// Uploads a Model artifact into Vertex AI.
    func uploadModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UploadModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UploadModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a Model.
    func getModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists Models in a Location.
    func listModels<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists versions of the specified model.
    func listModelVersions<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates a Model.
    func updateModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Incrementally update the dataset used for an examples model.
    func updateExplanationDataset<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Model.
    ///
    /// A model cannot be deleted if any
    /// [Endpoint][google.cloud.aiplatform.v1.Endpoint] resource has a
    /// [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] based on the
    /// model in its
    /// [deployed_models][google.cloud.aiplatform.v1.Endpoint.deployed_models]
    /// field.
    func deleteModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a Model version.
    ///
    /// Model version can only be deleted if there are no
    /// [DeployedModels][google.cloud.aiplatform.v1.DeployedModel] created from it.
    /// Deleting the only version in the Model is not allowed. Use
    /// [DeleteModel][google.cloud.aiplatform.v1.ModelService.DeleteModel] for
    /// deleting the Model instead.
    func deleteModelVersion<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Merges a set of aliases for a Model version.
    func mergeVersionAliases<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Exports a trained, exportable Model to a location specified by the
    /// user. A Model is considered to be exportable if it has at least one
    /// [supported export
    /// format][google.cloud.aiplatform.v1.Model.supported_export_formats].
    func exportModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Copies an already existing Vertex AI Model into the specified Location.
    /// The source Model must exist in the same Project.
    /// When copying custom Models, the users themselves are responsible for
    /// [Model.metadata][google.cloud.aiplatform.v1.Model.metadata] content to be
    /// region-agnostic, as well as making sure that any resources (e.g. files) it
    /// depends on remain accessible.
    func copyModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CopyModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CopyModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Imports an externally generated ModelEvaluation.
    func importModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Imports a list of externally generated ModelEvaluationSlice.
    func batchImportModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Imports a list of externally generated EvaluatedAnnotations.
    func batchImportEvaluatedAnnotations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a ModelEvaluation.
    func getModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists ModelEvaluations in a Model.
    func listModelEvaluations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a ModelEvaluationSlice.
    func getModelEvaluationSlice<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists ModelEvaluationSlices in a ModelEvaluation.
    func listModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_ModelService.ClientProtocol {
    public func uploadModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UploadModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.uploadModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UploadModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func getModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Model>(),
            options: options,
            body
        )
    }
    
    public func listModels<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listModels(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListModelsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListModelsResponse>(),
            options: options,
            body
        )
    }
    
    public func listModelVersions<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listModelVersions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>(),
            options: options,
            body
        )
    }
    
    public func updateModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Model>(),
            options: options,
            body
        )
    }
    
    public func updateExplanationDataset<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateExplanationDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteModelVersion<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteModelVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func mergeVersionAliases<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.mergeVersionAliases(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_Model>(),
            options: options,
            body
        )
    }
    
    public func exportModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.exportModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ExportModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func copyModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CopyModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.copyModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_CopyModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func importModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.importModelEvaluation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>(),
            options: options,
            body
        )
    }
    
    public func batchImportModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchImportModelEvaluationSlices(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>(),
            options: options,
            body
        )
    }
    
    public func batchImportEvaluatedAnnotations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.batchImportEvaluatedAnnotations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>(),
            options: options,
            body
        )
    }
    
    public func getModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getModelEvaluation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>(),
            options: options,
            body
        )
    }
    
    public func listModelEvaluations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listModelEvaluations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>(),
            options: options,
            body
        )
    }
    
    public func getModelEvaluationSlice<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getModelEvaluationSlice(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>(),
            options: options,
            body
        )
    }
    
    public func listModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listModelEvaluationSlices(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Cloud_Aiplatform_V1_ModelService.ClientProtocol {
    /// Uploads a Model artifact into Vertex AI.
    public func uploadModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UploadModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UploadModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.uploadModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a Model.
    public func getModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists Models in a Location.
    public func listModels<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListModelsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listModels(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists versions of the specified model.
    public func listModelVersions<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListModelVersionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listModelVersions(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates a Model.
    public func updateModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Incrementally update the dataset used for an examples model.
    public func updateExplanationDataset<Result>(
        _ message: Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateExplanationDataset(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Model.
    ///
    /// A model cannot be deleted if any
    /// [Endpoint][google.cloud.aiplatform.v1.Endpoint] resource has a
    /// [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] based on the
    /// model in its
    /// [deployed_models][google.cloud.aiplatform.v1.Endpoint.deployed_models]
    /// field.
    public func deleteModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a Model version.
    ///
    /// Model version can only be deleted if there are no
    /// [DeployedModels][google.cloud.aiplatform.v1.DeployedModel] created from it.
    /// Deleting the only version in the Model is not allowed. Use
    /// [DeleteModel][google.cloud.aiplatform.v1.ModelService.DeleteModel] for
    /// deleting the Model instead.
    public func deleteModelVersion<Result>(
        _ message: Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteModelVersion(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Merges a set of aliases for a Model version.
    public func mergeVersionAliases<Result>(
        _ message: Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.mergeVersionAliases(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Exports a trained, exportable Model to a location specified by the
    /// user. A Model is considered to be exportable if it has at least one
    /// [supported export
    /// format][google.cloud.aiplatform.v1.Model.supported_export_formats].
    public func exportModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ExportModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.exportModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Copies an already existing Vertex AI Model into the specified Location.
    /// The source Model must exist in the same Project.
    /// When copying custom Models, the users themselves are responsible for
    /// [Model.metadata][google.cloud.aiplatform.v1.Model.metadata] content to be
    /// region-agnostic, as well as making sure that any resources (e.g. files) it
    /// depends on remain accessible.
    public func copyModel<Result>(
        _ message: Google_Cloud_Aiplatform_V1_CopyModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CopyModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.copyModel(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Imports an externally generated ModelEvaluation.
    public func importModelEvaluation<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.importModelEvaluation(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Imports a list of externally generated ModelEvaluationSlice.
    public func batchImportModelEvaluationSlices<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchImportModelEvaluationSlices(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Imports a list of externally generated EvaluatedAnnotations.
    public func batchImportEvaluatedAnnotations<Result>(
        _ message: Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchImportEvaluatedAnnotations(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a ModelEvaluation.
    public func getModelEvaluation<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getModelEvaluation(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists ModelEvaluations in a Model.
    public func listModelEvaluations<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listModelEvaluations(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a ModelEvaluationSlice.
    public func getModelEvaluationSlice<Result>(
        _ message: Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getModelEvaluationSlice(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists ModelEvaluationSlices in a ModelEvaluation.
    public func listModelEvaluationSlices<Result>(
        _ message: Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listModelEvaluationSlices(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// A service for managing Vertex AI's machine learning Models.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Cloud_Aiplatform_V1_ModelService_Client: Google_Cloud_Aiplatform_V1_ModelService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Uploads a Model artifact into Vertex AI.
    public func uploadModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UploadModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UploadModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.UploadModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a Model.
    public func getModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.GetModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists Models in a Location.
    public func listModels<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ListModels.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists versions of the specified model.
    public func listModelVersions<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelVersionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelVersionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ListModelVersions.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates a Model.
    public func updateModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.UpdateModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Incrementally update the dataset used for an examples model.
    public func updateExplanationDataset<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_UpdateExplanationDatasetRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.UpdateExplanationDataset.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Model.
    ///
    /// A model cannot be deleted if any
    /// [Endpoint][google.cloud.aiplatform.v1.Endpoint] resource has a
    /// [DeployedModel][google.cloud.aiplatform.v1.DeployedModel] based on the
    /// model in its
    /// [deployed_models][google.cloud.aiplatform.v1.Endpoint.deployed_models]
    /// field.
    public func deleteModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.DeleteModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a Model version.
    ///
    /// Model version can only be deleted if there are no
    /// [DeployedModels][google.cloud.aiplatform.v1.DeployedModel] created from it.
    /// Deleting the only version in the Model is not allowed. Use
    /// [DeleteModel][google.cloud.aiplatform.v1.ModelService.DeleteModel] for
    /// deleting the Model instead.
    public func deleteModelVersion<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_DeleteModelVersionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.DeleteModelVersion.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Merges a set of aliases for a Model version.
    public func mergeVersionAliases<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_MergeVersionAliasesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_Model>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_Model>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.MergeVersionAliases.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Exports a trained, exportable Model to a location specified by the
    /// user. A Model is considered to be exportable if it has at least one
    /// [supported export
    /// format][google.cloud.aiplatform.v1.Model.supported_export_formats].
    public func exportModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ExportModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ExportModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ExportModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Copies an already existing Vertex AI Model into the specified Location.
    /// The source Model must exist in the same Project.
    /// When copying custom Models, the users themselves are responsible for
    /// [Model.metadata][google.cloud.aiplatform.v1.Model.metadata] content to be
    /// region-agnostic, as well as making sure that any resources (e.g. files) it
    /// depends on remain accessible.
    public func copyModel<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_CopyModelRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_CopyModelRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.CopyModel.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Imports an externally generated ModelEvaluation.
    public func importModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ImportModelEvaluationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ImportModelEvaluation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Imports a list of externally generated ModelEvaluationSlice.
    public func batchImportModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportModelEvaluationSlicesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.BatchImportModelEvaluationSlices.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Imports a list of externally generated EvaluatedAnnotations.
    public func batchImportEvaluatedAnnotations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_BatchImportEvaluatedAnnotationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.BatchImportEvaluatedAnnotations.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a ModelEvaluation.
    public func getModelEvaluation<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.GetModelEvaluation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists ModelEvaluations in a Model.
    public func listModelEvaluations<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ListModelEvaluations.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a ModelEvaluationSlice.
    public func getModelEvaluationSlice<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_GetModelEvaluationSliceRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ModelEvaluationSlice>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.GetModelEvaluationSlice.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists ModelEvaluationSlices in a ModelEvaluation.
    public func listModelEvaluationSlices<R>(
        request: GRPCCore.ClientRequest<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Aiplatform_V1_ListModelEvaluationSlicesResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Cloud_Aiplatform_V1_ModelService.Method.ListModelEvaluationSlices.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}