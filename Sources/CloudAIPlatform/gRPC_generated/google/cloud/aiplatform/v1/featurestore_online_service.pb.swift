// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/aiplatform/v1/featurestore_online_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for
/// [FeaturestoreOnlineServingService.WriteFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.WriteFeatureValues].
public struct Google_Cloud_Aiplatform_V1_WriteFeatureValuesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the EntityType for the entities being
  /// written. Value format:
  /// `projects/{project}/locations/{location}/featurestores/
  /// {featurestore}/entityTypes/{entityType}`. For example,
  /// for a machine learning model predicting user clicks on a website, an
  /// EntityType ID could be `user`.
  public var entityType: String = String()

  /// Required. The entities to be written. Up to 100,000 feature values can be
  /// written across all `payloads`.
  public var payloads: [Google_Cloud_Aiplatform_V1_WriteFeatureValuesPayload] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains Feature values to be written for a specific entity.
public struct Google_Cloud_Aiplatform_V1_WriteFeatureValuesPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The ID of the entity.
  public var entityID: String = String()

  /// Required. Feature values to be written, mapping from Feature ID to value.
  /// Up to 100,000 `feature_values` entries may be written across all payloads.
  /// The feature generation time, aligned by days, must be no older than five
  /// years (1825 days) and no later than one year (366 days) in the future.
  public var featureValues: Dictionary<String,Google_Cloud_Aiplatform_V1_FeatureValue> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response message for
/// [FeaturestoreOnlineServingService.WriteFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.WriteFeatureValues].
public struct Google_Cloud_Aiplatform_V1_WriteFeatureValuesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request message for
/// [FeaturestoreOnlineServingService.ReadFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.ReadFeatureValues].
public struct Google_Cloud_Aiplatform_V1_ReadFeatureValuesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the EntityType for the entity being read.
  /// Value format:
  /// `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
  /// For example, for a machine learning model predicting user clicks on a
  /// website, an EntityType ID could be `user`.
  public var entityType: String = String()

  /// Required. ID for a specific entity. For example,
  /// for a machine learning model predicting user clicks on a website, an entity
  /// ID could be `user_123`.
  public var entityID: String = String()

  /// Required. Selector choosing Features of the target EntityType.
  public var featureSelector: Google_Cloud_Aiplatform_V1_FeatureSelector {
    get {return _featureSelector ?? Google_Cloud_Aiplatform_V1_FeatureSelector()}
    set {_featureSelector = newValue}
  }
  /// Returns true if `featureSelector` has been explicitly set.
  public var hasFeatureSelector: Bool {return self._featureSelector != nil}
  /// Clears the value of `featureSelector`. Subsequent reads from it will return its default value.
  public mutating func clearFeatureSelector() {self._featureSelector = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _featureSelector: Google_Cloud_Aiplatform_V1_FeatureSelector? = nil
}

/// Response message for
/// [FeaturestoreOnlineServingService.ReadFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.ReadFeatureValues].
public struct Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Response header.
  public var header: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header {
    get {return _header ?? Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Entity view with Feature values. This may be the entity in the
  /// Featurestore if values for all Features were requested, or a projection
  /// of the entity in the Featurestore if values for only some Features were
  /// requested.
  public var entityView: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView {
    get {return _entityView ?? Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView()}
    set {_entityView = newValue}
  }
  /// Returns true if `entityView` has been explicitly set.
  public var hasEntityView: Bool {return self._entityView != nil}
  /// Clears the value of `entityView`. Subsequent reads from it will return its default value.
  public mutating func clearEntityView() {self._entityView = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Metadata for requested Features.
  public struct FeatureDescriptor: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Feature ID.
    public var id: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response header with metadata for the requested
  /// [ReadFeatureValuesRequest.entity_type][google.cloud.aiplatform.v1.ReadFeatureValuesRequest.entity_type]
  /// and Features.
  public struct Header: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The resource name of the EntityType from the
    /// [ReadFeatureValuesRequest][google.cloud.aiplatform.v1.ReadFeatureValuesRequest].
    /// Value format:
    /// `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
    public var entityType: String = String()

    /// List of Feature metadata corresponding to each piece of
    /// [ReadFeatureValuesResponse.EntityView.data][google.cloud.aiplatform.v1.ReadFeatureValuesResponse.EntityView.data].
    public var featureDescriptors: [Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.FeatureDescriptor] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Entity view with Feature values.
  public struct EntityView: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the requested entity.
    public var entityID: String = String()

    /// Each piece of data holds the k
    /// requested values for one requested Feature. If no values
    /// for the requested Feature exist, the corresponding cell will be empty.
    /// This has the same size and is in the same order as the features from the
    /// header
    /// [ReadFeatureValuesResponse.header][google.cloud.aiplatform.v1.ReadFeatureValuesResponse.header].
    public var data: [Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.DataMessage] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Container to hold value(s), successive in time, for one Feature from the
    /// request.
    public struct DataMessage: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var data: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.DataMessage.OneOf_Data? = nil

      /// Feature value if a single value is requested.
      public var value: Google_Cloud_Aiplatform_V1_FeatureValue {
        get {
          if case .value(let v)? = data {return v}
          return Google_Cloud_Aiplatform_V1_FeatureValue()
        }
        set {data = .value(newValue)}
      }

      /// Feature values list if values, successive in time, are requested.
      /// If the requested number of values is greater than the number of
      /// existing Feature values, nonexistent values are omitted instead of
      /// being returned as empty.
      public var values: Google_Cloud_Aiplatform_V1_FeatureValueList {
        get {
          if case .values(let v)? = data {return v}
          return Google_Cloud_Aiplatform_V1_FeatureValueList()
        }
        set {data = .values(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Data: Equatable, Sendable {
        /// Feature value if a single value is requested.
        case value(Google_Cloud_Aiplatform_V1_FeatureValue)
        /// Feature values list if values, successive in time, are requested.
        /// If the requested number of values is greater than the number of
        /// existing Feature values, nonexistent values are omitted instead of
        /// being returned as empty.
        case values(Google_Cloud_Aiplatform_V1_FeatureValueList)

      }

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _header: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header? = nil
  fileprivate var _entityView: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView? = nil
}

/// Request message for
/// [FeaturestoreOnlineServingService.StreamingFeatureValuesRead][].
public struct Google_Cloud_Aiplatform_V1_StreamingReadFeatureValuesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The resource name of the entities' type.
  /// Value format:
  /// `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
  /// For example,
  /// for a machine learning model predicting user clicks on a website, an
  /// EntityType ID could be `user`.
  public var entityType: String = String()

  /// Required. IDs of entities to read Feature values of. The maximum number of
  /// IDs is 100. For example, for a machine learning model predicting user
  /// clicks on a website, an entity ID could be `user_123`.
  public var entityIds: [String] = []

  /// Required. Selector choosing Features of the target EntityType. Feature IDs
  /// will be deduplicated.
  public var featureSelector: Google_Cloud_Aiplatform_V1_FeatureSelector {
    get {return _featureSelector ?? Google_Cloud_Aiplatform_V1_FeatureSelector()}
    set {_featureSelector = newValue}
  }
  /// Returns true if `featureSelector` has been explicitly set.
  public var hasFeatureSelector: Bool {return self._featureSelector != nil}
  /// Clears the value of `featureSelector`. Subsequent reads from it will return its default value.
  public mutating func clearFeatureSelector() {self._featureSelector = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _featureSelector: Google_Cloud_Aiplatform_V1_FeatureSelector? = nil
}

/// Value for a feature.
public struct Google_Cloud_Aiplatform_V1_FeatureValue: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Value for the feature.
  public var value: Google_Cloud_Aiplatform_V1_FeatureValue.OneOf_Value? = nil

  /// Bool type feature value.
  public var boolValue: Bool {
    get {
      if case .boolValue(let v)? = value {return v}
      return false
    }
    set {value = .boolValue(newValue)}
  }

  /// Double type feature value.
  public var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = value {return v}
      return 0
    }
    set {value = .doubleValue(newValue)}
  }

  /// Int64 feature value.
  public var int64Value: Int64 {
    get {
      if case .int64Value(let v)? = value {return v}
      return 0
    }
    set {value = .int64Value(newValue)}
  }

  /// String feature value.
  public var stringValue: String {
    get {
      if case .stringValue(let v)? = value {return v}
      return String()
    }
    set {value = .stringValue(newValue)}
  }

  /// A list of bool type feature value.
  public var boolArrayValue: Google_Cloud_Aiplatform_V1_BoolArray {
    get {
      if case .boolArrayValue(let v)? = value {return v}
      return Google_Cloud_Aiplatform_V1_BoolArray()
    }
    set {value = .boolArrayValue(newValue)}
  }

  /// A list of double type feature value.
  public var doubleArrayValue: Google_Cloud_Aiplatform_V1_DoubleArray {
    get {
      if case .doubleArrayValue(let v)? = value {return v}
      return Google_Cloud_Aiplatform_V1_DoubleArray()
    }
    set {value = .doubleArrayValue(newValue)}
  }

  /// A list of int64 type feature value.
  public var int64ArrayValue: Google_Cloud_Aiplatform_V1_Int64Array {
    get {
      if case .int64ArrayValue(let v)? = value {return v}
      return Google_Cloud_Aiplatform_V1_Int64Array()
    }
    set {value = .int64ArrayValue(newValue)}
  }

  /// A list of string type feature value.
  public var stringArrayValue: Google_Cloud_Aiplatform_V1_StringArray {
    get {
      if case .stringArrayValue(let v)? = value {return v}
      return Google_Cloud_Aiplatform_V1_StringArray()
    }
    set {value = .stringArrayValue(newValue)}
  }

  /// Bytes feature value.
  public var bytesValue: Data {
    get {
      if case .bytesValue(let v)? = value {return v}
      return Data()
    }
    set {value = .bytesValue(newValue)}
  }

  /// A struct type feature value.
  public var structValue: Google_Cloud_Aiplatform_V1_StructValue {
    get {
      if case .structValue(let v)? = value {return v}
      return Google_Cloud_Aiplatform_V1_StructValue()
    }
    set {value = .structValue(newValue)}
  }

  /// Metadata of feature value.
  public var metadata: Google_Cloud_Aiplatform_V1_FeatureValue.Metadata {
    get {return _metadata ?? Google_Cloud_Aiplatform_V1_FeatureValue.Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Value for the feature.
  public enum OneOf_Value: Equatable, @unchecked Sendable {
    /// Bool type feature value.
    case boolValue(Bool)
    /// Double type feature value.
    case doubleValue(Double)
    /// Int64 feature value.
    case int64Value(Int64)
    /// String feature value.
    case stringValue(String)
    /// A list of bool type feature value.
    case boolArrayValue(Google_Cloud_Aiplatform_V1_BoolArray)
    /// A list of double type feature value.
    case doubleArrayValue(Google_Cloud_Aiplatform_V1_DoubleArray)
    /// A list of int64 type feature value.
    case int64ArrayValue(Google_Cloud_Aiplatform_V1_Int64Array)
    /// A list of string type feature value.
    case stringArrayValue(Google_Cloud_Aiplatform_V1_StringArray)
    /// Bytes feature value.
    case bytesValue(Data)
    /// A struct type feature value.
    case structValue(Google_Cloud_Aiplatform_V1_StructValue)

  }

  /// Metadata of feature value.
  public struct Metadata: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Feature generation timestamp. Typically, it is provided by user at
    /// feature ingestion time. If not, feature store
    /// will use the system timestamp when the data is ingested into feature
    /// store. For streaming ingestion, the time, aligned by days, must be no
    /// older than five years (1825 days) and no later than one year (366 days)
    /// in the future.
    public var generateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _generateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_generateTime = newValue}
    }
    /// Returns true if `generateTime` has been explicitly set.
    public var hasGenerateTime: Bool {return self._generateTime != nil}
    /// Clears the value of `generateTime`. Subsequent reads from it will return its default value.
    public mutating func clearGenerateTime() {self._generateTime = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _generateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}

  fileprivate var _metadata: Google_Cloud_Aiplatform_V1_FeatureValue.Metadata? = nil
}

/// Struct (or object) type feature value.
public struct Google_Cloud_Aiplatform_V1_StructValue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of field values.
  public var values: [Google_Cloud_Aiplatform_V1_StructFieldValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// One field of a Struct (or object) type feature value.
public struct Google_Cloud_Aiplatform_V1_StructFieldValue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the field in the struct feature.
  public var name: String = String()

  /// The value for this field.
  public var value: Google_Cloud_Aiplatform_V1_FeatureValue {
    get {return _value ?? Google_Cloud_Aiplatform_V1_FeatureValue()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _value: Google_Cloud_Aiplatform_V1_FeatureValue? = nil
}

/// Container for list of values.
public struct Google_Cloud_Aiplatform_V1_FeatureValueList: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of feature values. All of them should be the same data type.
  public var values: [Google_Cloud_Aiplatform_V1_FeatureValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.aiplatform.v1"

extension Google_Cloud_Aiplatform_V1_WriteFeatureValuesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteFeatureValuesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .same(proto: "payloads"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.payloads) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 1)
    }
    if !self.payloads.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.payloads, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesRequest, rhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesRequest) -> Bool {
    if lhs.entityType != rhs.entityType {return false}
    if lhs.payloads != rhs.payloads {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_WriteFeatureValuesPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteFeatureValuesPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .standard(proto: "feature_values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_FeatureValue>.self, value: &self.featureValues) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 1)
    }
    if !self.featureValues.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Aiplatform_V1_FeatureValue>.self, value: self.featureValues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesPayload, rhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesPayload) -> Bool {
    if lhs.entityID != rhs.entityID {return false}
    if lhs.featureValues != rhs.featureValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_WriteFeatureValuesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteFeatureValuesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesResponse, rhs: Google_Cloud_Aiplatform_V1_WriteFeatureValuesResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadFeatureValuesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .standard(proto: "entity_id"),
    3: .standard(proto: "feature_selector"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entityID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._featureSelector) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 1)
    }
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 2)
    }
    try { if let v = self._featureSelector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesRequest, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesRequest) -> Bool {
    if lhs.entityType != rhs.entityType {return false}
    if lhs.entityID != rhs.entityID {return false}
    if lhs._featureSelector != rhs._featureSelector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadFeatureValuesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "entity_view"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._entityView) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._entityView {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._entityView != rhs._entityView {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.FeatureDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.protoMessageName + ".FeatureDescriptor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.FeatureDescriptor, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.FeatureDescriptor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.protoMessageName + ".Header"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .standard(proto: "feature_descriptors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.featureDescriptors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 1)
    }
    if !self.featureDescriptors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featureDescriptors, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.Header) -> Bool {
    if lhs.entityType != rhs.entityType {return false}
    if lhs.featureDescriptors != rhs.featureDescriptors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.protoMessageName + ".EntityView"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView) -> Bool {
    if lhs.entityID != rhs.entityID {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.protoMessageName + ".Data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Google_Cloud_Aiplatform_V1_FeatureValue?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .value(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .value(v)
        }
      }()
      case 2: try {
        var v: Google_Cloud_Aiplatform_V1_FeatureValueList?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .values(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .values(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.data {
    case .value?: try {
      guard case .value(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .values?: try {
      guard case .values(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.DataMessage, rhs: Google_Cloud_Aiplatform_V1_ReadFeatureValuesResponse.EntityView.DataMessage) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StreamingReadFeatureValuesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingReadFeatureValuesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_type"),
    2: .standard(proto: "entity_ids"),
    3: .standard(proto: "feature_selector"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.entityType) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.entityIds) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._featureSelector) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.entityType.isEmpty {
      try visitor.visitSingularStringField(value: self.entityType, fieldNumber: 1)
    }
    if !self.entityIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entityIds, fieldNumber: 2)
    }
    try { if let v = self._featureSelector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StreamingReadFeatureValuesRequest, rhs: Google_Cloud_Aiplatform_V1_StreamingReadFeatureValuesRequest) -> Bool {
    if lhs.entityType != rhs.entityType {return false}
    if lhs.entityIds != rhs.entityIds {return false}
    if lhs._featureSelector != rhs._featureSelector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeatureValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bool_value"),
    2: .standard(proto: "double_value"),
    5: .standard(proto: "int64_value"),
    6: .standard(proto: "string_value"),
    7: .standard(proto: "bool_array_value"),
    8: .standard(proto: "double_array_value"),
    11: .standard(proto: "int64_array_value"),
    12: .standard(proto: "string_array_value"),
    13: .standard(proto: "bytes_value"),
    15: .standard(proto: "struct_value"),
    14: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .boolValue(v)
        }
      }()
      case 2: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .doubleValue(v)
        }
      }()
      case 5: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .int64Value(v)
        }
      }()
      case 6: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .stringValue(v)
        }
      }()
      case 7: try {
        var v: Google_Cloud_Aiplatform_V1_BoolArray?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .boolArrayValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .boolArrayValue(v)
        }
      }()
      case 8: try {
        var v: Google_Cloud_Aiplatform_V1_DoubleArray?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .doubleArrayValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .doubleArrayValue(v)
        }
      }()
      case 11: try {
        var v: Google_Cloud_Aiplatform_V1_Int64Array?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .int64ArrayValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .int64ArrayValue(v)
        }
      }()
      case 12: try {
        var v: Google_Cloud_Aiplatform_V1_StringArray?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .stringArrayValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .stringArrayValue(v)
        }
      }()
      case 13: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .bytesValue(v)
        }
      }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 15: try {
        var v: Google_Cloud_Aiplatform_V1_StructValue?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .structValue(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .structValue(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .boolValue?: try {
      guard case .boolValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }()
    case .doubleValue?: try {
      guard case .doubleValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }()
    case .int64Value?: try {
      guard case .int64Value(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    }()
    case .stringValue?: try {
      guard case .stringValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }()
    case .boolArrayValue?: try {
      guard case .boolArrayValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .doubleArrayValue?: try {
      guard case .doubleArrayValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .int64ArrayValue?: try {
      guard case .int64ArrayValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .stringArrayValue?: try {
      guard case .stringArrayValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .bytesValue?: try {
      guard case .bytesValue(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 13)
    }()
    default: break
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    try { if case .structValue(let v)? = self.value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureValue, rhs: Google_Cloud_Aiplatform_V1_FeatureValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureValue.Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloud_Aiplatform_V1_FeatureValue.protoMessageName + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "generate_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._generateTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._generateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureValue.Metadata, rhs: Google_Cloud_Aiplatform_V1_FeatureValue.Metadata) -> Bool {
    if lhs._generateTime != rhs._generateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StructValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StructValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StructValue, rhs: Google_Cloud_Aiplatform_V1_StructValue) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_StructFieldValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StructFieldValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_StructFieldValue, rhs: Google_Cloud_Aiplatform_V1_StructFieldValue) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Aiplatform_V1_FeatureValueList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeatureValueList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloud_Aiplatform_V1_FeatureValueList, rhs: Google_Cloud_Aiplatform_V1_FeatureValueList) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
