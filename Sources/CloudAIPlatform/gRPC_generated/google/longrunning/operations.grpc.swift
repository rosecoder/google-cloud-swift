// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/longrunning/operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

public enum Google_Longrunning_Operations {
    public static let descriptor = GRPCCore.ServiceDescriptor.google_longrunning_Operations
    public enum Method {
        public enum ListOperations {
            public typealias Input = Google_Longrunning_ListOperationsRequest
            public typealias Output = Google_Longrunning_ListOperationsResponse
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Longrunning_Operations.descriptor.fullyQualifiedService,
                method: "ListOperations"
            )
        }
        public enum GetOperation {
            public typealias Input = Google_Longrunning_GetOperationRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Longrunning_Operations.descriptor.fullyQualifiedService,
                method: "GetOperation"
            )
        }
        public enum DeleteOperation {
            public typealias Input = Google_Longrunning_DeleteOperationRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Longrunning_Operations.descriptor.fullyQualifiedService,
                method: "DeleteOperation"
            )
        }
        public enum CancelOperation {
            public typealias Input = Google_Longrunning_CancelOperationRequest
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Longrunning_Operations.descriptor.fullyQualifiedService,
                method: "CancelOperation"
            )
        }
        public enum WaitOperation {
            public typealias Input = Google_Longrunning_WaitOperationRequest
            public typealias Output = Google_Longrunning_Operation
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Longrunning_Operations.descriptor.fullyQualifiedService,
                method: "WaitOperation"
            )
        }
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            ListOperations.descriptor,
            GetOperation.descriptor,
            DeleteOperation.descriptor,
            CancelOperation.descriptor,
            WaitOperation.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias ClientProtocol = Google_Longrunning_Operations_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    public typealias Client = Google_Longrunning_Operations_Client
}

extension GRPCCore.ServiceDescriptor {
    public static let google_longrunning_Operations = Self(
        package: "google.longrunning",
        service: "Operations"
    )
}

/// Manages long-running operations with an API service.
///
/// When an API method normally takes long time to complete, it can be designed
/// to return [Operation][google.longrunning.Operation] to the client, and the client can use this
/// interface to receive the real response asynchronously by polling the
/// operation resource, or pass the operation resource to another API (such as
/// Google Cloud Pub/Sub API) to receive the response.  Any API service that
/// returns long-running operations should implement the `Operations` interface
/// so developers can have a consistent client experience.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public protocol Google_Longrunning_Operations_ClientProtocol: Sendable {
    /// Lists operations that match the specified filter in the request. If the
    /// server doesn't support this method, it returns `UNIMPLEMENTED`.
    ///
    /// NOTE: the `name` binding allows API services to override the binding
    /// to use different resource name schemes, such as `users/*/operations`. To
    /// override the binding, API services can add a binding such as
    /// `"/v1/{name=users/*}/operations"` to their service configuration.
    /// For backwards compatibility, the default name includes the operations
    /// collection id, however overriding users must ensure the name binding
    /// is the parent resource, without the operations collection id.
    func listOperations<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_ListOperationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_ListOperationsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets the latest state of a long-running operation.  Clients can use this
    /// method to poll the operation result at intervals as recommended by the API
    /// service.
    func getOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_GetOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a long-running operation. This method indicates that the client is
    /// no longer interested in the operation result. It does not cancel the
    /// operation. If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    func deleteOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_DeleteOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Starts asynchronous cancellation on a long-running operation.  The server
    /// makes a best effort to cancel the operation, but success is not
    /// guaranteed.  If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
    /// other methods to check whether the cancellation succeeded or whether the
    /// operation completed despite cancellation. On successful cancellation,
    /// the operation is not deleted; instead, it becomes an operation with
    /// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    func cancelOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_CancelOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Waits until the specified long-running operation is done or reaches at most
    /// a specified timeout, returning the latest state.  If the operation is
    /// already done, the latest state is immediately returned.  If the timeout
    /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
    /// timeout is used.  If the server does not support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    /// Note that this method is on a best-effort basis.  It may return the latest
    /// state before the specified timeout (including immediately), meaning even an
    /// immediate response is no guarantee that the operation is done.
    func waitOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_WaitOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.ClientProtocol {
    public func listOperations<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listOperations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_ListOperationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_ListOperationsResponse>(),
            options: options,
            body
        )
    }
    
    public func getOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_GetOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
    
    public func deleteOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_DeleteOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func cancelOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.cancelOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_CancelOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    public func waitOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.waitOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_WaitOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.ClientProtocol {
    /// Lists operations that match the specified filter in the request. If the
    /// server doesn't support this method, it returns `UNIMPLEMENTED`.
    ///
    /// NOTE: the `name` binding allows API services to override the binding
    /// to use different resource name schemes, such as `users/*/operations`. To
    /// override the binding, API services can add a binding such as
    /// `"/v1/{name=users/*}/operations"` to their service configuration.
    /// For backwards compatibility, the default name includes the operations
    /// collection id, however overriding users must ensure the name binding
    /// is the parent resource, without the operations collection id.
    public func listOperations<Result>(
        _ message: Google_Longrunning_ListOperationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOperations(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets the latest state of a long-running operation.  Clients can use this
    /// method to poll the operation result at intervals as recommended by the API
    /// service.
    public func getOperation<Result>(
        _ message: Google_Longrunning_GetOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getOperation(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a long-running operation. This method indicates that the client is
    /// no longer interested in the operation result. It does not cancel the
    /// operation. If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    public func deleteOperation<Result>(
        _ message: Google_Longrunning_DeleteOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteOperation(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Starts asynchronous cancellation on a long-running operation.  The server
    /// makes a best effort to cancel the operation, but success is not
    /// guaranteed.  If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
    /// other methods to check whether the cancellation succeeded or whether the
    /// operation completed despite cancellation. On successful cancellation,
    /// the operation is not deleted; instead, it becomes an operation with
    /// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    public func cancelOperation<Result>(
        _ message: Google_Longrunning_CancelOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelOperation(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Waits until the specified long-running operation is done or reaches at most
    /// a specified timeout, returning the latest state.  If the operation is
    /// already done, the latest state is immediately returned.  If the timeout
    /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
    /// timeout is used.  If the server does not support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    /// Note that this method is on a best-effort basis.  It may return the latest
    /// state before the specified timeout (including immediately), meaning even an
    /// immediate response is no guarantee that the operation is done.
    public func waitOperation<Result>(
        _ message: Google_Longrunning_WaitOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.waitOperation(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Manages long-running operations with an API service.
///
/// When an API method normally takes long time to complete, it can be designed
/// to return [Operation][google.longrunning.Operation] to the client, and the client can use this
/// interface to receive the real response asynchronously by polling the
/// operation resource, or pass the operation resource to another API (such as
/// Google Cloud Pub/Sub API) to receive the response.  Any API service that
/// returns long-running operations should implement the `Operations` interface
/// so developers can have a consistent client experience.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public struct Google_Longrunning_Operations_Client: Google_Longrunning_Operations.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    public init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Lists operations that match the specified filter in the request. If the
    /// server doesn't support this method, it returns `UNIMPLEMENTED`.
    ///
    /// NOTE: the `name` binding allows API services to override the binding
    /// to use different resource name schemes, such as `users/*/operations`. To
    /// override the binding, API services can add a binding such as
    /// `"/v1/{name=users/*}/operations"` to their service configuration.
    /// For backwards compatibility, the default name includes the operations
    /// collection id, however overriding users must ensure the name binding
    /// is the parent resource, without the operations collection id.
    public func listOperations<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_ListOperationsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_ListOperationsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Longrunning_Operations.Method.ListOperations.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets the latest state of a long-running operation.  Clients can use this
    /// method to poll the operation result at intervals as recommended by the API
    /// service.
    public func getOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_GetOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Longrunning_Operations.Method.GetOperation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a long-running operation. This method indicates that the client is
    /// no longer interested in the operation result. It does not cancel the
    /// operation. If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    public func deleteOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_DeleteOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Longrunning_Operations.Method.DeleteOperation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Starts asynchronous cancellation on a long-running operation.  The server
    /// makes a best effort to cancel the operation, but success is not
    /// guaranteed.  If the server doesn't support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
    /// other methods to check whether the cancellation succeeded or whether the
    /// operation completed despite cancellation. On successful cancellation,
    /// the operation is not deleted; instead, it becomes an operation with
    /// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    public func cancelOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_CancelOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Longrunning_Operations.Method.CancelOperation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Waits until the specified long-running operation is done or reaches at most
    /// a specified timeout, returning the latest state.  If the operation is
    /// already done, the latest state is immediately returned.  If the timeout
    /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
    /// timeout is used.  If the server does not support this method, it returns
    /// `google.rpc.Code.UNIMPLEMENTED`.
    /// Note that this method is on a best-effort basis.  It may return the latest
    /// state before the specified timeout (including immediately), meaning even an
    /// immediate response is no guarantee that the operation is done.
    public func waitOperation<R>(
        request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Longrunning_WaitOperationRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Longrunning_Operations.Method.WaitOperation.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
