//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/logging/v2/logging_config.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for configuring sinks used to route log entries.
///
/// Usage: instantiate `Google_Logging_V2_ConfigServiceV2Client`, then call methods of this protocol to make API calls.
internal protocol Google_Logging_V2_ConfigServiceV2ClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? { get }

  func listBuckets(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse>

  func getBucket(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket>

  func createBucket(
    _ request: Google_Logging_V2_CreateBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateBucketRequest, Google_Logging_V2_LogBucket>

  func updateBucket(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket>

  func deleteBucket(
    _ request: Google_Logging_V2_DeleteBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func undeleteBucket(
    _ request: Google_Logging_V2_UndeleteBucketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UndeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listViews(
    _ request: Google_Logging_V2_ListViewsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListViewsRequest, Google_Logging_V2_ListViewsResponse>

  func getView(
    _ request: Google_Logging_V2_GetViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetViewRequest, Google_Logging_V2_LogView>

  func createView(
    _ request: Google_Logging_V2_CreateViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateViewRequest, Google_Logging_V2_LogView>

  func updateView(
    _ request: Google_Logging_V2_UpdateViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateViewRequest, Google_Logging_V2_LogView>

  func deleteView(
    _ request: Google_Logging_V2_DeleteViewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteViewRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listSinks(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse>

  func getSink(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink>

  func createSink(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink>

  func updateSink(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink>

  func deleteSink(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func listExclusions(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse>

  func getExclusion(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion>

  func createExclusion(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion>

  func updateExclusion(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion>

  func deleteExclusion(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getCmekSettings(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings>

  func updateCmekSettings(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings>

  func getSettings(
    _ request: Google_Logging_V2_GetSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_GetSettingsRequest, Google_Logging_V2_Settings>

  func updateSettings(
    _ request: Google_Logging_V2_UpdateSettingsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_UpdateSettingsRequest, Google_Logging_V2_Settings>

  func copyLogEntries(
    _ request: Google_Logging_V2_CopyLogEntriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Logging_V2_CopyLogEntriesRequest, Google_Longrunning_Operation>
}

extension Google_Logging_V2_ConfigServiceV2ClientProtocol {
  internal var serviceName: String {
    return "google.logging.v2.ConfigServiceV2"
  }

  /// Lists log buckets.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBuckets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listBuckets(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listBuckets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBucketsInterceptors() ?? []
    )
  }

  /// Gets a log bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBucket(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBucketInterceptors() ?? []
    )
  }

  /// Creates a log bucket that can be used to store log entries. After a bucket
  /// has been created, the bucket's location cannot be changed.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBucket(
    _ request: Google_Logging_V2_CreateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBucketInterceptors() ?? []
    )
  }

  /// Updates a log bucket. This method replaces the following fields in the
  /// existing bucket with values from the new bucket: `retention_period`
  ///
  /// If the retention period is decreased and the bucket is locked,
  /// `FAILED_PRECONDITION` will be returned.
  ///
  /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
  /// `FAILED_PRECONDITION` will be returned.
  ///
  /// After a bucket has been created, the bucket's location cannot be changed.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBucket(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBucketInterceptors() ?? []
    )
  }

  /// Deletes a log bucket.
  ///
  /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
  /// After 7 days, the bucket will be purged and all log entries in the bucket
  /// will be permanently deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBucket(
    _ request: Google_Logging_V2_DeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBucketInterceptors() ?? []
    )
  }

  /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
  /// within the grace period of 7 days.
  ///
  /// - Parameters:
  ///   - request: Request to send to UndeleteBucket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func undeleteBucket(
    _ request: Google_Logging_V2_UndeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UndeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.undeleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndeleteBucketInterceptors() ?? []
    )
  }

  /// Lists views on a log bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListViews.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listViews(
    _ request: Google_Logging_V2_ListViewsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListViewsRequest, Google_Logging_V2_ListViewsResponse> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listViews.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewsInterceptors() ?? []
    )
  }

  /// Gets a view on a log bucket..
  ///
  /// - Parameters:
  ///   - request: Request to send to GetView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getView(
    _ request: Google_Logging_V2_GetViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetViewRequest, Google_Logging_V2_LogView> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetViewInterceptors() ?? []
    )
  }

  /// Creates a view over log entries in a log bucket. A bucket may contain a
  /// maximum of 30 views.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createView(
    _ request: Google_Logging_V2_CreateViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateViewRequest, Google_Logging_V2_LogView> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateViewInterceptors() ?? []
    )
  }

  /// Updates a view on a log bucket. This method replaces the following fields
  /// in the existing view with values from the new view: `filter`.
  /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
  /// a state where it can update the view. If this occurs, please try again in a
  /// few minutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateView(
    _ request: Google_Logging_V2_UpdateViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateViewRequest, Google_Logging_V2_LogView> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateViewInterceptors() ?? []
    )
  }

  /// Deletes a view on a log bucket.
  /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
  /// a state where it can delete the view. If this occurs, please try again in a
  /// few minutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteView(
    _ request: Google_Logging_V2_DeleteViewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteViewRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteViewInterceptors() ?? []
    )
  }

  /// Lists sinks.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSinks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSinks(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listSinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSinksInterceptors() ?? []
    )
  }

  /// Gets a sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSink(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSinkInterceptors() ?? []
    )
  }

  /// Creates a sink that exports specified log entries to a destination. The
  /// export of newly-ingested log entries begins immediately, unless the sink's
  /// `writer_identity` is not permitted to write to the destination. A sink can
  /// export log entries only from the resource owning the sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSink(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSinkInterceptors() ?? []
    )
  }

  /// Updates a sink. This method replaces the following fields in the existing
  /// sink with values from the new sink: `destination`, and `filter`.
  ///
  /// The updated sink might also have a new `writer_identity`; see the
  /// `unique_writer_identity` field.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSink(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSinkInterceptors() ?? []
    )
  }

  /// Deletes a sink. If the sink has a unique `writer_identity`, then that
  /// service account is also deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSink.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSink(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSinkInterceptors() ?? []
    )
  }

  /// Lists all the exclusions on the _Default sink in a parent resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListExclusions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listExclusions(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listExclusions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExclusionsInterceptors() ?? []
    )
  }

  /// Gets the description of an exclusion in the _Default sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getExclusion(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExclusionInterceptors() ?? []
    )
  }

  /// Creates a new exclusion in the _Default sink in a specified parent
  /// resource. Only log entries belonging to that resource can be excluded. You
  /// can have up to 10 exclusions in a resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createExclusion(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateExclusionInterceptors() ?? []
    )
  }

  /// Changes one or more properties of an existing exclusion in the _Default
  /// sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateExclusion(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateExclusionInterceptors() ?? []
    )
  }

  /// Deletes an exclusion in the _Default sink.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteExclusion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteExclusion(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteExclusionInterceptors() ?? []
    )
  }

  /// Gets the Logging CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
  /// folders, organizations and billing accounts. Once configured for an
  /// organization, it applies to all projects and folders in the Google Cloud
  /// organization.
  ///
  /// See [Enabling CMEK for Log
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCmekSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCmekSettings(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCmekSettingsInterceptors() ?? []
    )
  }

  /// Updates the Log Router CMEK settings for the given resource.
  ///
  /// Note: CMEK for the Log Router can currently only be configured for Google
  /// Cloud organizations. Once configured, it applies to all projects and
  /// folders in the Google Cloud organization.
  ///
  /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
  /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  /// account does not have the required
  /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  /// 3) access to the key is disabled.
  ///
  /// See [Enabling CMEK for Log
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCmekSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCmekSettings(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCmekSettingsInterceptors() ?? []
    )
  }

  /// Gets the Log Router settings for the given resource.
  ///
  /// Note: Settings for the Log Router can be get for Google Cloud projects,
  /// folders, organizations and billing accounts. Currently it can only be
  /// configured for organizations. Once configured for an organization, it
  /// applies to all projects and folders in the Google Cloud organization.
  ///
  /// See [Enabling CMEK for Log
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSettings(
    _ request: Google_Logging_V2_GetSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_GetSettingsRequest, Google_Logging_V2_Settings> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSettingsInterceptors() ?? []
    )
  }

  /// Updates the Log Router settings for the given resource.
  ///
  /// Note: Settings for the Log Router can currently only be configured for
  /// Google Cloud organizations. Once configured, it applies to all projects and
  /// folders in the Google Cloud organization.
  ///
  /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
  /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
  /// account does not have the required
  /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
  /// 3) access to the key is disabled. 4) `location_id` is not supported by
  /// Logging. 5) `location_id` violate OrgPolicy.
  ///
  /// See [Enabling CMEK for Log
  /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
  /// for more information.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSettings(
    _ request: Google_Logging_V2_UpdateSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_UpdateSettingsRequest, Google_Logging_V2_Settings> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSettingsInterceptors() ?? []
    )
  }

  /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
  ///
  /// - Parameters:
  ///   - request: Request to send to CopyLogEntries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func copyLogEntries(
    _ request: Google_Logging_V2_CopyLogEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Logging_V2_CopyLogEntriesRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.copyLogEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCopyLogEntriesInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Logging_V2_ConfigServiceV2Client: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Logging_V2_ConfigServiceV2NIOClient")
internal final class Google_Logging_V2_ConfigServiceV2Client: Google_Logging_V2_ConfigServiceV2ClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.logging.v2.ConfigServiceV2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Google_Logging_V2_ConfigServiceV2NIOClient: Google_Logging_V2_ConfigServiceV2ClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol?

  /// Creates a client for the google.logging.v2.ConfigServiceV2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Service for configuring sinks used to route log entries.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Google_Logging_V2_ConfigServiceV2AsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? { get }

  func makeListBucketsCall(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse>

  func makeGetBucketCall(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket>

  func makeCreateBucketCall(
    _ request: Google_Logging_V2_CreateBucketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateBucketRequest, Google_Logging_V2_LogBucket>

  func makeUpdateBucketCall(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket>

  func makeDeleteBucketCall(
    _ request: Google_Logging_V2_DeleteBucketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUndeleteBucketCall(
    _ request: Google_Logging_V2_UndeleteBucketRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UndeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeListViewsCall(
    _ request: Google_Logging_V2_ListViewsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListViewsRequest, Google_Logging_V2_ListViewsResponse>

  func makeGetViewCall(
    _ request: Google_Logging_V2_GetViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetViewRequest, Google_Logging_V2_LogView>

  func makeCreateViewCall(
    _ request: Google_Logging_V2_CreateViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateViewRequest, Google_Logging_V2_LogView>

  func makeUpdateViewCall(
    _ request: Google_Logging_V2_UpdateViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateViewRequest, Google_Logging_V2_LogView>

  func makeDeleteViewCall(
    _ request: Google_Logging_V2_DeleteViewRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteViewRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeListSinksCall(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse>

  func makeGetSinkCall(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink>

  func makeCreateSinkCall(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink>

  func makeUpdateSinkCall(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink>

  func makeDeleteSinkCall(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeListExclusionsCall(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse>

  func makeGetExclusionCall(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion>

  func makeCreateExclusionCall(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion>

  func makeUpdateExclusionCall(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion>

  func makeDeleteExclusionCall(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetCmekSettingsCall(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings>

  func makeUpdateCmekSettingsCall(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings>

  func makeGetSettingsCall(
    _ request: Google_Logging_V2_GetSettingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetSettingsRequest, Google_Logging_V2_Settings>

  func makeUpdateSettingsCall(
    _ request: Google_Logging_V2_UpdateSettingsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateSettingsRequest, Google_Logging_V2_Settings>

  func makeCopyLogEntriesCall(
    _ request: Google_Logging_V2_CopyLogEntriesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CopyLogEntriesRequest, Google_Longrunning_Operation>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Logging_V2_ConfigServiceV2AsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Logging_V2_ConfigServiceV2ClientMetadata.serviceDescriptor
  }

  internal var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeListBucketsCall(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listBuckets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBucketsInterceptors() ?? []
    )
  }

  internal func makeGetBucketCall(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBucketInterceptors() ?? []
    )
  }

  internal func makeCreateBucketCall(
    _ request: Google_Logging_V2_CreateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBucketInterceptors() ?? []
    )
  }

  internal func makeUpdateBucketCall(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBucketInterceptors() ?? []
    )
  }

  internal func makeDeleteBucketCall(
    _ request: Google_Logging_V2_DeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBucketInterceptors() ?? []
    )
  }

  internal func makeUndeleteBucketCall(
    _ request: Google_Logging_V2_UndeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UndeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.undeleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndeleteBucketInterceptors() ?? []
    )
  }

  internal func makeListViewsCall(
    _ request: Google_Logging_V2_ListViewsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListViewsRequest, Google_Logging_V2_ListViewsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listViews.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewsInterceptors() ?? []
    )
  }

  internal func makeGetViewCall(
    _ request: Google_Logging_V2_GetViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetViewRequest, Google_Logging_V2_LogView> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetViewInterceptors() ?? []
    )
  }

  internal func makeCreateViewCall(
    _ request: Google_Logging_V2_CreateViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateViewRequest, Google_Logging_V2_LogView> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateViewInterceptors() ?? []
    )
  }

  internal func makeUpdateViewCall(
    _ request: Google_Logging_V2_UpdateViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateViewRequest, Google_Logging_V2_LogView> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateViewInterceptors() ?? []
    )
  }

  internal func makeDeleteViewCall(
    _ request: Google_Logging_V2_DeleteViewRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteViewRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteViewInterceptors() ?? []
    )
  }

  internal func makeListSinksCall(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listSinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSinksInterceptors() ?? []
    )
  }

  internal func makeGetSinkCall(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSinkInterceptors() ?? []
    )
  }

  internal func makeCreateSinkCall(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSinkInterceptors() ?? []
    )
  }

  internal func makeUpdateSinkCall(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSinkInterceptors() ?? []
    )
  }

  internal func makeDeleteSinkCall(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSinkInterceptors() ?? []
    )
  }

  internal func makeListExclusionsCall(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listExclusions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExclusionsInterceptors() ?? []
    )
  }

  internal func makeGetExclusionCall(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExclusionInterceptors() ?? []
    )
  }

  internal func makeCreateExclusionCall(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateExclusionInterceptors() ?? []
    )
  }

  internal func makeUpdateExclusionCall(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateExclusionInterceptors() ?? []
    )
  }

  internal func makeDeleteExclusionCall(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteExclusionInterceptors() ?? []
    )
  }

  internal func makeGetCmekSettingsCall(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCmekSettingsInterceptors() ?? []
    )
  }

  internal func makeUpdateCmekSettingsCall(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCmekSettingsInterceptors() ?? []
    )
  }

  internal func makeGetSettingsCall(
    _ request: Google_Logging_V2_GetSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_GetSettingsRequest, Google_Logging_V2_Settings> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSettingsInterceptors() ?? []
    )
  }

  internal func makeUpdateSettingsCall(
    _ request: Google_Logging_V2_UpdateSettingsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_UpdateSettingsRequest, Google_Logging_V2_Settings> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSettingsInterceptors() ?? []
    )
  }

  internal func makeCopyLogEntriesCall(
    _ request: Google_Logging_V2_CopyLogEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Logging_V2_CopyLogEntriesRequest, Google_Longrunning_Operation> {
    return self.makeAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.copyLogEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCopyLogEntriesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Logging_V2_ConfigServiceV2AsyncClientProtocol {
  internal func listBuckets(
    _ request: Google_Logging_V2_ListBucketsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_ListBucketsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listBuckets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBucketsInterceptors() ?? []
    )
  }

  internal func getBucket(
    _ request: Google_Logging_V2_GetBucketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogBucket {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBucketInterceptors() ?? []
    )
  }

  internal func createBucket(
    _ request: Google_Logging_V2_CreateBucketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogBucket {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBucketInterceptors() ?? []
    )
  }

  internal func updateBucket(
    _ request: Google_Logging_V2_UpdateBucketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogBucket {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBucketInterceptors() ?? []
    )
  }

  internal func deleteBucket(
    _ request: Google_Logging_V2_DeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBucketInterceptors() ?? []
    )
  }

  internal func undeleteBucket(
    _ request: Google_Logging_V2_UndeleteBucketRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.undeleteBucket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUndeleteBucketInterceptors() ?? []
    )
  }

  internal func listViews(
    _ request: Google_Logging_V2_ListViewsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_ListViewsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listViews.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewsInterceptors() ?? []
    )
  }

  internal func getView(
    _ request: Google_Logging_V2_GetViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogView {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetViewInterceptors() ?? []
    )
  }

  internal func createView(
    _ request: Google_Logging_V2_CreateViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogView {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateViewInterceptors() ?? []
    )
  }

  internal func updateView(
    _ request: Google_Logging_V2_UpdateViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogView {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateViewInterceptors() ?? []
    )
  }

  internal func deleteView(
    _ request: Google_Logging_V2_DeleteViewRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteViewInterceptors() ?? []
    )
  }

  internal func listSinks(
    _ request: Google_Logging_V2_ListSinksRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_ListSinksResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listSinks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSinksInterceptors() ?? []
    )
  }

  internal func getSink(
    _ request: Google_Logging_V2_GetSinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogSink {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSinkInterceptors() ?? []
    )
  }

  internal func createSink(
    _ request: Google_Logging_V2_CreateSinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogSink {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSinkInterceptors() ?? []
    )
  }

  internal func updateSink(
    _ request: Google_Logging_V2_UpdateSinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogSink {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSinkInterceptors() ?? []
    )
  }

  internal func deleteSink(
    _ request: Google_Logging_V2_DeleteSinkRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteSink.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSinkInterceptors() ?? []
    )
  }

  internal func listExclusions(
    _ request: Google_Logging_V2_ListExclusionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_ListExclusionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listExclusions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListExclusionsInterceptors() ?? []
    )
  }

  internal func getExclusion(
    _ request: Google_Logging_V2_GetExclusionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogExclusion {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExclusionInterceptors() ?? []
    )
  }

  internal func createExclusion(
    _ request: Google_Logging_V2_CreateExclusionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogExclusion {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateExclusionInterceptors() ?? []
    )
  }

  internal func updateExclusion(
    _ request: Google_Logging_V2_UpdateExclusionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_LogExclusion {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateExclusionInterceptors() ?? []
    )
  }

  internal func deleteExclusion(
    _ request: Google_Logging_V2_DeleteExclusionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteExclusion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteExclusionInterceptors() ?? []
    )
  }

  internal func getCmekSettings(
    _ request: Google_Logging_V2_GetCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_CmekSettings {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCmekSettingsInterceptors() ?? []
    )
  }

  internal func updateCmekSettings(
    _ request: Google_Logging_V2_UpdateCmekSettingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_CmekSettings {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateCmekSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCmekSettingsInterceptors() ?? []
    )
  }

  internal func getSettings(
    _ request: Google_Logging_V2_GetSettingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_Settings {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSettingsInterceptors() ?? []
    )
  }

  internal func updateSettings(
    _ request: Google_Logging_V2_UpdateSettingsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Logging_V2_Settings {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSettingsInterceptors() ?? []
    )
  }

  internal func copyLogEntries(
    _ request: Google_Logging_V2_CopyLogEntriesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Longrunning_Operation {
    return try await self.performAsyncUnaryCall(
      path: Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.copyLogEntries.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCopyLogEntriesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Google_Logging_V2_ConfigServiceV2AsyncClient: Google_Logging_V2_ConfigServiceV2AsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Google_Logging_V2_ConfigServiceV2ClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'listBuckets'.
  func makeListBucketsInterceptors() -> [ClientInterceptor<Google_Logging_V2_ListBucketsRequest, Google_Logging_V2_ListBucketsResponse>]

  /// - Returns: Interceptors to use when invoking 'getBucket'.
  func makeGetBucketInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetBucketRequest, Google_Logging_V2_LogBucket>]

  /// - Returns: Interceptors to use when invoking 'createBucket'.
  func makeCreateBucketInterceptors() -> [ClientInterceptor<Google_Logging_V2_CreateBucketRequest, Google_Logging_V2_LogBucket>]

  /// - Returns: Interceptors to use when invoking 'updateBucket'.
  func makeUpdateBucketInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateBucketRequest, Google_Logging_V2_LogBucket>]

  /// - Returns: Interceptors to use when invoking 'deleteBucket'.
  func makeDeleteBucketInterceptors() -> [ClientInterceptor<Google_Logging_V2_DeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'undeleteBucket'.
  func makeUndeleteBucketInterceptors() -> [ClientInterceptor<Google_Logging_V2_UndeleteBucketRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'listViews'.
  func makeListViewsInterceptors() -> [ClientInterceptor<Google_Logging_V2_ListViewsRequest, Google_Logging_V2_ListViewsResponse>]

  /// - Returns: Interceptors to use when invoking 'getView'.
  func makeGetViewInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetViewRequest, Google_Logging_V2_LogView>]

  /// - Returns: Interceptors to use when invoking 'createView'.
  func makeCreateViewInterceptors() -> [ClientInterceptor<Google_Logging_V2_CreateViewRequest, Google_Logging_V2_LogView>]

  /// - Returns: Interceptors to use when invoking 'updateView'.
  func makeUpdateViewInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateViewRequest, Google_Logging_V2_LogView>]

  /// - Returns: Interceptors to use when invoking 'deleteView'.
  func makeDeleteViewInterceptors() -> [ClientInterceptor<Google_Logging_V2_DeleteViewRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'listSinks'.
  func makeListSinksInterceptors() -> [ClientInterceptor<Google_Logging_V2_ListSinksRequest, Google_Logging_V2_ListSinksResponse>]

  /// - Returns: Interceptors to use when invoking 'getSink'.
  func makeGetSinkInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetSinkRequest, Google_Logging_V2_LogSink>]

  /// - Returns: Interceptors to use when invoking 'createSink'.
  func makeCreateSinkInterceptors() -> [ClientInterceptor<Google_Logging_V2_CreateSinkRequest, Google_Logging_V2_LogSink>]

  /// - Returns: Interceptors to use when invoking 'updateSink'.
  func makeUpdateSinkInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateSinkRequest, Google_Logging_V2_LogSink>]

  /// - Returns: Interceptors to use when invoking 'deleteSink'.
  func makeDeleteSinkInterceptors() -> [ClientInterceptor<Google_Logging_V2_DeleteSinkRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'listExclusions'.
  func makeListExclusionsInterceptors() -> [ClientInterceptor<Google_Logging_V2_ListExclusionsRequest, Google_Logging_V2_ListExclusionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getExclusion'.
  func makeGetExclusionInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetExclusionRequest, Google_Logging_V2_LogExclusion>]

  /// - Returns: Interceptors to use when invoking 'createExclusion'.
  func makeCreateExclusionInterceptors() -> [ClientInterceptor<Google_Logging_V2_CreateExclusionRequest, Google_Logging_V2_LogExclusion>]

  /// - Returns: Interceptors to use when invoking 'updateExclusion'.
  func makeUpdateExclusionInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateExclusionRequest, Google_Logging_V2_LogExclusion>]

  /// - Returns: Interceptors to use when invoking 'deleteExclusion'.
  func makeDeleteExclusionInterceptors() -> [ClientInterceptor<Google_Logging_V2_DeleteExclusionRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getCmekSettings'.
  func makeGetCmekSettingsInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetCmekSettingsRequest, Google_Logging_V2_CmekSettings>]

  /// - Returns: Interceptors to use when invoking 'updateCmekSettings'.
  func makeUpdateCmekSettingsInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateCmekSettingsRequest, Google_Logging_V2_CmekSettings>]

  /// - Returns: Interceptors to use when invoking 'getSettings'.
  func makeGetSettingsInterceptors() -> [ClientInterceptor<Google_Logging_V2_GetSettingsRequest, Google_Logging_V2_Settings>]

  /// - Returns: Interceptors to use when invoking 'updateSettings'.
  func makeUpdateSettingsInterceptors() -> [ClientInterceptor<Google_Logging_V2_UpdateSettingsRequest, Google_Logging_V2_Settings>]

  /// - Returns: Interceptors to use when invoking 'copyLogEntries'.
  func makeCopyLogEntriesInterceptors() -> [ClientInterceptor<Google_Logging_V2_CopyLogEntriesRequest, Google_Longrunning_Operation>]
}

internal enum Google_Logging_V2_ConfigServiceV2ClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ConfigServiceV2",
    fullName: "google.logging.v2.ConfigServiceV2",
    methods: [
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listBuckets,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getBucket,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createBucket,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateBucket,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteBucket,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.undeleteBucket,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listViews,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getView,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createView,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateView,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteView,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listSinks,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSink,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createSink,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSink,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteSink,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.listExclusions,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getExclusion,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.createExclusion,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateExclusion,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.deleteExclusion,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getCmekSettings,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateCmekSettings,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.getSettings,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.updateSettings,
      Google_Logging_V2_ConfigServiceV2ClientMetadata.Methods.copyLogEntries,
    ]
  )

  internal enum Methods {
    internal static let listBuckets = GRPCMethodDescriptor(
      name: "ListBuckets",
      path: "/google.logging.v2.ConfigServiceV2/ListBuckets",
      type: GRPCCallType.unary
    )

    internal static let getBucket = GRPCMethodDescriptor(
      name: "GetBucket",
      path: "/google.logging.v2.ConfigServiceV2/GetBucket",
      type: GRPCCallType.unary
    )

    internal static let createBucket = GRPCMethodDescriptor(
      name: "CreateBucket",
      path: "/google.logging.v2.ConfigServiceV2/CreateBucket",
      type: GRPCCallType.unary
    )

    internal static let updateBucket = GRPCMethodDescriptor(
      name: "UpdateBucket",
      path: "/google.logging.v2.ConfigServiceV2/UpdateBucket",
      type: GRPCCallType.unary
    )

    internal static let deleteBucket = GRPCMethodDescriptor(
      name: "DeleteBucket",
      path: "/google.logging.v2.ConfigServiceV2/DeleteBucket",
      type: GRPCCallType.unary
    )

    internal static let undeleteBucket = GRPCMethodDescriptor(
      name: "UndeleteBucket",
      path: "/google.logging.v2.ConfigServiceV2/UndeleteBucket",
      type: GRPCCallType.unary
    )

    internal static let listViews = GRPCMethodDescriptor(
      name: "ListViews",
      path: "/google.logging.v2.ConfigServiceV2/ListViews",
      type: GRPCCallType.unary
    )

    internal static let getView = GRPCMethodDescriptor(
      name: "GetView",
      path: "/google.logging.v2.ConfigServiceV2/GetView",
      type: GRPCCallType.unary
    )

    internal static let createView = GRPCMethodDescriptor(
      name: "CreateView",
      path: "/google.logging.v2.ConfigServiceV2/CreateView",
      type: GRPCCallType.unary
    )

    internal static let updateView = GRPCMethodDescriptor(
      name: "UpdateView",
      path: "/google.logging.v2.ConfigServiceV2/UpdateView",
      type: GRPCCallType.unary
    )

    internal static let deleteView = GRPCMethodDescriptor(
      name: "DeleteView",
      path: "/google.logging.v2.ConfigServiceV2/DeleteView",
      type: GRPCCallType.unary
    )

    internal static let listSinks = GRPCMethodDescriptor(
      name: "ListSinks",
      path: "/google.logging.v2.ConfigServiceV2/ListSinks",
      type: GRPCCallType.unary
    )

    internal static let getSink = GRPCMethodDescriptor(
      name: "GetSink",
      path: "/google.logging.v2.ConfigServiceV2/GetSink",
      type: GRPCCallType.unary
    )

    internal static let createSink = GRPCMethodDescriptor(
      name: "CreateSink",
      path: "/google.logging.v2.ConfigServiceV2/CreateSink",
      type: GRPCCallType.unary
    )

    internal static let updateSink = GRPCMethodDescriptor(
      name: "UpdateSink",
      path: "/google.logging.v2.ConfigServiceV2/UpdateSink",
      type: GRPCCallType.unary
    )

    internal static let deleteSink = GRPCMethodDescriptor(
      name: "DeleteSink",
      path: "/google.logging.v2.ConfigServiceV2/DeleteSink",
      type: GRPCCallType.unary
    )

    internal static let listExclusions = GRPCMethodDescriptor(
      name: "ListExclusions",
      path: "/google.logging.v2.ConfigServiceV2/ListExclusions",
      type: GRPCCallType.unary
    )

    internal static let getExclusion = GRPCMethodDescriptor(
      name: "GetExclusion",
      path: "/google.logging.v2.ConfigServiceV2/GetExclusion",
      type: GRPCCallType.unary
    )

    internal static let createExclusion = GRPCMethodDescriptor(
      name: "CreateExclusion",
      path: "/google.logging.v2.ConfigServiceV2/CreateExclusion",
      type: GRPCCallType.unary
    )

    internal static let updateExclusion = GRPCMethodDescriptor(
      name: "UpdateExclusion",
      path: "/google.logging.v2.ConfigServiceV2/UpdateExclusion",
      type: GRPCCallType.unary
    )

    internal static let deleteExclusion = GRPCMethodDescriptor(
      name: "DeleteExclusion",
      path: "/google.logging.v2.ConfigServiceV2/DeleteExclusion",
      type: GRPCCallType.unary
    )

    internal static let getCmekSettings = GRPCMethodDescriptor(
      name: "GetCmekSettings",
      path: "/google.logging.v2.ConfigServiceV2/GetCmekSettings",
      type: GRPCCallType.unary
    )

    internal static let updateCmekSettings = GRPCMethodDescriptor(
      name: "UpdateCmekSettings",
      path: "/google.logging.v2.ConfigServiceV2/UpdateCmekSettings",
      type: GRPCCallType.unary
    )

    internal static let getSettings = GRPCMethodDescriptor(
      name: "GetSettings",
      path: "/google.logging.v2.ConfigServiceV2/GetSettings",
      type: GRPCCallType.unary
    )

    internal static let updateSettings = GRPCMethodDescriptor(
      name: "UpdateSettings",
      path: "/google.logging.v2.ConfigServiceV2/UpdateSettings",
      type: GRPCCallType.unary
    )

    internal static let copyLogEntries = GRPCMethodDescriptor(
      name: "CopyLogEntries",
      path: "/google.logging.v2.ConfigServiceV2/CopyLogEntries",
      type: GRPCCallType.unary
    )
  }
}

