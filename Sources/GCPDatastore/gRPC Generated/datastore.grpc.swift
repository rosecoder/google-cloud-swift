//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/datastore/v1/datastore.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Each RPC normalizes the partition IDs of the keys in its input entities,
/// and always returns entities with keys with normalized partition IDs.
/// This applies to all keys and entities, including those in values, except keys
/// with both an empty path and an empty or unset partition ID. Normalization of
/// input keys sets the project ID (if not already set) to the project ID from
/// the request.
///
/// Usage: instantiate `Google_Datastore_V1_DatastoreClient`, then call methods of this protocol to make API calls.
internal protocol Google_Datastore_V1_DatastoreClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? { get }

  func lookup(
    _ request: Google_Datastore_V1_LookupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_LookupRequest, Google_Datastore_V1_LookupResponse>

  func runQuery(
    _ request: Google_Datastore_V1_RunQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_RunQueryRequest, Google_Datastore_V1_RunQueryResponse>

  func beginTransaction(
    _ request: Google_Datastore_V1_BeginTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_BeginTransactionRequest, Google_Datastore_V1_BeginTransactionResponse>

  func commit(
    _ request: Google_Datastore_V1_CommitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_CommitRequest, Google_Datastore_V1_CommitResponse>

  func rollback(
    _ request: Google_Datastore_V1_RollbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_RollbackRequest, Google_Datastore_V1_RollbackResponse>

  func allocateIds(
    _ request: Google_Datastore_V1_AllocateIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_AllocateIdsRequest, Google_Datastore_V1_AllocateIdsResponse>

  func reserveIds(
    _ request: Google_Datastore_V1_ReserveIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Datastore_V1_ReserveIdsRequest, Google_Datastore_V1_ReserveIdsResponse>
}

extension Google_Datastore_V1_DatastoreClientProtocol {
  internal var serviceName: String {
    return "google.datastore.v1.Datastore"
  }

  /// Looks up entities by key.
  ///
  /// - Parameters:
  ///   - request: Request to send to Lookup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lookup(
    _ request: Google_Datastore_V1_LookupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_LookupRequest, Google_Datastore_V1_LookupResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.lookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookupInterceptors() ?? []
    )
  }

  /// Queries for entities.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func runQuery(
    _ request: Google_Datastore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_RunQueryRequest, Google_Datastore_V1_RunQueryResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? []
    )
  }

  /// Begins a new transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func beginTransaction(
    _ request: Google_Datastore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_BeginTransactionRequest, Google_Datastore_V1_BeginTransactionResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  /// Commits a transaction, optionally creating, deleting or modifying some
  /// entities.
  ///
  /// - Parameters:
  ///   - request: Request to send to Commit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func commit(
    _ request: Google_Datastore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_CommitRequest, Google_Datastore_V1_CommitResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  /// Rolls back a transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to Rollback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rollback(
    _ request: Google_Datastore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_RollbackRequest, Google_Datastore_V1_RollbackResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  /// Allocates IDs for the given keys, which is useful for referencing an entity
  /// before it is inserted.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllocateIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allocateIds(
    _ request: Google_Datastore_V1_AllocateIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_AllocateIdsRequest, Google_Datastore_V1_AllocateIdsResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.allocateIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocateIdsInterceptors() ?? []
    )
  }

  /// Prevents the supplied keys' IDs from being auto-allocated by Cloud
  /// Datastore.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReserveIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reserveIds(
    _ request: Google_Datastore_V1_ReserveIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Datastore_V1_ReserveIdsRequest, Google_Datastore_V1_ReserveIdsResponse> {
    return self.makeUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.reserveIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveIdsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Google_Datastore_V1_DatastoreClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Google_Datastore_V1_DatastoreNIOClient")
internal final class Google_Datastore_V1_DatastoreClient: Google_Datastore_V1_DatastoreClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.datastore.v1.Datastore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Google_Datastore_V1_DatastoreNIOClient: Google_Datastore_V1_DatastoreClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol?

  /// Creates a client for the google.datastore.v1.Datastore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Each RPC normalizes the partition IDs of the keys in its input entities,
/// and always returns entities with keys with normalized partition IDs.
/// This applies to all keys and entities, including those in values, except keys
/// with both an empty path and an empty or unset partition ID. Normalization of
/// input keys sets the project ID (if not already set) to the project ID from
/// the request.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Google_Datastore_V1_DatastoreAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? { get }

  func makeLookupCall(
    _ request: Google_Datastore_V1_LookupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_LookupRequest, Google_Datastore_V1_LookupResponse>

  func makeRunQueryCall(
    _ request: Google_Datastore_V1_RunQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_RunQueryRequest, Google_Datastore_V1_RunQueryResponse>

  func makeBeginTransactionCall(
    _ request: Google_Datastore_V1_BeginTransactionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_BeginTransactionRequest, Google_Datastore_V1_BeginTransactionResponse>

  func makeCommitCall(
    _ request: Google_Datastore_V1_CommitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_CommitRequest, Google_Datastore_V1_CommitResponse>

  func makeRollbackCall(
    _ request: Google_Datastore_V1_RollbackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_RollbackRequest, Google_Datastore_V1_RollbackResponse>

  func makeAllocateIdsCall(
    _ request: Google_Datastore_V1_AllocateIdsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_AllocateIdsRequest, Google_Datastore_V1_AllocateIdsResponse>

  func makeReserveIdsCall(
    _ request: Google_Datastore_V1_ReserveIdsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_ReserveIdsRequest, Google_Datastore_V1_ReserveIdsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Datastore_V1_DatastoreAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Datastore_V1_DatastoreClientMetadata.serviceDescriptor
  }

  internal var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLookupCall(
    _ request: Google_Datastore_V1_LookupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_LookupRequest, Google_Datastore_V1_LookupResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.lookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookupInterceptors() ?? []
    )
  }

  internal func makeRunQueryCall(
    _ request: Google_Datastore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_RunQueryRequest, Google_Datastore_V1_RunQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? []
    )
  }

  internal func makeBeginTransactionCall(
    _ request: Google_Datastore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_BeginTransactionRequest, Google_Datastore_V1_BeginTransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  internal func makeCommitCall(
    _ request: Google_Datastore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_CommitRequest, Google_Datastore_V1_CommitResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  internal func makeRollbackCall(
    _ request: Google_Datastore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_RollbackRequest, Google_Datastore_V1_RollbackResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  internal func makeAllocateIdsCall(
    _ request: Google_Datastore_V1_AllocateIdsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_AllocateIdsRequest, Google_Datastore_V1_AllocateIdsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.allocateIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocateIdsInterceptors() ?? []
    )
  }

  internal func makeReserveIdsCall(
    _ request: Google_Datastore_V1_ReserveIdsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Datastore_V1_ReserveIdsRequest, Google_Datastore_V1_ReserveIdsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.reserveIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveIdsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Datastore_V1_DatastoreAsyncClientProtocol {
  internal func lookup(
    _ request: Google_Datastore_V1_LookupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_LookupResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.lookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLookupInterceptors() ?? []
    )
  }

  internal func runQuery(
    _ request: Google_Datastore_V1_RunQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_RunQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.runQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunQueryInterceptors() ?? []
    )
  }

  internal func beginTransaction(
    _ request: Google_Datastore_V1_BeginTransactionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_BeginTransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.beginTransaction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  internal func commit(
    _ request: Google_Datastore_V1_CommitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_CommitResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.commit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitInterceptors() ?? []
    )
  }

  internal func rollback(
    _ request: Google_Datastore_V1_RollbackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_RollbackResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.rollback.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  internal func allocateIds(
    _ request: Google_Datastore_V1_AllocateIdsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_AllocateIdsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.allocateIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocateIdsInterceptors() ?? []
    )
  }

  internal func reserveIds(
    _ request: Google_Datastore_V1_ReserveIdsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Datastore_V1_ReserveIdsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Datastore_V1_DatastoreClientMetadata.Methods.reserveIds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveIdsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Google_Datastore_V1_DatastoreAsyncClient: Google_Datastore_V1_DatastoreAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Google_Datastore_V1_DatastoreClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'lookup'.
  func makeLookupInterceptors() -> [ClientInterceptor<Google_Datastore_V1_LookupRequest, Google_Datastore_V1_LookupResponse>]

  /// - Returns: Interceptors to use when invoking 'runQuery'.
  func makeRunQueryInterceptors() -> [ClientInterceptor<Google_Datastore_V1_RunQueryRequest, Google_Datastore_V1_RunQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'beginTransaction'.
  func makeBeginTransactionInterceptors() -> [ClientInterceptor<Google_Datastore_V1_BeginTransactionRequest, Google_Datastore_V1_BeginTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'commit'.
  func makeCommitInterceptors() -> [ClientInterceptor<Google_Datastore_V1_CommitRequest, Google_Datastore_V1_CommitResponse>]

  /// - Returns: Interceptors to use when invoking 'rollback'.
  func makeRollbackInterceptors() -> [ClientInterceptor<Google_Datastore_V1_RollbackRequest, Google_Datastore_V1_RollbackResponse>]

  /// - Returns: Interceptors to use when invoking 'allocateIds'.
  func makeAllocateIdsInterceptors() -> [ClientInterceptor<Google_Datastore_V1_AllocateIdsRequest, Google_Datastore_V1_AllocateIdsResponse>]

  /// - Returns: Interceptors to use when invoking 'reserveIds'.
  func makeReserveIdsInterceptors() -> [ClientInterceptor<Google_Datastore_V1_ReserveIdsRequest, Google_Datastore_V1_ReserveIdsResponse>]
}

internal enum Google_Datastore_V1_DatastoreClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Datastore",
    fullName: "google.datastore.v1.Datastore",
    methods: [
      Google_Datastore_V1_DatastoreClientMetadata.Methods.lookup,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.runQuery,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.beginTransaction,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.commit,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.rollback,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.allocateIds,
      Google_Datastore_V1_DatastoreClientMetadata.Methods.reserveIds,
    ]
  )

  internal enum Methods {
    internal static let lookup = GRPCMethodDescriptor(
      name: "Lookup",
      path: "/google.datastore.v1.Datastore/Lookup",
      type: GRPCCallType.unary
    )

    internal static let runQuery = GRPCMethodDescriptor(
      name: "RunQuery",
      path: "/google.datastore.v1.Datastore/RunQuery",
      type: GRPCCallType.unary
    )

    internal static let beginTransaction = GRPCMethodDescriptor(
      name: "BeginTransaction",
      path: "/google.datastore.v1.Datastore/BeginTransaction",
      type: GRPCCallType.unary
    )

    internal static let commit = GRPCMethodDescriptor(
      name: "Commit",
      path: "/google.datastore.v1.Datastore/Commit",
      type: GRPCCallType.unary
    )

    internal static let rollback = GRPCMethodDescriptor(
      name: "Rollback",
      path: "/google.datastore.v1.Datastore/Rollback",
      type: GRPCCallType.unary
    )

    internal static let allocateIds = GRPCMethodDescriptor(
      name: "AllocateIds",
      path: "/google.datastore.v1.Datastore/AllocateIds",
      type: GRPCCallType.unary
    )

    internal static let reserveIds = GRPCMethodDescriptor(
      name: "ReserveIds",
      path: "/google.datastore.v1.Datastore/ReserveIds",
      type: GRPCCallType.unary
    )
  }
}

