// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/pubsub/v1/schema.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

internal enum Google_Pubsub_V1_SchemaService {
    internal static let descriptor = GRPCCore.ServiceDescriptor.google_pubsub_v1_SchemaService
    internal enum Method {
        internal enum CreateSchema {
            internal typealias Input = Google_Pubsub_V1_CreateSchemaRequest
            internal typealias Output = Google_Pubsub_V1_Schema
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "CreateSchema"
            )
        }
        internal enum GetSchema {
            internal typealias Input = Google_Pubsub_V1_GetSchemaRequest
            internal typealias Output = Google_Pubsub_V1_Schema
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "GetSchema"
            )
        }
        internal enum ListSchemas {
            internal typealias Input = Google_Pubsub_V1_ListSchemasRequest
            internal typealias Output = Google_Pubsub_V1_ListSchemasResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "ListSchemas"
            )
        }
        internal enum ListSchemaRevisions {
            internal typealias Input = Google_Pubsub_V1_ListSchemaRevisionsRequest
            internal typealias Output = Google_Pubsub_V1_ListSchemaRevisionsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "ListSchemaRevisions"
            )
        }
        internal enum CommitSchema {
            internal typealias Input = Google_Pubsub_V1_CommitSchemaRequest
            internal typealias Output = Google_Pubsub_V1_Schema
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "CommitSchema"
            )
        }
        internal enum RollbackSchema {
            internal typealias Input = Google_Pubsub_V1_RollbackSchemaRequest
            internal typealias Output = Google_Pubsub_V1_Schema
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "RollbackSchema"
            )
        }
        internal enum DeleteSchemaRevision {
            internal typealias Input = Google_Pubsub_V1_DeleteSchemaRevisionRequest
            internal typealias Output = Google_Pubsub_V1_Schema
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "DeleteSchemaRevision"
            )
        }
        internal enum DeleteSchema {
            internal typealias Input = Google_Pubsub_V1_DeleteSchemaRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "DeleteSchema"
            )
        }
        internal enum ValidateSchema {
            internal typealias Input = Google_Pubsub_V1_ValidateSchemaRequest
            internal typealias Output = Google_Pubsub_V1_ValidateSchemaResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "ValidateSchema"
            )
        }
        internal enum ValidateMessage {
            internal typealias Input = Google_Pubsub_V1_ValidateMessageRequest
            internal typealias Output = Google_Pubsub_V1_ValidateMessageResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_SchemaService.descriptor.fullyQualifiedService,
                method: "ValidateMessage"
            )
        }
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateSchema.descriptor,
            GetSchema.descriptor,
            ListSchemas.descriptor,
            ListSchemaRevisions.descriptor,
            CommitSchema.descriptor,
            RollbackSchema.descriptor,
            DeleteSchemaRevision.descriptor,
            DeleteSchema.descriptor,
            ValidateSchema.descriptor,
            ValidateMessage.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias ClientProtocol = Google_Pubsub_V1_SchemaService_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias Client = Google_Pubsub_V1_SchemaService_Client
}

extension GRPCCore.ServiceDescriptor {
    internal static let google_pubsub_v1_SchemaService = Self(
        package: "google.pubsub.v1",
        service: "SchemaService"
    )
}

/// Service for doing schema-related operations.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal protocol Google_Pubsub_V1_SchemaService_ClientProtocol: Sendable {
    /// Creates a schema.
    func createSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CreateSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets a schema.
    func getSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists schemas in a project.
    func listSchemas<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemasRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSchemasRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSchemasResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemasResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists all schema revisions for the named schema.
    func listSchemaRevisions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemaRevisionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSchemaRevisionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSchemaRevisionsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemaRevisionsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Commits a new schema revision to an existing schema.
    func commitSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CommitSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CommitSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a new schema revision that is a copy of the provided revision_id.
    func rollbackSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_RollbackSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_RollbackSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a specific schema revision.
    func deleteSchemaRevision<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRevisionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSchemaRevisionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes a schema.
    func deleteSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Validates a schema.
    func validateSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ValidateSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ValidateSchemaResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateSchemaResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Validates a message against a schema.
    func validateMessage<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateMessageRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ValidateMessageRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ValidateMessageResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateMessageResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_SchemaService.ClientProtocol {
    internal func createSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_CreateSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Schema>(),
            options: options,
            body
        )
    }
    
    internal func getSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_GetSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Schema>(),
            options: options,
            body
        )
    }
    
    internal func listSchemas<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemasRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemasResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSchemas(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListSchemasRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListSchemasResponse>(),
            options: options,
            body
        )
    }
    
    internal func listSchemaRevisions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemaRevisionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemaRevisionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSchemaRevisions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListSchemaRevisionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListSchemaRevisionsResponse>(),
            options: options,
            body
        )
    }
    
    internal func commitSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CommitSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.commitSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_CommitSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Schema>(),
            options: options,
            body
        )
    }
    
    internal func rollbackSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_RollbackSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.rollbackSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_RollbackSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Schema>(),
            options: options,
            body
        )
    }
    
    internal func deleteSchemaRevision<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRevisionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSchemaRevision(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DeleteSchemaRevisionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Schema>(),
            options: options,
            body
        )
    }
    
    internal func deleteSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DeleteSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func validateSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateSchemaRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateSchemaResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.validateSchema(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ValidateSchemaRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ValidateSchemaResponse>(),
            options: options,
            body
        )
    }
    
    internal func validateMessage<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateMessageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateMessageResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.validateMessage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ValidateMessageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ValidateMessageResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_SchemaService.ClientProtocol {
    /// Creates a schema.
    internal func createSchema<Result>(
        _ message: Google_Pubsub_V1_CreateSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets a schema.
    internal func getSchema<Result>(
        _ message: Google_Pubsub_V1_GetSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_GetSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists schemas in a project.
    internal func listSchemas<Result>(
        _ message: Google_Pubsub_V1_ListSchemasRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemasResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemasRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSchemas(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists all schema revisions for the named schema.
    internal func listSchemaRevisions<Result>(
        _ message: Google_Pubsub_V1_ListSchemaRevisionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemaRevisionsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemaRevisionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSchemaRevisions(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Commits a new schema revision to an existing schema.
    internal func commitSchema<Result>(
        _ message: Google_Pubsub_V1_CommitSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_CommitSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.commitSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a new schema revision that is a copy of the provided revision_id.
    internal func rollbackSchema<Result>(
        _ message: Google_Pubsub_V1_RollbackSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_RollbackSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.rollbackSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a specific schema revision.
    internal func deleteSchemaRevision<Result>(
        _ message: Google_Pubsub_V1_DeleteSchemaRevisionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRevisionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchemaRevision(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes a schema.
    internal func deleteSchema<Result>(
        _ message: Google_Pubsub_V1_DeleteSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Validates a schema.
    internal func validateSchema<Result>(
        _ message: Google_Pubsub_V1_ValidateSchemaRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateSchemaResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateSchemaRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.validateSchema(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Validates a message against a schema.
    internal func validateMessage<Result>(
        _ message: Google_Pubsub_V1_ValidateMessageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateMessageResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateMessageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.validateMessage(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// Service for doing schema-related operations.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal struct Google_Pubsub_V1_SchemaService_Client: Google_Pubsub_V1_SchemaService.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    internal init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a schema.
    internal func createSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CreateSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.CreateSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets a schema.
    internal func getSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.GetSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists schemas in a project.
    internal func listSchemas<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemasRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSchemasRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSchemasResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemasResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.ListSchemas.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists all schema revisions for the named schema.
    internal func listSchemaRevisions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSchemaRevisionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSchemaRevisionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSchemaRevisionsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSchemaRevisionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.ListSchemaRevisions.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Commits a new schema revision to an existing schema.
    internal func commitSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CommitSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CommitSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.CommitSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a new schema revision that is a copy of the provided revision_id.
    internal func rollbackSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_RollbackSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_RollbackSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.RollbackSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a specific schema revision.
    internal func deleteSchemaRevision<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRevisionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSchemaRevisionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Schema>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Schema>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.DeleteSchemaRevision.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes a schema.
    internal func deleteSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.DeleteSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Validates a schema.
    internal func validateSchema<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateSchemaRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ValidateSchemaRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ValidateSchemaResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateSchemaResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.ValidateSchema.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Validates a message against a schema.
    internal func validateMessage<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ValidateMessageRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ValidateMessageRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ValidateMessageResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ValidateMessageResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_SchemaService.Method.ValidateMessage.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
