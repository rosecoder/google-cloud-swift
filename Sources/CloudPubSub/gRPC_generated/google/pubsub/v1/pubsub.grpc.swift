// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/pubsub/v1/pubsub.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

internal enum Google_Pubsub_V1_Publisher {
    internal static let descriptor = GRPCCore.ServiceDescriptor.google_pubsub_v1_Publisher
    internal enum Method {
        internal enum CreateTopic {
            internal typealias Input = Google_Pubsub_V1_Topic
            internal typealias Output = Google_Pubsub_V1_Topic
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "CreateTopic"
            )
        }
        internal enum UpdateTopic {
            internal typealias Input = Google_Pubsub_V1_UpdateTopicRequest
            internal typealias Output = Google_Pubsub_V1_Topic
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "UpdateTopic"
            )
        }
        internal enum Publish {
            internal typealias Input = Google_Pubsub_V1_PublishRequest
            internal typealias Output = Google_Pubsub_V1_PublishResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "Publish"
            )
        }
        internal enum GetTopic {
            internal typealias Input = Google_Pubsub_V1_GetTopicRequest
            internal typealias Output = Google_Pubsub_V1_Topic
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "GetTopic"
            )
        }
        internal enum ListTopics {
            internal typealias Input = Google_Pubsub_V1_ListTopicsRequest
            internal typealias Output = Google_Pubsub_V1_ListTopicsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "ListTopics"
            )
        }
        internal enum ListTopicSubscriptions {
            internal typealias Input = Google_Pubsub_V1_ListTopicSubscriptionsRequest
            internal typealias Output = Google_Pubsub_V1_ListTopicSubscriptionsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "ListTopicSubscriptions"
            )
        }
        internal enum ListTopicSnapshots {
            internal typealias Input = Google_Pubsub_V1_ListTopicSnapshotsRequest
            internal typealias Output = Google_Pubsub_V1_ListTopicSnapshotsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "ListTopicSnapshots"
            )
        }
        internal enum DeleteTopic {
            internal typealias Input = Google_Pubsub_V1_DeleteTopicRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "DeleteTopic"
            )
        }
        internal enum DetachSubscription {
            internal typealias Input = Google_Pubsub_V1_DetachSubscriptionRequest
            internal typealias Output = Google_Pubsub_V1_DetachSubscriptionResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Publisher.descriptor.fullyQualifiedService,
                method: "DetachSubscription"
            )
        }
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateTopic.descriptor,
            UpdateTopic.descriptor,
            Publish.descriptor,
            GetTopic.descriptor,
            ListTopics.descriptor,
            ListTopicSubscriptions.descriptor,
            ListTopicSnapshots.descriptor,
            DeleteTopic.descriptor,
            DetachSubscription.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias ClientProtocol = Google_Pubsub_V1_Publisher_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias Client = Google_Pubsub_V1_Publisher_Client
}

extension GRPCCore.ServiceDescriptor {
    internal static let google_pubsub_v1_Publisher = Self(
        package: "google.pubsub.v1",
        service: "Publisher"
    )
}

internal enum Google_Pubsub_V1_Subscriber {
    internal static let descriptor = GRPCCore.ServiceDescriptor.google_pubsub_v1_Subscriber
    internal enum Method {
        internal enum CreateSubscription {
            internal typealias Input = Google_Pubsub_V1_Subscription
            internal typealias Output = Google_Pubsub_V1_Subscription
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "CreateSubscription"
            )
        }
        internal enum GetSubscription {
            internal typealias Input = Google_Pubsub_V1_GetSubscriptionRequest
            internal typealias Output = Google_Pubsub_V1_Subscription
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "GetSubscription"
            )
        }
        internal enum UpdateSubscription {
            internal typealias Input = Google_Pubsub_V1_UpdateSubscriptionRequest
            internal typealias Output = Google_Pubsub_V1_Subscription
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "UpdateSubscription"
            )
        }
        internal enum ListSubscriptions {
            internal typealias Input = Google_Pubsub_V1_ListSubscriptionsRequest
            internal typealias Output = Google_Pubsub_V1_ListSubscriptionsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "ListSubscriptions"
            )
        }
        internal enum DeleteSubscription {
            internal typealias Input = Google_Pubsub_V1_DeleteSubscriptionRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "DeleteSubscription"
            )
        }
        internal enum ModifyAckDeadline {
            internal typealias Input = Google_Pubsub_V1_ModifyAckDeadlineRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "ModifyAckDeadline"
            )
        }
        internal enum Acknowledge {
            internal typealias Input = Google_Pubsub_V1_AcknowledgeRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "Acknowledge"
            )
        }
        internal enum Pull {
            internal typealias Input = Google_Pubsub_V1_PullRequest
            internal typealias Output = Google_Pubsub_V1_PullResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "Pull"
            )
        }
        internal enum StreamingPull {
            internal typealias Input = Google_Pubsub_V1_StreamingPullRequest
            internal typealias Output = Google_Pubsub_V1_StreamingPullResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "StreamingPull"
            )
        }
        internal enum ModifyPushConfig {
            internal typealias Input = Google_Pubsub_V1_ModifyPushConfigRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "ModifyPushConfig"
            )
        }
        internal enum GetSnapshot {
            internal typealias Input = Google_Pubsub_V1_GetSnapshotRequest
            internal typealias Output = Google_Pubsub_V1_Snapshot
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "GetSnapshot"
            )
        }
        internal enum ListSnapshots {
            internal typealias Input = Google_Pubsub_V1_ListSnapshotsRequest
            internal typealias Output = Google_Pubsub_V1_ListSnapshotsResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "ListSnapshots"
            )
        }
        internal enum CreateSnapshot {
            internal typealias Input = Google_Pubsub_V1_CreateSnapshotRequest
            internal typealias Output = Google_Pubsub_V1_Snapshot
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "CreateSnapshot"
            )
        }
        internal enum UpdateSnapshot {
            internal typealias Input = Google_Pubsub_V1_UpdateSnapshotRequest
            internal typealias Output = Google_Pubsub_V1_Snapshot
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "UpdateSnapshot"
            )
        }
        internal enum DeleteSnapshot {
            internal typealias Input = Google_Pubsub_V1_DeleteSnapshotRequest
            internal typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "DeleteSnapshot"
            )
        }
        internal enum Seek {
            internal typealias Input = Google_Pubsub_V1_SeekRequest
            internal typealias Output = Google_Pubsub_V1_SeekResponse
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: Google_Pubsub_V1_Subscriber.descriptor.fullyQualifiedService,
                method: "Seek"
            )
        }
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateSubscription.descriptor,
            GetSubscription.descriptor,
            UpdateSubscription.descriptor,
            ListSubscriptions.descriptor,
            DeleteSubscription.descriptor,
            ModifyAckDeadline.descriptor,
            Acknowledge.descriptor,
            Pull.descriptor,
            StreamingPull.descriptor,
            ModifyPushConfig.descriptor,
            GetSnapshot.descriptor,
            ListSnapshots.descriptor,
            CreateSnapshot.descriptor,
            UpdateSnapshot.descriptor,
            DeleteSnapshot.descriptor,
            Seek.descriptor
        ]
    }
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias ClientProtocol = Google_Pubsub_V1_Subscriber_ClientProtocol
    @available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
    internal typealias Client = Google_Pubsub_V1_Subscriber_Client
}

extension GRPCCore.ServiceDescriptor {
    internal static let google_pubsub_v1_Subscriber = Self(
        package: "google.pubsub.v1",
        service: "Subscriber"
    )
}

/// The service that an application uses to manipulate topics, and to send
/// messages to a topic.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal protocol Google_Pubsub_V1_Publisher_ClientProtocol: Sendable {
    /// Creates the given topic with the given name. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    func createTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Topic>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_Topic>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates an existing topic by updating the fields specified in the update
    /// mask. Note that certain properties of a topic are not modifiable.
    func updateTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    /// does not exist.
    func publish<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PublishRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_PublishRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_PublishResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PublishResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets the configuration of a topic.
    func getTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists matching topics.
    func listTopics<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists the names of the attached subscriptions on this topic.
    func listTopicSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSubscriptionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicSubscriptionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicSubscriptionsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSubscriptionsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists the names of the snapshots on this topic. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    func listTopicSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSnapshotsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicSnapshotsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicSnapshotsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSnapshotsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    /// does not exist. After a topic is deleted, a new topic may be created with
    /// the same name; this is an entirely new topic with none of the old
    /// configuration or subscriptions. Existing subscriptions to this topic are
    /// not deleted, but their `topic` field is set to `_deleted-topic_`.
    func deleteTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Detaches a subscription from this topic. All messages retained in the
    /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
    /// will return FAILED_PRECONDITION. If the subscription is a push
    /// subscription, pushes to the endpoint will stop.
    func detachSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DetachSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DetachSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_DetachSubscriptionResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_DetachSubscriptionResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_Publisher.ClientProtocol {
    internal func createTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_Topic>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Topic>(),
            options: options,
            body
        )
    }
    
    internal func updateTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateTopicRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_UpdateTopicRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Topic>(),
            options: options,
            body
        )
    }
    
    internal func publish<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PublishRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PublishResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.publish(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_PublishRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_PublishResponse>(),
            options: options,
            body
        )
    }
    
    internal func getTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetTopicRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_GetTopicRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Topic>(),
            options: options,
            body
        )
    }
    
    internal func listTopics<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTopics(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListTopicsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListTopicsResponse>(),
            options: options,
            body
        )
    }
    
    internal func listTopicSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSubscriptionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSubscriptionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTopicSubscriptions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListTopicSubscriptionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListTopicSubscriptionsResponse>(),
            options: options,
            body
        )
    }
    
    internal func listTopicSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSnapshotsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSnapshotsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listTopicSnapshots(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListTopicSnapshotsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListTopicSnapshotsResponse>(),
            options: options,
            body
        )
    }
    
    internal func deleteTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteTopicRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteTopic(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DeleteTopicRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func detachSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DetachSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_DetachSubscriptionResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.detachSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DetachSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_DetachSubscriptionResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_Publisher.ClientProtocol {
    /// Creates the given topic with the given name. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    internal func createTopic<Result>(
        _ message: Google_Pubsub_V1_Topic,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_Topic>(
            message: message,
            metadata: metadata
        )
        return try await self.createTopic(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates an existing topic by updating the fields specified in the update
    /// mask. Note that certain properties of a topic are not modifiable.
    internal func updateTopic<Result>(
        _ message: Google_Pubsub_V1_UpdateTopicRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateTopicRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTopic(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    /// does not exist.
    internal func publish<Result>(
        _ message: Google_Pubsub_V1_PublishRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PublishResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_PublishRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.publish(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets the configuration of a topic.
    internal func getTopic<Result>(
        _ message: Google_Pubsub_V1_GetTopicRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_GetTopicRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTopic(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists matching topics.
    internal func listTopics<Result>(
        _ message: Google_Pubsub_V1_ListTopicsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTopics(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists the names of the attached subscriptions on this topic.
    internal func listTopicSubscriptions<Result>(
        _ message: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSubscriptionsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSubscriptionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTopicSubscriptions(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists the names of the snapshots on this topic. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func listTopicSnapshots<Result>(
        _ message: Google_Pubsub_V1_ListTopicSnapshotsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSnapshotsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSnapshotsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTopicSnapshots(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    /// does not exist. After a topic is deleted, a new topic may be created with
    /// the same name; this is an entirely new topic with none of the old
    /// configuration or subscriptions. Existing subscriptions to this topic are
    /// not deleted, but their `topic` field is set to `_deleted-topic_`.
    internal func deleteTopic<Result>(
        _ message: Google_Pubsub_V1_DeleteTopicRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteTopicRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTopic(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Detaches a subscription from this topic. All messages retained in the
    /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
    /// will return FAILED_PRECONDITION. If the subscription is a push
    /// subscription, pushes to the endpoint will stop.
    internal func detachSubscription<Result>(
        _ message: Google_Pubsub_V1_DetachSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_DetachSubscriptionResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DetachSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.detachSubscription(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// The service that an application uses to manipulate topics, and to send
/// messages to a topic.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal struct Google_Pubsub_V1_Publisher_Client: Google_Pubsub_V1_Publisher.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    internal init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates the given topic with the given name. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    internal func createTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Topic>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_Topic>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.CreateTopic.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates an existing topic by updating the fields specified in the update
    /// mask. Note that certain properties of a topic are not modifiable.
    internal func updateTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.UpdateTopic.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    /// does not exist.
    internal func publish<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PublishRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_PublishRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_PublishResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PublishResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.Publish.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets the configuration of a topic.
    internal func getTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Topic>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Topic>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.GetTopic.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists matching topics.
    internal func listTopics<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.ListTopics.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists the names of the attached subscriptions on this topic.
    internal func listTopicSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSubscriptionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicSubscriptionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicSubscriptionsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSubscriptionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.ListTopicSubscriptions.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists the names of the snapshots on this topic. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func listTopicSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListTopicSnapshotsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListTopicSnapshotsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListTopicSnapshotsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListTopicSnapshotsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.ListTopicSnapshots.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    /// does not exist. After a topic is deleted, a new topic may be created with
    /// the same name; this is an entirely new topic with none of the old
    /// configuration or subscriptions. Existing subscriptions to this topic are
    /// not deleted, but their `topic` field is set to `_deleted-topic_`.
    internal func deleteTopic<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteTopicRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteTopicRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.DeleteTopic.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Detaches a subscription from this topic. All messages retained in the
    /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
    /// will return FAILED_PRECONDITION. If the subscription is a push
    /// subscription, pushes to the endpoint will stop.
    internal func detachSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DetachSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DetachSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_DetachSubscriptionResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_DetachSubscriptionResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Publisher.Method.DetachSubscription.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}

/// The service that an application uses to manipulate subscriptions and to
/// consume messages from a subscription via the `Pull` method or by
/// establishing a bi-directional stream using the `StreamingPull` method.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal protocol Google_Pubsub_V1_Subscriber_ClientProtocol: Sendable {
    /// Creates a subscription to a given topic. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    /// If the subscription already exists, returns `ALREADY_EXISTS`.
    /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    ///
    /// If the name is not provided in the request, the server will assign a random
    /// name for this subscription on the same project as the topic, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Subscription object. Note that
    /// for REST API requests, you must specify a name in the request.
    func createSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Subscription>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_Subscription>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets the configuration details of a subscription.
    func getSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates an existing subscription by updating the fields specified in the
    /// update mask. Note that certain properties of a subscription, such as its
    /// topic, are not modifiable.
    func updateSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists matching subscriptions.
    func listSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSubscriptionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSubscriptionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSubscriptionsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSubscriptionsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Deletes an existing subscription. All messages retained in the subscription
    /// are immediately dropped. Calls to `Pull` after deletion will return
    /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    /// the same name, but the new one has no association with the old
    /// subscription or its topic unless the same topic is specified.
    func deleteSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Modifies the ack deadline for a specific message. This method is useful
    /// to indicate that more time is needed to process a message by the
    /// subscriber, or to make the message available for redelivery if the
    /// processing was interrupted. Note that this does not modify the
    /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
    func modifyAckDeadline<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyAckDeadlineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ModifyAckDeadlineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Acknowledges the messages associated with the `ack_ids` in the
    /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    /// from the subscription.
    ///
    /// Acknowledging a message whose ack deadline has expired may succeed,
    /// but such a message may be redelivered later. Acknowledging a message more
    /// than once will not result in an error.
    func acknowledge<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_AcknowledgeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_AcknowledgeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Pulls messages from the server.
    func pull<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PullRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_PullRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_PullResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PullResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Establishes a stream with the server, which sends messages down to the
    /// client. The client streams acknowledgements and ack deadline modifications
    /// back to the server. The server will close the stream and return the status
    /// on any error. The server may close the stream with status `UNAVAILABLE` to
    /// reassign server-side resources, in which case, the client should
    /// re-establish the stream. Flow control can be achieved by configuring the
    /// underlying RPC channel.
    func streamingPull<R>(
        request: GRPCCore.StreamingClientRequest<Google_Pubsub_V1_StreamingPullRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_StreamingPullRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_StreamingPullResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Pubsub_V1_StreamingPullResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Modifies the `PushConfig` for a specified subscription.
    ///
    /// This may be used to change a push subscription to a pull one (signified by
    /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    /// attributes of a push subscription. Messages will accumulate for delivery
    /// continuously through the call regardless of changes to the `PushConfig`.
    func modifyPushConfig<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyPushConfigRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ModifyPushConfigRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Gets the configuration details of a snapshot. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    func getSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Lists the existing snapshots. Snapshots are used in [Seek](
    /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    func listSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSnapshotsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSnapshotsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSnapshotsResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSnapshotsResponse>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Creates a snapshot from the requested subscription. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// If the snapshot already exists, returns `ALREADY_EXISTS`.
    /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
    /// If the backlog in the subscription is too old -- and the resulting snapshot
    /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
    /// See also the `Snapshot.expire_time` field. If the name is not provided in
    /// the request, the server will assign a random
    /// name for this snapshot on the same project as the subscription, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Snapshot object. Note that for
    /// REST API requests, you must specify a name in the request.
    func createSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CreateSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Updates an existing snapshot by updating the fields specified in the update
    /// mask. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    func updateSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Removes an existing snapshot. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// When the snapshot is deleted, all messages retained in the snapshot
    /// are immediately dropped. After a snapshot is deleted, a new one may be
    /// created with the same name, but the new one has no association with the old
    /// snapshot or its subscription, unless the same subscription is specified.
    func deleteSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R
    ) async throws -> R where R: Sendable
    
    /// Seeks an existing subscription to a point in time or to a given snapshot,
    /// whichever is provided in the request. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot. Note that both the subscription and the
    /// snapshot must be on the same topic.
    func seek<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_SeekRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_SeekRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_SeekResponse>,
        options: GRPCCore.CallOptions,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_SeekResponse>) async throws -> R
    ) async throws -> R where R: Sendable
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_Subscriber.ClientProtocol {
    internal func createSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_Subscription>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Subscription>(),
            options: options,
            body
        )
    }
    
    internal func getSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_GetSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Subscription>(),
            options: options,
            body
        )
    }
    
    internal func updateSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_UpdateSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Subscription>(),
            options: options,
            body
        )
    }
    
    internal func listSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSubscriptionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSubscriptionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSubscriptions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListSubscriptionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListSubscriptionsResponse>(),
            options: options,
            body
        )
    }
    
    internal func deleteSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSubscriptionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSubscription(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DeleteSubscriptionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func modifyAckDeadline<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyAckDeadlineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.modifyAckDeadline(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ModifyAckDeadlineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func acknowledge<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_AcknowledgeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.acknowledge(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_AcknowledgeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func pull<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PullRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PullResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.pull(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_PullRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_PullResponse>(),
            options: options,
            body
        )
    }
    
    internal func streamingPull<R>(
        request: GRPCCore.StreamingClientRequest<Google_Pubsub_V1_StreamingPullRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Pubsub_V1_StreamingPullResponse>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.streamingPull(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_StreamingPullRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_StreamingPullResponse>(),
            options: options,
            body
        )
    }
    
    internal func modifyPushConfig<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyPushConfigRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.modifyPushConfig(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ModifyPushConfigRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func getSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.getSnapshot(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_GetSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Snapshot>(),
            options: options,
            body
        )
    }
    
    internal func listSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSnapshotsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSnapshotsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.listSnapshots(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_ListSnapshotsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_ListSnapshotsResponse>(),
            options: options,
            body
        )
    }
    
    internal func createSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.createSnapshot(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_CreateSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Snapshot>(),
            options: options,
            body
        )
    }
    
    internal func updateSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.updateSnapshot(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_UpdateSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_Snapshot>(),
            options: options,
            body
        )
    }
    
    internal func deleteSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.deleteSnapshot(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_DeleteSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            body
        )
    }
    
    internal func seek<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_SeekRequest>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_SeekResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.seek(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Pubsub_V1_SeekRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Pubsub_V1_SeekResponse>(),
            options: options,
            body
        )
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Pubsub_V1_Subscriber.ClientProtocol {
    /// Creates a subscription to a given topic. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    /// If the subscription already exists, returns `ALREADY_EXISTS`.
    /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    ///
    /// If the name is not provided in the request, the server will assign a random
    /// name for this subscription on the same project as the topic, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Subscription object. Note that
    /// for REST API requests, you must specify a name in the request.
    internal func createSubscription<Result>(
        _ message: Google_Pubsub_V1_Subscription,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_Subscription>(
            message: message,
            metadata: metadata
        )
        return try await self.createSubscription(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets the configuration details of a subscription.
    internal func getSubscription<Result>(
        _ message: Google_Pubsub_V1_GetSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_GetSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSubscription(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates an existing subscription by updating the fields specified in the
    /// update mask. Note that certain properties of a subscription, such as its
    /// topic, are not modifiable.
    internal func updateSubscription<Result>(
        _ message: Google_Pubsub_V1_UpdateSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSubscription(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists matching subscriptions.
    internal func listSubscriptions<Result>(
        _ message: Google_Pubsub_V1_ListSubscriptionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSubscriptionsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListSubscriptionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSubscriptions(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Deletes an existing subscription. All messages retained in the subscription
    /// are immediately dropped. Calls to `Pull` after deletion will return
    /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    /// the same name, but the new one has no association with the old
    /// subscription or its topic unless the same topic is specified.
    internal func deleteSubscription<Result>(
        _ message: Google_Pubsub_V1_DeleteSubscriptionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSubscriptionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSubscription(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Modifies the ack deadline for a specific message. This method is useful
    /// to indicate that more time is needed to process a message by the
    /// subscriber, or to make the message available for redelivery if the
    /// processing was interrupted. Note that this does not modify the
    /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
    internal func modifyAckDeadline<Result>(
        _ message: Google_Pubsub_V1_ModifyAckDeadlineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyAckDeadlineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.modifyAckDeadline(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Acknowledges the messages associated with the `ack_ids` in the
    /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    /// from the subscription.
    ///
    /// Acknowledging a message whose ack deadline has expired may succeed,
    /// but such a message may be redelivered later. Acknowledging a message more
    /// than once will not result in an error.
    internal func acknowledge<Result>(
        _ message: Google_Pubsub_V1_AcknowledgeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_AcknowledgeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.acknowledge(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Pulls messages from the server.
    internal func pull<Result>(
        _ message: Google_Pubsub_V1_PullRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PullResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_PullRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pull(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Establishes a stream with the server, which sends messages down to the
    /// client. The client streams acknowledgements and ack deadline modifications
    /// back to the server. The server will close the stream and return the status
    /// on any error. The server may close the stream with status `UNAVAILABLE` to
    /// reassign server-side resources, in which case, the client should
    /// re-establish the stream. Flow control can be achieved by configuring the
    /// underlying RPC channel.
    internal func streamingPull<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer: @Sendable @escaping (GRPCCore.RPCWriter<Google_Pubsub_V1_StreamingPullRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Pubsub_V1_StreamingPullResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Google_Pubsub_V1_StreamingPullRequest>(
            metadata: metadata,
            producer: requestProducer
        )
        return try await self.streamingPull(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Modifies the `PushConfig` for a specified subscription.
    ///
    /// This may be used to change a push subscription to a pull one (signified by
    /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    /// attributes of a push subscription. Messages will accumulate for delivery
    /// continuously through the call regardless of changes to the `PushConfig`.
    internal func modifyPushConfig<Result>(
        _ message: Google_Pubsub_V1_ModifyPushConfigRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyPushConfigRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.modifyPushConfig(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Gets the configuration details of a snapshot. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func getSnapshot<Result>(
        _ message: Google_Pubsub_V1_GetSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_GetSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSnapshot(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Lists the existing snapshots. Snapshots are used in [Seek](
    /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func listSnapshots<Result>(
        _ message: Google_Pubsub_V1_ListSnapshotsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSnapshotsResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_ListSnapshotsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSnapshots(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Creates a snapshot from the requested subscription. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// If the snapshot already exists, returns `ALREADY_EXISTS`.
    /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
    /// If the backlog in the subscription is too old -- and the resulting snapshot
    /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
    /// See also the `Snapshot.expire_time` field. If the name is not provided in
    /// the request, the server will assign a random
    /// name for this snapshot on the same project as the subscription, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Snapshot object. Note that for
    /// REST API requests, you must specify a name in the request.
    internal func createSnapshot<Result>(
        _ message: Google_Pubsub_V1_CreateSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSnapshot(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Updates an existing snapshot by updating the fields specified in the update
    /// mask. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func updateSnapshot<Result>(
        _ message: Google_Pubsub_V1_UpdateSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSnapshot(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Removes an existing snapshot. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// When the snapshot is deleted, all messages retained in the snapshot
    /// are immediately dropped. After a snapshot is deleted, a new one may be
    /// created with the same name, but the new one has no association with the old
    /// snapshot or its subscription, unless the same subscription is specified.
    internal func deleteSnapshot<Result>(
        _ message: Google_Pubsub_V1_DeleteSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSnapshot(
            request: request,
            options: options,
            handleResponse
        )
    }
    
    /// Seeks an existing subscription to a point in time or to a given snapshot,
    /// whichever is provided in the request. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot. Note that both the subscription and the
    /// snapshot must be on the same topic.
    internal func seek<Result>(
        _ message: Google_Pubsub_V1_SeekRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_SeekResponse>) async throws -> Result = {
            try $0.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Pubsub_V1_SeekRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.seek(
            request: request,
            options: options,
            handleResponse
        )
    }
}

/// The service that an application uses to manipulate subscriptions and to
/// consume messages from a subscription via the `Pull` method or by
/// establishing a bi-directional stream using the `StreamingPull` method.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal struct Google_Pubsub_V1_Subscriber_Client: Google_Pubsub_V1_Subscriber.ClientProtocol {
    private let client: GRPCCore.GRPCClient
    
    internal init(wrapping client: GRPCCore.GRPCClient) {
        self.client = client
    }
    
    /// Creates a subscription to a given topic. See the [resource name rules]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
    /// If the subscription already exists, returns `ALREADY_EXISTS`.
    /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    ///
    /// If the name is not provided in the request, the server will assign a random
    /// name for this subscription on the same project as the topic, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Subscription object. Note that
    /// for REST API requests, you must specify a name in the request.
    internal func createSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_Subscription>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_Subscription>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.CreateSubscription.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets the configuration details of a subscription.
    internal func getSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.GetSubscription.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates an existing subscription by updating the fields specified in the
    /// update mask. Note that certain properties of a subscription, such as its
    /// topic, are not modifiable.
    internal func updateSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Subscription>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Subscription>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.UpdateSubscription.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists matching subscriptions.
    internal func listSubscriptions<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSubscriptionsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSubscriptionsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSubscriptionsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSubscriptionsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.ListSubscriptions.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Deletes an existing subscription. All messages retained in the subscription
    /// are immediately dropped. Calls to `Pull` after deletion will return
    /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    /// the same name, but the new one has no association with the old
    /// subscription or its topic unless the same topic is specified.
    internal func deleteSubscription<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSubscriptionRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSubscriptionRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.DeleteSubscription.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Modifies the ack deadline for a specific message. This method is useful
    /// to indicate that more time is needed to process a message by the
    /// subscriber, or to make the message available for redelivery if the
    /// processing was interrupted. Note that this does not modify the
    /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
    internal func modifyAckDeadline<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyAckDeadlineRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ModifyAckDeadlineRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.ModifyAckDeadline.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Acknowledges the messages associated with the `ack_ids` in the
    /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    /// from the subscription.
    ///
    /// Acknowledging a message whose ack deadline has expired may succeed,
    /// but such a message may be redelivered later. Acknowledging a message more
    /// than once will not result in an error.
    internal func acknowledge<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_AcknowledgeRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_AcknowledgeRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.Acknowledge.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Pulls messages from the server.
    internal func pull<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_PullRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_PullRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_PullResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_PullResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.Pull.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Establishes a stream with the server, which sends messages down to the
    /// client. The client streams acknowledgements and ack deadline modifications
    /// back to the server. The server will close the stream and return the status
    /// on any error. The server may close the stream with status `UNAVAILABLE` to
    /// reassign server-side resources, in which case, the client should
    /// re-establish the stream. Flow control can be achieved by configuring the
    /// underlying RPC channel.
    internal func streamingPull<R>(
        request: GRPCCore.StreamingClientRequest<Google_Pubsub_V1_StreamingPullRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_StreamingPullRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_StreamingPullResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Pubsub_V1_StreamingPullResponse>) async throws -> R
    ) async throws -> R where R: Sendable {
        try await self.client.bidirectionalStreaming(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.StreamingPull.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Modifies the `PushConfig` for a specified subscription.
    ///
    /// This may be used to change a push subscription to a pull one (signified by
    /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    /// attributes of a push subscription. Messages will accumulate for delivery
    /// continuously through the call regardless of changes to the `PushConfig`.
    internal func modifyPushConfig<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ModifyPushConfigRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ModifyPushConfigRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.ModifyPushConfig.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Gets the configuration details of a snapshot. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func getSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_GetSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_GetSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.GetSnapshot.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Lists the existing snapshots. Snapshots are used in [Seek](
    /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func listSnapshots<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_ListSnapshotsRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_ListSnapshotsRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_ListSnapshotsResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_ListSnapshotsResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.ListSnapshots.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Creates a snapshot from the requested subscription. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// If the snapshot already exists, returns `ALREADY_EXISTS`.
    /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
    /// If the backlog in the subscription is too old -- and the resulting snapshot
    /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
    /// See also the `Snapshot.expire_time` field. If the name is not provided in
    /// the request, the server will assign a random
    /// name for this snapshot on the same project as the subscription, conforming
    /// to the [resource name format]
    /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
    /// generated name is populated in the returned Snapshot object. Note that for
    /// REST API requests, you must specify a name in the request.
    internal func createSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_CreateSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_CreateSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.CreateSnapshot.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Updates an existing snapshot by updating the fields specified in the update
    /// mask. Snapshots are used in
    /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
    /// which allow you to manage message acknowledgments in bulk. That is, you can
    /// set the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    internal func updateSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_UpdateSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_UpdateSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_Snapshot>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_Snapshot>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.UpdateSnapshot.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Removes an existing snapshot. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot.
    /// When the snapshot is deleted, all messages retained in the snapshot
    /// are immediately dropped. After a snapshot is deleted, a new one may be
    /// created with the same name, but the new one has no association with the old
    /// snapshot or its subscription, unless the same subscription is specified.
    internal func deleteSnapshot<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_DeleteSnapshotRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_DeleteSnapshotRequest>,
        deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.DeleteSnapshot.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
    
    /// Seeks an existing subscription to a point in time or to a given snapshot,
    /// whichever is provided in the request. Snapshots are used in [Seek]
    /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
    /// allow you to manage message acknowledgments in bulk. That is, you can set
    /// the acknowledgment state of messages in an existing subscription to the
    /// state captured by a snapshot. Note that both the subscription and the
    /// snapshot must be on the same topic.
    internal func seek<R>(
        request: GRPCCore.ClientRequest<Google_Pubsub_V1_SeekRequest>,
        serializer: some GRPCCore.MessageSerializer<Google_Pubsub_V1_SeekRequest>,
        deserializer: some GRPCCore.MessageDeserializer<Google_Pubsub_V1_SeekResponse>,
        options: GRPCCore.CallOptions = .defaults,
        _ body: @Sendable @escaping (GRPCCore.ClientResponse<Google_Pubsub_V1_SeekResponse>) async throws -> R = {
            try $0.message
        }
    ) async throws -> R where R: Sendable {
        try await self.client.unary(
            request: request,
            descriptor: Google_Pubsub_V1_Subscriber.Method.Seek.descriptor,
            serializer: serializer,
            deserializer: deserializer,
            options: options,
            handler: body
        )
    }
}
