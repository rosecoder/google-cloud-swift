//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: google/pubsub/v1/pubsub.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The service that an application uses to manipulate topics, and to send
/// messages to a topic.
///
/// Usage: instantiate `Google_Pubsub_V1_PublisherClient`, then call methods of this protocol to make API calls.
internal protocol Google_Pubsub_V1_PublisherClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? { get }

  func createTopic(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic>

  func updateTopic(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic>

  func publish(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse>

  func getTopic(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic>

  func listTopics(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse>

  func listTopicSubscriptions(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse>

  func listTopicSnapshots(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse>

  func deleteTopic(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func detachSubscription(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse>
}

extension Google_Pubsub_V1_PublisherClientProtocol {
  internal var serviceName: String {
    return "google.pubsub.v1.Publisher"
  }

  /// Creates the given topic with the given name. See the [resource name rules]
  /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTopic(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.createTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTopicInterceptors() ?? []
    )
  }

  /// Updates an existing topic by updating the fields specified in the update
  /// mask. Note that certain properties of a topic are not modifiable.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateTopic(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.updateTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTopicInterceptors() ?? []
    )
  }

  /// Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
  /// does not exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publish(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  /// Gets the configuration of a topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTopic(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.getTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTopicInterceptors() ?? []
    )
  }

  /// Lists matching topics.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTopics(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicsInterceptors() ?? []
    )
  }

  /// Lists the names of the attached subscriptions on this topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopicSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTopicSubscriptions(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSubscriptionsInterceptors() ?? []
    )
  }

  /// Lists the names of the snapshots on this topic. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTopicSnapshots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listTopicSnapshots(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSnapshotsInterceptors() ?? []
    )
  }

  /// Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
  /// does not exist. After a topic is deleted, a new topic may be created with
  /// the same name; this is an entirely new topic with none of the old
  /// configuration or subscriptions. Existing subscriptions to this topic are
  /// not deleted, but their `topic` field is set to `_deleted-topic_`.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTopic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTopic(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.deleteTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTopicInterceptors() ?? []
    )
  }

  /// Detaches a subscription from this topic. All messages retained in the
  /// subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
  /// will return FAILED_PRECONDITION. If the subscription is a push
  /// subscription, pushes to the endpoint will stop.
  ///
  /// - Parameters:
  ///   - request: Request to send to DetachSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func detachSubscription(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.detachSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachSubscriptionInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Google_Pubsub_V1_PublisherClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Google_Pubsub_V1_PublisherNIOClient")
internal final class Google_Pubsub_V1_PublisherClient: Google_Pubsub_V1_PublisherClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.pubsub.v1.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Google_Pubsub_V1_PublisherNIOClient: Google_Pubsub_V1_PublisherClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol?

  /// Creates a client for the google.pubsub.v1.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The service that an application uses to manipulate topics, and to send
/// messages to a topic.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Google_Pubsub_V1_PublisherAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? { get }

  func makeCreateTopicCall(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic>

  func makeUpdateTopicCall(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic>

  func makePublishCall(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse>

  func makeGetTopicCall(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic>

  func makeListTopicsCall(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse>

  func makeListTopicSubscriptionsCall(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse>

  func makeListTopicSnapshotsCall(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse>

  func makeDeleteTopicCall(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDetachSubscriptionCall(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Pubsub_V1_PublisherAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Pubsub_V1_PublisherClientMetadata.serviceDescriptor
  }

  internal var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateTopicCall(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.createTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTopicInterceptors() ?? []
    )
  }

  internal func makeUpdateTopicCall(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.updateTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTopicInterceptors() ?? []
    )
  }

  internal func makePublishCall(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  internal func makeGetTopicCall(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.getTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTopicInterceptors() ?? []
    )
  }

  internal func makeListTopicsCall(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicsInterceptors() ?? []
    )
  }

  internal func makeListTopicSubscriptionsCall(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSubscriptionsInterceptors() ?? []
    )
  }

  internal func makeListTopicSnapshotsCall(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSnapshotsInterceptors() ?? []
    )
  }

  internal func makeDeleteTopicCall(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.deleteTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTopicInterceptors() ?? []
    )
  }

  internal func makeDetachSubscriptionCall(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.detachSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachSubscriptionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Pubsub_V1_PublisherAsyncClientProtocol {
  internal func createTopic(
    _ request: Google_Pubsub_V1_Topic,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Topic {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.createTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTopicInterceptors() ?? []
    )
  }

  internal func updateTopic(
    _ request: Google_Pubsub_V1_UpdateTopicRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Topic {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.updateTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTopicInterceptors() ?? []
    )
  }

  internal func publish(
    _ request: Google_Pubsub_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_PublishResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  internal func getTopic(
    _ request: Google_Pubsub_V1_GetTopicRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Topic {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.getTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTopicInterceptors() ?? []
    )
  }

  internal func listTopics(
    _ request: Google_Pubsub_V1_ListTopicsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_ListTopicsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicsInterceptors() ?? []
    )
  }

  internal func listTopicSubscriptions(
    _ request: Google_Pubsub_V1_ListTopicSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_ListTopicSubscriptionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSubscriptionsInterceptors() ?? []
    )
  }

  internal func listTopicSnapshots(
    _ request: Google_Pubsub_V1_ListTopicSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_ListTopicSnapshotsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTopicSnapshotsInterceptors() ?? []
    )
  }

  internal func deleteTopic(
    _ request: Google_Pubsub_V1_DeleteTopicRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.deleteTopic.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTopicInterceptors() ?? []
    )
  }

  internal func detachSubscription(
    _ request: Google_Pubsub_V1_DetachSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_DetachSubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_PublisherClientMetadata.Methods.detachSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDetachSubscriptionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Google_Pubsub_V1_PublisherAsyncClient: Google_Pubsub_V1_PublisherAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Google_Pubsub_V1_PublisherClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createTopic'.
  func makeCreateTopicInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_Topic, Google_Pubsub_V1_Topic>]

  /// - Returns: Interceptors to use when invoking 'updateTopic'.
  func makeUpdateTopicInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_UpdateTopicRequest, Google_Pubsub_V1_Topic>]

  /// - Returns: Interceptors to use when invoking 'publish'.
  func makePublishInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_PublishRequest, Google_Pubsub_V1_PublishResponse>]

  /// - Returns: Interceptors to use when invoking 'getTopic'.
  func makeGetTopicInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_GetTopicRequest, Google_Pubsub_V1_Topic>]

  /// - Returns: Interceptors to use when invoking 'listTopics'.
  func makeListTopicsInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ListTopicsRequest, Google_Pubsub_V1_ListTopicsResponse>]

  /// - Returns: Interceptors to use when invoking 'listTopicSubscriptions'.
  func makeListTopicSubscriptionsInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ListTopicSubscriptionsRequest, Google_Pubsub_V1_ListTopicSubscriptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'listTopicSnapshots'.
  func makeListTopicSnapshotsInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ListTopicSnapshotsRequest, Google_Pubsub_V1_ListTopicSnapshotsResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteTopic'.
  func makeDeleteTopicInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_DeleteTopicRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'detachSubscription'.
  func makeDetachSubscriptionInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_DetachSubscriptionRequest, Google_Pubsub_V1_DetachSubscriptionResponse>]
}

internal enum Google_Pubsub_V1_PublisherClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Publisher",
    fullName: "google.pubsub.v1.Publisher",
    methods: [
      Google_Pubsub_V1_PublisherClientMetadata.Methods.createTopic,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.updateTopic,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.publish,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.getTopic,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopics,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSubscriptions,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.listTopicSnapshots,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.deleteTopic,
      Google_Pubsub_V1_PublisherClientMetadata.Methods.detachSubscription,
    ]
  )

  internal enum Methods {
    internal static let createTopic = GRPCMethodDescriptor(
      name: "CreateTopic",
      path: "/google.pubsub.v1.Publisher/CreateTopic",
      type: GRPCCallType.unary
    )

    internal static let updateTopic = GRPCMethodDescriptor(
      name: "UpdateTopic",
      path: "/google.pubsub.v1.Publisher/UpdateTopic",
      type: GRPCCallType.unary
    )

    internal static let publish = GRPCMethodDescriptor(
      name: "Publish",
      path: "/google.pubsub.v1.Publisher/Publish",
      type: GRPCCallType.unary
    )

    internal static let getTopic = GRPCMethodDescriptor(
      name: "GetTopic",
      path: "/google.pubsub.v1.Publisher/GetTopic",
      type: GRPCCallType.unary
    )

    internal static let listTopics = GRPCMethodDescriptor(
      name: "ListTopics",
      path: "/google.pubsub.v1.Publisher/ListTopics",
      type: GRPCCallType.unary
    )

    internal static let listTopicSubscriptions = GRPCMethodDescriptor(
      name: "ListTopicSubscriptions",
      path: "/google.pubsub.v1.Publisher/ListTopicSubscriptions",
      type: GRPCCallType.unary
    )

    internal static let listTopicSnapshots = GRPCMethodDescriptor(
      name: "ListTopicSnapshots",
      path: "/google.pubsub.v1.Publisher/ListTopicSnapshots",
      type: GRPCCallType.unary
    )

    internal static let deleteTopic = GRPCMethodDescriptor(
      name: "DeleteTopic",
      path: "/google.pubsub.v1.Publisher/DeleteTopic",
      type: GRPCCallType.unary
    )

    internal static let detachSubscription = GRPCMethodDescriptor(
      name: "DetachSubscription",
      path: "/google.pubsub.v1.Publisher/DetachSubscription",
      type: GRPCCallType.unary
    )
  }
}

/// The service that an application uses to manipulate subscriptions and to
/// consume messages from a subscription via the `Pull` method or by
/// establishing a bi-directional stream using the `StreamingPull` method.
///
/// Usage: instantiate `Google_Pubsub_V1_SubscriberClient`, then call methods of this protocol to make API calls.
internal protocol Google_Pubsub_V1_SubscriberClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? { get }

  func createSubscription(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription>

  func getSubscription(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func updateSubscription(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func listSubscriptions(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse>

  func deleteSubscription(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func modifyAckDeadline(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func acknowledge(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func pull(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse>

  func streamingPull(
    callOptions: CallOptions?,
    handler: @escaping (Google_Pubsub_V1_StreamingPullResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse>

  func modifyPushConfig(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getSnapshot(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func listSnapshots(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse>

  func createSnapshot(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func updateSnapshot(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func deleteSnapshot(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func seek(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse>
}

extension Google_Pubsub_V1_SubscriberClientProtocol {
  internal var serviceName: String {
    return "google.pubsub.v1.Subscriber"
  }

  /// Creates a subscription to a given topic. See the [resource name rules]
  /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names).
  /// If the subscription already exists, returns `ALREADY_EXISTS`.
  /// If the corresponding topic doesn't exist, returns `NOT_FOUND`.
  ///
  /// If the name is not provided in the request, the server will assign a random
  /// name for this subscription on the same project as the topic, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
  /// generated name is populated in the returned Subscription object. Note that
  /// for REST API requests, you must specify a name in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSubscription(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubscriptionInterceptors() ?? []
    )
  }

  /// Gets the configuration details of a subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSubscription(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  /// Updates an existing subscription by updating the fields specified in the
  /// update mask. Note that certain properties of a subscription, such as its
  /// topic, are not modifiable.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSubscription(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSubscriptionInterceptors() ?? []
    )
  }

  /// Lists matching subscriptions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSubscriptions(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  /// Deletes an existing subscription. All messages retained in the subscription
  /// are immediately dropped. Calls to `Pull` after deletion will return
  /// `NOT_FOUND`. After a subscription is deleted, a new one may be created with
  /// the same name, but the new one has no association with the old
  /// subscription or its topic unless the same topic is specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSubscription(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubscriptionInterceptors() ?? []
    )
  }

  /// Modifies the ack deadline for a specific message. This method is useful
  /// to indicate that more time is needed to process a message by the
  /// subscriber, or to make the message available for redelivery if the
  /// processing was interrupted. Note that this does not modify the
  /// subscription-level `ackDeadlineSeconds` used for subsequent messages.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyAckDeadline.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func modifyAckDeadline(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyAckDeadline.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyAckDeadlineInterceptors() ?? []
    )
  }

  /// Acknowledges the messages associated with the `ack_ids` in the
  /// `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
  /// from the subscription.
  ///
  /// Acknowledging a message whose ack deadline has expired may succeed,
  /// but such a message may be redelivered later. Acknowledging a message more
  /// than once will not result in an error.
  ///
  /// - Parameters:
  ///   - request: Request to send to Acknowledge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func acknowledge(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.acknowledge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgeInterceptors() ?? []
    )
  }

  /// Pulls messages from the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pull.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pull(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.pull.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullInterceptors() ?? []
    )
  }

  /// Establishes a stream with the server, which sends messages down to the
  /// client. The client streams acknowledgements and ack deadline modifications
  /// back to the server. The server will close the stream and return the status
  /// on any error. The server may close the stream with status `UNAVAILABLE` to
  /// reassign server-side resources, in which case, the client should
  /// re-establish the stream. Flow control can be achieved by configuring the
  /// underlying RPC channel.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func streamingPull(
    callOptions: CallOptions? = nil,
    handler: @escaping (Google_Pubsub_V1_StreamingPullResponse) -> Void
  ) -> BidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.streamingPull.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingPullInterceptors() ?? [],
      handler: handler
    )
  }

  /// Modifies the `PushConfig` for a specified subscription.
  ///
  /// This may be used to change a push subscription to a pull one (signified by
  /// an empty `PushConfig`) or vice versa, or change the endpoint URL and other
  /// attributes of a push subscription. Messages will accumulate for delivery
  /// continuously through the call regardless of changes to the `PushConfig`.
  ///
  /// - Parameters:
  ///   - request: Request to send to ModifyPushConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func modifyPushConfig(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyPushConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyPushConfigInterceptors() ?? []
    )
  }

  /// Gets the configuration details of a snapshot. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSnapshot(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSnapshotInterceptors() ?? []
    )
  }

  /// Lists the existing snapshots. Snapshots are used in [Seek](
  /// https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSnapshots.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listSnapshots(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  /// Creates a snapshot from the requested subscription. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// If the snapshot already exists, returns `ALREADY_EXISTS`.
  /// If the requested subscription doesn't exist, returns `NOT_FOUND`.
  /// If the backlog in the subscription is too old -- and the resulting snapshot
  /// would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.
  /// See also the `Snapshot.expire_time` field. If the name is not provided in
  /// the request, the server will assign a random
  /// name for this snapshot on the same project as the subscription, conforming
  /// to the [resource name format]
  /// (https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names). The
  /// generated name is populated in the returned Snapshot object. Note that for
  /// REST API requests, you must specify a name in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSnapshot(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSnapshotInterceptors() ?? []
    )
  }

  /// Updates an existing snapshot by updating the fields specified in the update
  /// mask. Snapshots are used in
  /// [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
  /// which allow you to manage message acknowledgments in bulk. That is, you can
  /// set the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSnapshot(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSnapshotInterceptors() ?? []
    )
  }

  /// Removes an existing snapshot. Snapshots are used in [Seek]
  /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot.
  /// When the snapshot is deleted, all messages retained in the snapshot
  /// are immediately dropped. After a snapshot is deleted, a new one may be
  /// created with the same name, but the new one has no association with the old
  /// snapshot or its subscription, unless the same subscription is specified.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSnapshot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSnapshot(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSnapshotInterceptors() ?? []
    )
  }

  /// Seeks an existing subscription to a point in time or to a given snapshot,
  /// whichever is provided in the request. Snapshots are used in [Seek]
  /// (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
  /// allow you to manage message acknowledgments in bulk. That is, you can set
  /// the acknowledgment state of messages in an existing subscription to the
  /// state captured by a snapshot. Note that both the subscription and the
  /// snapshot must be on the same topic.
  ///
  /// - Parameters:
  ///   - request: Request to send to Seek.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func seek(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse> {
    return self.makeUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.seek.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSeekInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Google_Pubsub_V1_SubscriberClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Google_Pubsub_V1_SubscriberNIOClient")
internal final class Google_Pubsub_V1_SubscriberClient: Google_Pubsub_V1_SubscriberClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the google.pubsub.v1.Subscriber service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Google_Pubsub_V1_SubscriberNIOClient: Google_Pubsub_V1_SubscriberClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol?

  /// Creates a client for the google.pubsub.v1.Subscriber service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The service that an application uses to manipulate subscriptions and to
/// consume messages from a subscription via the `Pull` method or by
/// establishing a bi-directional stream using the `StreamingPull` method.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Google_Pubsub_V1_SubscriberAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? { get }

  func makeCreateSubscriptionCall(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription>

  func makeGetSubscriptionCall(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func makeUpdateSubscriptionCall(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription>

  func makeListSubscriptionsCall(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse>

  func makeDeleteSubscriptionCall(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeModifyAckDeadlineCall(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeAcknowledgeCall(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makePullCall(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse>

  func makeStreamingPullCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse>

  func makeModifyPushConfigCall(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetSnapshotCall(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func makeListSnapshotsCall(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse>

  func makeCreateSnapshotCall(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func makeUpdateSnapshotCall(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot>

  func makeDeleteSnapshotCall(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSeekCall(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Pubsub_V1_SubscriberAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Google_Pubsub_V1_SubscriberClientMetadata.serviceDescriptor
  }

  internal var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateSubscriptionCall(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubscriptionInterceptors() ?? []
    )
  }

  internal func makeGetSubscriptionCall(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  internal func makeUpdateSubscriptionCall(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSubscriptionInterceptors() ?? []
    )
  }

  internal func makeListSubscriptionsCall(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  internal func makeDeleteSubscriptionCall(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubscriptionInterceptors() ?? []
    )
  }

  internal func makeModifyAckDeadlineCall(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyAckDeadline.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyAckDeadlineInterceptors() ?? []
    )
  }

  internal func makeAcknowledgeCall(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.acknowledge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgeInterceptors() ?? []
    )
  }

  internal func makePullCall(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.pull.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullInterceptors() ?? []
    )
  }

  internal func makeStreamingPullCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.streamingPull.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingPullInterceptors() ?? []
    )
  }

  internal func makeModifyPushConfigCall(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyPushConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyPushConfigInterceptors() ?? []
    )
  }

  internal func makeGetSnapshotCall(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSnapshotInterceptors() ?? []
    )
  }

  internal func makeListSnapshotsCall(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  internal func makeCreateSnapshotCall(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSnapshotInterceptors() ?? []
    )
  }

  internal func makeUpdateSnapshotCall(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSnapshotInterceptors() ?? []
    )
  }

  internal func makeDeleteSnapshotCall(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSnapshotInterceptors() ?? []
    )
  }

  internal func makeSeekCall(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse> {
    return self.makeAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.seek.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSeekInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Google_Pubsub_V1_SubscriberAsyncClientProtocol {
  internal func createSubscription(
    _ request: Google_Pubsub_V1_Subscription,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Subscription {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubscriptionInterceptors() ?? []
    )
  }

  internal func getSubscription(
    _ request: Google_Pubsub_V1_GetSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Subscription {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubscriptionInterceptors() ?? []
    )
  }

  internal func updateSubscription(
    _ request: Google_Pubsub_V1_UpdateSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Subscription {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSubscriptionInterceptors() ?? []
    )
  }

  internal func listSubscriptions(
    _ request: Google_Pubsub_V1_ListSubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_ListSubscriptionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSubscriptionsInterceptors() ?? []
    )
  }

  internal func deleteSubscription(
    _ request: Google_Pubsub_V1_DeleteSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSubscriptionInterceptors() ?? []
    )
  }

  internal func modifyAckDeadline(
    _ request: Google_Pubsub_V1_ModifyAckDeadlineRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyAckDeadline.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyAckDeadlineInterceptors() ?? []
    )
  }

  internal func acknowledge(
    _ request: Google_Pubsub_V1_AcknowledgeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.acknowledge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgeInterceptors() ?? []
    )
  }

  internal func pull(
    _ request: Google_Pubsub_V1_PullRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_PullResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.pull.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePullInterceptors() ?? []
    )
  }

  internal func streamingPull<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Pubsub_V1_StreamingPullResponse> where RequestStream: Sequence, RequestStream.Element == Google_Pubsub_V1_StreamingPullRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.streamingPull.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingPullInterceptors() ?? []
    )
  }

  internal func streamingPull<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Google_Pubsub_V1_StreamingPullResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Google_Pubsub_V1_StreamingPullRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.streamingPull.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingPullInterceptors() ?? []
    )
  }

  internal func modifyPushConfig(
    _ request: Google_Pubsub_V1_ModifyPushConfigRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyPushConfig.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModifyPushConfigInterceptors() ?? []
    )
  }

  internal func getSnapshot(
    _ request: Google_Pubsub_V1_GetSnapshotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Snapshot {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSnapshotInterceptors() ?? []
    )
  }

  internal func listSnapshots(
    _ request: Google_Pubsub_V1_ListSnapshotsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_ListSnapshotsResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSnapshots.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSnapshotsInterceptors() ?? []
    )
  }

  internal func createSnapshot(
    _ request: Google_Pubsub_V1_CreateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Snapshot {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSnapshotInterceptors() ?? []
    )
  }

  internal func updateSnapshot(
    _ request: Google_Pubsub_V1_UpdateSnapshotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_Snapshot {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSnapshotInterceptors() ?? []
    )
  }

  internal func deleteSnapshot(
    _ request: Google_Pubsub_V1_DeleteSnapshotRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSnapshot.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSnapshotInterceptors() ?? []
    )
  }

  internal func seek(
    _ request: Google_Pubsub_V1_SeekRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Pubsub_V1_SeekResponse {
    return try await self.performAsyncUnaryCall(
      path: Google_Pubsub_V1_SubscriberClientMetadata.Methods.seek.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSeekInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Google_Pubsub_V1_SubscriberAsyncClient: Google_Pubsub_V1_SubscriberAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Google_Pubsub_V1_SubscriberClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createSubscription'.
  func makeCreateSubscriptionInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_Subscription, Google_Pubsub_V1_Subscription>]

  /// - Returns: Interceptors to use when invoking 'getSubscription'.
  func makeGetSubscriptionInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_GetSubscriptionRequest, Google_Pubsub_V1_Subscription>]

  /// - Returns: Interceptors to use when invoking 'updateSubscription'.
  func makeUpdateSubscriptionInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_UpdateSubscriptionRequest, Google_Pubsub_V1_Subscription>]

  /// - Returns: Interceptors to use when invoking 'listSubscriptions'.
  func makeListSubscriptionsInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ListSubscriptionsRequest, Google_Pubsub_V1_ListSubscriptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSubscription'.
  func makeDeleteSubscriptionInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_DeleteSubscriptionRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'modifyAckDeadline'.
  func makeModifyAckDeadlineInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ModifyAckDeadlineRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'acknowledge'.
  func makeAcknowledgeInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_AcknowledgeRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'pull'.
  func makePullInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_PullRequest, Google_Pubsub_V1_PullResponse>]

  /// - Returns: Interceptors to use when invoking 'streamingPull'.
  func makeStreamingPullInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_StreamingPullRequest, Google_Pubsub_V1_StreamingPullResponse>]

  /// - Returns: Interceptors to use when invoking 'modifyPushConfig'.
  func makeModifyPushConfigInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ModifyPushConfigRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getSnapshot'.
  func makeGetSnapshotInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_GetSnapshotRequest, Google_Pubsub_V1_Snapshot>]

  /// - Returns: Interceptors to use when invoking 'listSnapshots'.
  func makeListSnapshotsInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_ListSnapshotsRequest, Google_Pubsub_V1_ListSnapshotsResponse>]

  /// - Returns: Interceptors to use when invoking 'createSnapshot'.
  func makeCreateSnapshotInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_CreateSnapshotRequest, Google_Pubsub_V1_Snapshot>]

  /// - Returns: Interceptors to use when invoking 'updateSnapshot'.
  func makeUpdateSnapshotInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_UpdateSnapshotRequest, Google_Pubsub_V1_Snapshot>]

  /// - Returns: Interceptors to use when invoking 'deleteSnapshot'.
  func makeDeleteSnapshotInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_DeleteSnapshotRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'seek'.
  func makeSeekInterceptors() -> [ClientInterceptor<Google_Pubsub_V1_SeekRequest, Google_Pubsub_V1_SeekResponse>]
}

internal enum Google_Pubsub_V1_SubscriberClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Subscriber",
    fullName: "google.pubsub.v1.Subscriber",
    methods: [
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSubscription,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSubscription,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSubscription,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSubscriptions,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSubscription,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyAckDeadline,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.acknowledge,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.pull,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.streamingPull,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.modifyPushConfig,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.getSnapshot,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.listSnapshots,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.createSnapshot,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.updateSnapshot,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.deleteSnapshot,
      Google_Pubsub_V1_SubscriberClientMetadata.Methods.seek,
    ]
  )

  internal enum Methods {
    internal static let createSubscription = GRPCMethodDescriptor(
      name: "CreateSubscription",
      path: "/google.pubsub.v1.Subscriber/CreateSubscription",
      type: GRPCCallType.unary
    )

    internal static let getSubscription = GRPCMethodDescriptor(
      name: "GetSubscription",
      path: "/google.pubsub.v1.Subscriber/GetSubscription",
      type: GRPCCallType.unary
    )

    internal static let updateSubscription = GRPCMethodDescriptor(
      name: "UpdateSubscription",
      path: "/google.pubsub.v1.Subscriber/UpdateSubscription",
      type: GRPCCallType.unary
    )

    internal static let listSubscriptions = GRPCMethodDescriptor(
      name: "ListSubscriptions",
      path: "/google.pubsub.v1.Subscriber/ListSubscriptions",
      type: GRPCCallType.unary
    )

    internal static let deleteSubscription = GRPCMethodDescriptor(
      name: "DeleteSubscription",
      path: "/google.pubsub.v1.Subscriber/DeleteSubscription",
      type: GRPCCallType.unary
    )

    internal static let modifyAckDeadline = GRPCMethodDescriptor(
      name: "ModifyAckDeadline",
      path: "/google.pubsub.v1.Subscriber/ModifyAckDeadline",
      type: GRPCCallType.unary
    )

    internal static let acknowledge = GRPCMethodDescriptor(
      name: "Acknowledge",
      path: "/google.pubsub.v1.Subscriber/Acknowledge",
      type: GRPCCallType.unary
    )

    internal static let pull = GRPCMethodDescriptor(
      name: "Pull",
      path: "/google.pubsub.v1.Subscriber/Pull",
      type: GRPCCallType.unary
    )

    internal static let streamingPull = GRPCMethodDescriptor(
      name: "StreamingPull",
      path: "/google.pubsub.v1.Subscriber/StreamingPull",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let modifyPushConfig = GRPCMethodDescriptor(
      name: "ModifyPushConfig",
      path: "/google.pubsub.v1.Subscriber/ModifyPushConfig",
      type: GRPCCallType.unary
    )

    internal static let getSnapshot = GRPCMethodDescriptor(
      name: "GetSnapshot",
      path: "/google.pubsub.v1.Subscriber/GetSnapshot",
      type: GRPCCallType.unary
    )

    internal static let listSnapshots = GRPCMethodDescriptor(
      name: "ListSnapshots",
      path: "/google.pubsub.v1.Subscriber/ListSnapshots",
      type: GRPCCallType.unary
    )

    internal static let createSnapshot = GRPCMethodDescriptor(
      name: "CreateSnapshot",
      path: "/google.pubsub.v1.Subscriber/CreateSnapshot",
      type: GRPCCallType.unary
    )

    internal static let updateSnapshot = GRPCMethodDescriptor(
      name: "UpdateSnapshot",
      path: "/google.pubsub.v1.Subscriber/UpdateSnapshot",
      type: GRPCCallType.unary
    )

    internal static let deleteSnapshot = GRPCMethodDescriptor(
      name: "DeleteSnapshot",
      path: "/google.pubsub.v1.Subscriber/DeleteSnapshot",
      type: GRPCCallType.unary
    )

    internal static let seek = GRPCMethodDescriptor(
      name: "Seek",
      path: "/google.pubsub.v1.Subscriber/Seek",
      type: GRPCCallType.unary
    )
  }
}

